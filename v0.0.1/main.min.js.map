{"version":3,"sources":["System.coffee","main.min.js","Utils.coffee","Graph.coffee","GridNode.coffee","Character.coffee","BattleCounter.coffee","SpriteBattleMap.coffee","SpriteCharacter.coffee","SpriteStatus.coffee","EventHandlerBattle.coffee","SceneBase.coffee","SceneMenu.coffee","SceneTitleMenu.coffee","SceneBattle.coffee","SceneBattlePosition.coffee","SceneBattleMoveCommand.coffee","SceneBattleShotCommand.coffee","SceneBattleDirectionCommand.coffee","SceneBattlePhase.coffee","SceneBattleResult.coffee","ScenePopMessage.coffee","Param.coffee","Default.coffee","Rule.coffee","main.coffee"],"names":["_g","nz","ref","window","global","System","this","ai","prototype","title","direction_num","UP","UP_RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","UP_LEFT","character","directions","name","rotation","index","rotateIndex","action_cost","move","rotate","attack","shot","stamina_cost","map","chip","width","height","screen","dialog","strokeStyle","fillStyle","assets","chipdata","map_object","map_chip","character_001","type","src","character_test","messages","battle","position","setiing","addAI","start","app","replaceScene","SceneTitleMenu","restart","system","call","DIRECTIONS","MAP_CHIP_H","MAP_CHIP_W","Utils","marge","r","o","k","v","Array","concat","searchRoute","graph","source","target","characters","options","c","direction","i","len","mapx","mapy","grid","cost","ap","closest","length","isAlive","push","isWall","mapxy2screenxy","p","arguments","x","y","screenxy2mapxy","Math","floor","relativeRotation","p1","p2","radToDeg","atan2","lineRoute","ax","ay","dx","dy","hx","hy","j","ref1","ref2","ret","sx","sy","abs","round","Graph","distance","checkDirectionRange","param","anticlockwise","callback","end","r1","r2","ra","res","range","utils","_FRONT_POS","_NEIGHBORS","chipid","l","mapdata","node","ref3","nodes","data","GridNode","clear","cleanWrap","clean","cleanDirty","markDirty","wrapNodes","getWrap","d","key","GridNodeWrap","astar","cleanNode","neighbors","w","results","toString","graphString","len1","rowDebug","weight","join","sd","ex","ey","op","g","len2","pd","result","route","wrap","heuristic","search","back","wrap1","wrap2","hd","hr","ceil","calcDirectionTo","directionCost","c1","c2","dir","dis","direction1","direction2","frontPosition","t","backPosition","hexLine","n","frontArea","a","apply","getCost","Object","defineProperty","get","enumerable","frame","object","calcDirection","calcDirectionBy","ACTION_COST","Character","spriteSheet","team","colorChanges","maxhp","maxsp","maxap","hp","sp","speed","armor","defense","weapon","damage","teamColor","from","to","commands","_command","clearCommand","createAiInfo","info","command","actions","clearMoveCommand","action","clearAttackCommand","clearShotCommand","getActionCost","getRemnantAp","getLastDirection","getLastPosition","pos","addMoveCommand","prev","addRotateCommand","setAttackCommand","isShotCommand","addShotCommand","isAttackCommand","some","isMoveCommand","isDead","BattleCounter","ballet","atk","hit","miss","max","total","def","missBallet","hitBallet","receiveBallet","missWeapon","hitWeapon","receiveWeapon","tm","define","superClass","display","CanvasElement","init","mapName","h","superInit","_chips","_blinks","_activeBlinks","characterSprites","asset","Manager","_initMapChip","cursor","_createCursor","addChildTo","setCursorPosition","getMapChip","on","e","visible","cursorUp","cursorDown","cursorLeft","cursorRight","findCharacter","findCharacterGhost","ghost","Shape","lineWidth","_render","canvas","strokeRect","render","_dispatchMapChipEvent","_e","event","Event","pointing","currentScene","dispatchEvent","blink","frameIndex","Sprite","setPosition","setFrameIndex","setInteractive","setBoundingType","bind","Label","fontSize","setOrigin","RectangleShape","setAlpha","setVisible","tweener","fade","setLoop","clearBlink","isBlink","ST_COST","AnimationSprite","index1","character1","bmp","f","ss","SpriteSheet","image","getBitmap","_createColorFilter","filter","graphics","Canvas","resize","drawBitmap","checkHierarchy","counter","body","createWeapon","_enterframeWeapon","setMapPosition","setDirection","console","log","clearGhost","startAction","turn","_weaponHitFlag","update","owner","collision","add","_hitWeapon","_hitBallet","hide","isGhost","alpha","hasGhost","b","calc","pixel","bitmap","setPixelIndex","setPixel32Index","createGhost","SpriteCharacter","remove","mapx1","mapy1","gotoAndPlay","updateBattle","enemy","scene","getRoot","_updateAttack","checkDirection","_checkAttackDirection","cw","clone","$extend","_attackAnimation","_isHitWeapon","flare","rt","geom","Vector2","setDegree","localToGlobal","isHitPoint","_setShotAction","_setMoveAction","_setRotateAction","_endAction","applyPosition","isMove","isStop","_shotAnimation","_fatigue","wait","finish","play","pause","angle","bv","vx","vy","ｈ","mapSprite","globalToLocal","CircleShape","degToRad","cos","sin","eventHandler","removeBallet","other","addBallet","_deadAnimation","shooter","_damage","attacker","deadCharacter","refreshStatus","form","characterSprite","detail","boundingType","interactive","bgColor","children","bg","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","originX","originY","_label","text","stroke","hpGauge","_gauge","color","_maxValue","spGauge","hpLabel","spLabel","fromJSON","sprite","setScale","EventHandlerBattle","selectStatus","status","borderWidth","borderColor","animationTime","align","baseline","_refreshActionText","value","_fireAll","_dispatchEvent","element","child","hasEventListener","fire","startBattleScene","endBattleScene","replayBattle","startBattlePhase","endBattlePhase","startBattleTurn","endBattleTurn","CENTER_X","CENTER_Y","SCREEN_H","SCREEN_W","Scene","popMessage","message","ScenePopMessage","center","duration","popwait","pushScene","openMenuDialog","dlg","SceneMenu","description","_description","setAlign","setBaseline","createKeyboradHander","eventKeys","repeatCount","repeatDelay","repeatIntarval","kb","keyboard","getKeyDown","getKey","setupCursorHandler","handler","ui","MenuDialog","m","self","screenWidth","screenHeight","menuFunc","menu","func","menuDesctiptions","desctiption","box","setStrokeStyle","setFillStyle","selectIndex","up","down","closeDialog","_selected","setIndex","selectValue","SceneBase","_new_game","_load_game","_option","_debug_game","game","TitleScene","onpointingstart","SceneBattle","mapId","controlTeam","endCondition","paddingLeft","_selectCharacterIndex","winner","replay","startInfo","load","loaded","contains","setup","LoadingScene","autopop","s","SpriteBattleMap","SpriteStatus","addChildAt","activeStatus","blinkCharacter","_mapPointingend","one","_pushScene","SceneBattlePosition","_startInputPhase","inputEnter","cursorHandler","targets","_openGameMenu","_openCommandMenu","_openSelectCharacterMenu","addChild","_createResultTimeup","score","draw","_createResultTeam","_createResult","isEnd","_commandScene","klass","selectCharacterSprite","_selectGhost","_checkCommandConf","_openTurnConfMenu","_exitGame","acost","rap","sc","selectCharacter","_addMoveCommand","_addRotateCommand","_addAttackCommand","_addShotCommand","_resetCommand","_startBattlePhase","_openResult","SceneBattleResult","_startReplay","popScene","si","show","setupAction","Param","SceneBattlePhase","SceneBattleMoveCommand","scs","SceneBattleShotCommand","SceneBattleDirectionCommand","getter","DIRNUM","MSGS","area","areaIndex","friends","otherTeam","teamArea","members","setupBattlePosition","_setBattlePosition","_mapPointingover","_start","_selectCharacter","format","_end","mapycenter","_over","costa","_keyInput","_keyRotate","_inputLeft","_inputRight","_pointEnd","_createPointer","_rotatePointer","tcsr","pointer","_movePointer","_pointStart","_pointMove","_setupCommand","_removePointer","_endScene","toAngle","_direction","costd","startTuen","endTurn","_balletCount","_startPhase","_addBallet","_removeBallet","_openPauseMenu","_startTurn","_endPhase","updateTurn","_endTurn","_isEnd","_isEndAllCharacterAction","flag","_openBattleEndMenu","_endBattle","easing","ref4","ref5","_param","_board","RoundRectangleShape","outAnimation","inAnimation","_out","setFriendsAndTargets","setNearTarget","_searchCharacters","rotatedir","searchTargets","searchFriends","findNearTarget","getHexPosition","nx","ny1","ny2","checkShotRange","checkMovePosition","getFrontPosition","getBackPosition","checkFrontPosition","checkBackPosition","setMoveCommand","args","slice","setShotCommand","setMoveBackCommand","num","setMoveFrontCommand","setRotateCommand","setDirectionCommand","Default","indexOf","Rule","caller","_caller","rules","rule","cond","main","CanvasApp","fitWindow","background","run"],"mappings":"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","file":"main.min.js","sourcesContent":["###*\r\n* @file System.coffee\r\n* システム情報\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nclass nz.System\r\n\r\n  title: 'Nineteen'\r\n  direction_num:\r\n    UP:         0\r\n    UP_RIGHT:   1\r\n    DOWN_RIGHT: 2\r\n    DOWN:       3\r\n    DOWN_LEFT:  4\r\n    UP_LEFT:    5\r\n  character:\r\n    directions: [\r\n      {name:'up'        , rotation:  -90, index:0, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\r\n      {name:'up_right'  , rotation:  -30, index:1, rotateIndex:[-1, 0, 1, 2, 3,-2]}\r\n      {name:'down_right', rotation:   30, index:2, rotateIndex:[-2,-1, 0, 1, 2, 3]}\r\n      {name:'down'      , rotation:   90, index:3, rotateIndex:[ 3,-2,-1, 0, 1, 2]}\r\n      {name:'down_left' , rotation:  150, index:4, rotateIndex:[ 2, 3,-2,-1, 0, 1]}\r\n      {name:'up_left'   , rotation: -150, index:5, rotateIndex:[ 1, 2, 3,-2,-1, 0]}\r\n      {name:'default'   , rotation:   90, index:6, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\r\n    ]\r\n    action_cost:\r\n      move:   1\r\n      rotate: 1\r\n      attack: 2\r\n      shot:   2\r\n    stamina_cost:\r\n      move:   1\r\n      rotate: 1\r\n      attack: 4\r\n      shot:   2\r\n  map:\r\n    chip:\r\n      width:  32\r\n      height: 32\r\n  screen:\r\n    width:  640\r\n    height: 480\r\n  dialog:\r\n    strokeStyle:'rgba(255,255,255,1.0)'\r\n    fillStyle:'rgba(128,128,128,1.0)'\r\n  assets:\r\n    chipdata: 'data/chipdata.json'\r\n    map_object: 'img/map_object.png'\r\n    map_chip: 'img/map_chip.png'\r\n    character_001:\r\n      type: 'tmss'\r\n      src: 'data/character_001.json'\r\n    character_test:\r\n      type: 'tmss'\r\n      src: 'data/character_test.json'\r\n  messages:\r\n    battle:\r\n      position:\r\n        setiing: '{name} の開始位置を選択してください。'\r\n\r\n  ###* 初期化\r\n  * @classdesc システムクラス\r\n  * @constructor nz.System\r\n  ###\r\n  constructor: () ->\r\n    @ai = {}\r\n    return\r\n\r\n  addAI: (name,ai) -> @ai[name] = ai\r\n\r\n  start: ->\r\n    @app.replaceScene nz.SceneTitleMenu()\r\n    return\r\n\r\n  restart: ->\r\n    @start()\r\n    return\r\n\r\n\r\nnz.system = new nz.System()\r\n",null,"# Utils.coffee\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nMAP_CHIP_W = nz.system.map.chip.width\r\nMAP_CHIP_H = nz.system.map.chip.height\r\nDIRECTIONS = nz.system.character.directions\r\n\r\nclass nz.Utils\r\n\r\n  ###* オブジェクトマージ\r\n  * @param {Object} r 受け側オブジェクト\r\n  * @param {Object} o マージオブジェクト\r\n  ###\r\n  marge: (r,o) ->\r\n    for k,v of o\r\n      if typeof v is 'object'\r\n        if v instanceof Array\r\n          r[k] = [].concat v\r\n        else\r\n          r[k] = {} unless r[k]?\r\n          @marge r[k], v\r\n      else\r\n        r[k] = v\r\n    return r\r\n\r\n\r\n  ###* 経路探索\r\n  * @param {nz.Graph} graph  グラフ（マップ情報）\r\n  * @param {Object}   source 開始位置のキャラクター({mapx,mapy,direction})\r\n  * @param {Object}   target 終了位置のキャラクターか位置情報({mapx,mapy})\r\n  * @param {Array}    characters 配列({mapx,mapy})\r\n  * @param {Object}   [options] オプション\r\n  * @param {boolean}  [options.closest] 到達できない場合に近くまで探索する場合 true\r\n  * @param {Object}   [options.grid] グリッドオプション\r\n  * @return {Array}   ルート情報\r\n  ###\r\n  searchRoute: (graph, source, target, characters, options = {})->\r\n    unless options.grid?\r\n      options.grid = []\r\n    unless options.graph?\r\n      options.graph = {\r\n        cost: source.ap\r\n      }\r\n    unless options.closest?\r\n      options.closest = true\r\n\r\n    for c in characters when c.isAlive() and (source.mapx != c.mapx or source.mapy != c.mapy)\r\n      options.grid.push {\r\n        mapx: c.mapx\r\n        mapy: c.mapy\r\n        options: {\r\n          isWall: true\r\n        }\r\n      }\r\n\r\n    {direction,mapx,mapy} = source\r\n    return graph.searchRoute(direction, mapx, mapy, target.mapx, target.mapy, options)\r\n\r\n  ###* マップ座標をスクリーン座標へ変換\r\n  * @param {Object} p {mapx,mapy}\r\n  * @return {Object}  {x,y}\r\n  ###\r\n  mapxy2screenxy: (p) ->\r\n    if arguments.length == 2\r\n      p = {\r\n        mapx: arguments[0]\r\n        mapy: arguments[1]\r\n      }\r\n    # origin があるから、0.5 ずらす\r\n    r = {\r\n      x: p.mapx * MAP_CHIP_W + MAP_CHIP_W * 0.5\r\n      y: p.mapy * MAP_CHIP_H + MAP_CHIP_H * 0.5\r\n    }\r\n    r.y += MAP_CHIP_H * 0.5 if p.mapx % 2 == 0\r\n    return r\r\n\r\n  ###* スクリーン座標をマップ座標へ変換\r\n  * @param {Object} p {x,y}\r\n  * @return {Object}  {mapx,mapy}\r\n  ###\r\n  screenxy2mapxy: (p) ->\r\n    if arguments.length == 2\r\n      p = {\r\n        x: arguments[0]\r\n        y: arguments[1]\r\n      }\r\n    mapx = Math.floor p.x / MAP_CHIP_W\r\n    if mapx % 2 == 0\r\n      mapy = Math.floor (p.y - MAP_CHIP_H * 0.5) / MAP_CHIP_H\r\n    else\r\n      mapy = Math.floor p.y / MAP_CHIP_H\r\n    mapx = 0 if mapx < 0\r\n    mapy = 0 if mapy < 0\r\n    return {\r\n      mapx: mapx\r\n      mapy: mapy\r\n    }\r\n\r\n  relativeRotation: (rotation,p1,p2) ->\r\n    r = 0\r\n    if p2?\r\n      r = Math.radToDeg(Math.atan2 p2.y - p1.y, p2.x - p1.x)\r\n    else\r\n      r = p1 % 360\r\n    r = r - rotation\r\n    if r > 180\r\n      r -= 360\r\n    else if r < -180\r\n      r += 360\r\n    return r\r\n\r\n  lineRoute: (p1,p2) ->\r\n    ret = [{\r\n      mapx: p1.mapx\r\n      mapy: p1.mapy\r\n    }]\r\n    dx = p2.mapx - p1.mapx\r\n    dy = p2.mapy - p1.mapy\r\n    hx = if dx < 0 then -1 else 1\r\n    hy = if dy < 0 then -1 else 1\r\n    ax = Math.abs dx\r\n    ay = Math.abs dy\r\n    if ax < ay\r\n      sx = if ay is 0 then hx else dx / ay\r\n      sy = if dy < 0 then -1 else 1\r\n      for y in [1 .. ay]\r\n        p = {\r\n          mapx: p1.mapx + sx * y\r\n          mapy: p1.mapy + sy * y\r\n        }\r\n        p.mapx = Math.round(p.mapx)\r\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\r\n          ret.push {\r\n            mapx: p.mapx - hx\r\n            mapy: p.mapy\r\n          }\r\n        ret.push p\r\n    else\r\n      sx = if dx < 0 then -1 else 1\r\n      sy = if ax is 0 then hy else dy / ax\r\n      for x in [1 .. ax]\r\n        p = {\r\n          mapx: p1.mapx + sx * x\r\n          mapy: p1.mapy + sy * x\r\n        }\r\n        p.mapy -= 0.5 if p.mapx % 2 == 0\r\n        p.mapy = Math.round(p.mapy)\r\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\r\n          ret.push {\r\n            mapx: p.mapx\r\n            mapy: p.mapy - hy\r\n          }\r\n        ret.push p\r\n    return ret\r\n    \r\n\r\n  ###* 座標方向確認。\r\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\r\n  * @param {Object}   param\r\n  * @param {number}   param.rotation キャラクターの向いている方向\r\n  * @param {number}   param.source   キャラクターの座標(x,y)\r\n  * @param {number}   param.target   ターゲット座標(x,y)\r\n  * @param {number}   param.start    確認する開始角度 -180 ～ 180\r\n  * @param {number}   param.end      確認する終了角度 -180 ～ 180\r\n  * @param {boolean}  param.anticlockwise range 方向(true 反時計回り)\r\n  * @param {Function} param.callback チェック結果をもらう関数\r\n  ###\r\n  checkDirectionRange: (param) ->\r\n    {\r\n      rotation\r\n      source\r\n      target\r\n      callback\r\n    } = param\r\n    {\r\n      start\r\n      end\r\n      anticlockwise\r\n    } = param.range\r\n    rotation = DIRECTIONS[source.direction].rotation unless rotation?\r\n    r = nz.utils.relativeRotation(rotation,source,target)\r\n    r1 = if anticlockwise then end   else start\r\n    r2 = if anticlockwise then start else end\r\n    res = false\r\n    if r1 < r2\r\n      res = r1 <= r and r <= r2\r\n    else\r\n      res = r1 <= r or  r <= r2\r\n    if callback?\r\n      unless res\r\n        ra = r1 if r1 > r\r\n        ra = r2 if r  > r2\r\n      else\r\n        ra = r\r\n      callback(res,ra)\r\n    return res\r\n\r\nnz.utils = new nz.Utils()\r\n","###*\r\n* @file Graph.coffee\r\n* A*用グラフクラス\r\n###\r\n\r\n###* nineteen namespace.\r\n* @namespace nz\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\n_NEIGHBORS = [\r\n  [\r\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\r\n    [[ 1, 0, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 1, 1]]\r\n    [[ 1, 1, 2],[ 0, 0, 1],[ 0, 0, 3],[-1, 0, 2]]\r\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\r\n    [[-1, 1, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1, 0, 4]]\r\n    [[-1, 0, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 1, 5]]\r\n  ]\r\n  [\r\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\r\n    [[ 1,-1, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 0, 1]]\r\n    [[ 1, 0, 2],[ 0, 0, 1],[ 0, 0, 3],[-1,-1, 2]]\r\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\r\n    [[-1, 0, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1,-1, 4]]\r\n    [[-1,-1, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 0, 5]]\r\n  ]\r\n]\r\n\r\nclass nz.Graph\r\n\r\n  ###* コンストラクタ.\r\n  * @classdesc A*用グラフクラス\r\n  * @constructor nz.Graph\r\n  ###\r\n  constructor: (param = {}) ->\r\n    {\r\n      mapdata\r\n      chipdata\r\n    } = param\r\n    @nodes = []\r\n    @grid = []\r\n    @grid[x] = [] for x in [0...mapdata.width]\r\n    for y in [0...mapdata.height]\r\n      for x in [0...mapdata.width]\r\n        unless y == mapdata.height - 1 and x % 2 == 0\r\n          chipid = mapdata.data[y][x]\r\n          node = new nz.GridNode(x,y,chipdata[chipid])\r\n          @grid[x][y] = node\r\n          @nodes.push(node)\r\n    @clear()\r\n\r\n  ###* クリア\r\n  * @memberof nz.Graph#\r\n  * @method clear\r\n  ###\r\n  clear: ->\r\n    @cleanWrap()\r\n    for node in @nodes\r\n      node.clean()\r\n    return\r\n\r\n  ###* ダーティノードの削除\r\n  * @memberof nz.Graph#\r\n  * @method cleanDirty\r\n  ###\r\n  cleanDirty: ->\r\n    return\r\n\r\n  ###* ダーティノードのマーク\r\n  * @memberof nz.Graph#\r\n  * @method markDirty\r\n  * @param {Object} node\r\n  ###\r\n  markDirty: (node) ->\r\n    return\r\n\r\n  ###* ラップクラスの削除\r\n  * @memberof nz.Graph#\r\n  * @method cleanWrap\r\n  ###\r\n  cleanWrap: ->\r\n    @wrapNodes = {}\r\n    return\r\n\r\n  ###* ラップクラスの取得\r\n  * @memberof nz.Graph#\r\n  * @method getWrap\r\n  ###\r\n  getWrap: (x,y,d) ->\r\n    key = \"#{x}-#{y}\"\r\n    if @wrapNodes[key]?\r\n      return @wrapNodes[key]\r\n    unless d?\r\n      unless @wrapNodes[key]?\r\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y])\r\n        astar.cleanNode(@wrapNodes[key])\r\n    else\r\n      key = \"#{x}-#{y}-#{d}\"\r\n      unless @wrapNodes[key]?\r\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y],d)\r\n        astar.cleanNode(@wrapNodes[key])\r\n    @wrapNodes[key]\r\n\r\n\r\n  neighbors: (w) ->\r\n    #self = @\r\n    #return _NEIGHBORS[w.mapx % 2][w.direction]\r\n    #  .filter (o) ->\r\n    #    [x,y,d] = o\r\n    #    self.grid[x + w.mapx]?[y + w.mapy]?\r\n    #  .map (o) ->\r\n    #    [x,y,d] = o\r\n    #    self.getWrap(x + w.mapx,y + w.mapy,d)\r\n    #ret = []\r\n    #for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction]\r\n    #  x += w.mapx\r\n    #  y += w.mapy\r\n    #  if @grid[x]?[y]?\r\n    #    ret.push @getWrap(x,y,d)\r\n    #return ret\r\n    for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction] when @grid[x + w.mapx]?[y + w.mapy]?\r\n      @getWrap(x + w.mapx, y + w.mapy, d)\r\n\r\n  toString: ->\r\n    graphString = []\r\n    for nodes in @grid\r\n      rowDebug = []\r\n      for node in nodes\r\n        rowDebug.push(node.weight)\r\n      graphString.push(rowDebug.join(\" \"))\r\n    return graphString.join(\"\\n\")\r\n\r\n  searchRoute: (sd,sx,sy,ex,ey,op={}) ->\r\n    route = []\r\n    start = @getWrap sx,sy,sd\r\n    end   = @getWrap ex,ey\r\n    # 壁じゃなかったら探索\r\n    if (not end.isWall()) or op.closest\r\n\r\n      unless op.closest?\r\n        op.closest = false\r\n      unless op.heuristic?\r\n        op.heuristic = nz.Graph.heuristic\r\n      unless op.grid?\r\n        op.grid = []\r\n\r\n      for g in op.grid\r\n        @grid[g.mapx][g.mapy].options = g.options\r\n      if op.graph?\r\n        @options = op.graph\r\n\r\n      result = astar.search(@, start, end, op)\r\n      pd = sd\r\n      for wrap in result\r\n        route.push {\r\n          mapx: wrap.mapx\r\n          mapy: wrap.mapy\r\n          cost: wrap.g\r\n          back: wrap.back\r\n          direction: if wrap.direction < 0 then pd else wrap.direction\r\n        }\r\n        pd = wrap.direction\r\n      for g in op.grid\r\n        @grid[g.mapx][g.mapy].options = undefined\r\n      @options = undefined\r\n    @cleanWrap()\r\n    return route\r\n\r\nnz.Graph.heuristic = (wrap1,wrap2) ->\r\n  hx = Math.abs(wrap1.mapx - wrap2.mapx)\r\n  hy = Math.abs(wrap1.mapy - wrap2.mapy)\r\n  #hr = Math.floor(hx / 2)\r\n  hr = Math.ceil(hx / 2)\r\n  direction = wrap1.node.calcDirectionTo(wrap2)\r\n  hd = nz.Graph.directionCost(wrap1.direction,direction)\r\n  if hy == hr\r\n    hy = 0\r\n  else if hy < hr\r\n    if hy != 0\r\n      hy = 1\r\n      if hd == 1\r\n        hd = 0\r\n  else\r\n    hy -= hr\r\n  #console.log \"#{wrap1.mapx} #{wrap1.mapy} #{wrap2.mapx} #{wrap2.mapy} #{hx} #{hy} #{hd} #{direction}\"\r\n  hx + hy + hd\r\n\r\n###* 対象の方向\r\n* @param {Object} c1 元\r\n* @param {Object} c2 対象\r\n###\r\nnz.Graph.direction = (c1,c2) ->\r\n  dis = nz.Graph.distance c1,c2\r\n  r   = Math.floor(dis / 2)\r\n  dir = 0\r\n  if (c2.mapx - r) <= c1.mapx and c1.mapx <= (c2.mapx + r)\r\n    dir = 0 if c1.mapy > c2.mapy\r\n    dir = 3 if c1.mapy < c2.mapy\r\n  else if c1.mapx > c2.mapx # 左側\r\n    if c1.mapy == c2.mapy\r\n      dir = if c1.mapx % 2 == 0 then 5 else 4\r\n    else if c1.mapy > c2.mapy\r\n      dir = 5\r\n    else if c1.mapy < c2.mapy\r\n      dir = 4\r\n  else if c1.mapx < c2.mapx # 右側\r\n    if c1.mapy == c2.mapy\r\n      dir = if c1.mapx % 2 == 0 then 1 else 2\r\n    else if c1.mapy > c2.mapy\r\n      dir = 1\r\n    else if c1.mapy < c2.mapy\r\n      dir = 2\r\n  return dir\r\n\r\n###* 距離\r\n* @param {Object} c1 元\r\n* @param {Object} c2 対象\r\n###\r\nnz.Graph.distance = (c1,c2) ->\r\n  hx = Math.abs(c1.mapx - c2.mapx)\r\n  hy = Math.abs(c1.mapy - c2.mapy)\r\n  hr = Math.ceil(hx / 2)\r\n  return hx if hy < hr\r\n  if hx % 2 == 1\r\n    if c1.mapx % 2 == 1\r\n      if c1.mapy <= c2.mapy\r\n        hy += 1\r\n    else\r\n      if c1.mapy >= c2.mapy\r\n        hy += 1\r\n  return hx + hy - hr\r\n\r\n###* 方向転換にかかるコストを計算\r\n* @param {number} direction1 方向1\r\n* @param {number} direction2 方向2\r\n###\r\nnz.Graph.directionCost = (direction1,direction2) ->\r\n  Math.abs(3 - Math.abs((direction2 - direction1 - 3) % 6))\r\n\r\n# mapx = _FRONT_POS[mapx % 2][direction][0]\r\n# mapy = _FRONT_POS[mapx % 2][direction][1]\r\n_FRONT_POS = [\r\n  [[ 0,-1],[ 1, 0],[ 1, 1],[ 0, 1],[-1, 1],[-1, 0]]\r\n  [[ 0,-1],[ 1,-1],[ 1, 0],[ 0, 1],[-1, 0],[-1,-1]]\r\n]\r\n\r\n###* 向いている目の前の座標を取得する\r\n* @param {Object} p           パラメータ\r\n* @param {number} p.mapx      X座標\r\n* @param {number} p.mapy      Y座標\r\n* @param {number} p.direction 方向\r\n* @return {Object} 目の前の座標\r\n###\r\nnz.Graph.frontPosition = (p) ->\r\n  d = (p.direction + 6) % 6\r\n  t = p.mapx % 2\r\n  return {\r\n    mapx:      p.mapx + _FRONT_POS[t][d][0]\r\n    mapy:      p.mapy + _FRONT_POS[t][d][1]\r\n    direction: d\r\n  }\r\n\r\n###* 向いている方向に対する後ろの座標を取得する\r\n* @param {Object} p           パラメータ\r\n* @param {number} p.mapx      X座標\r\n* @param {number} p.mapy      Y座標\r\n* @param {number} p.direction 方向\r\n* @return {Object} 後ろの座標\r\n###\r\nnz.Graph.backPosition = (p) ->\r\n  r = nz.Graph.frontPosition {\r\n    mapx: p.mapx\r\n    mapy: p.mapy\r\n    direction: p.direction + 3\r\n  }\r\n  r.direction = p.direction\r\n  return r\r\n\r\n###* ヘックス状のライン座標を取得する\r\n* @param {Object} p           パラメータ\r\n* @param {number} p.mapx      X座標\r\n* @param {number} p.mapy      Y座標\r\n* @param {number} p.direction 方向\r\n* @param {number} p.distance  距離\r\n* @return {Array<Object>} 座標配列\r\n###\r\nnz.Graph.hexLine = (p) ->\r\n  for n in [0 ... p.distance]\r\n    p = @frontPosition(p)\r\n\r\n###* 方向に対する座標エリアを取得する。\r\n* 時計まわりに３０度のエリアを探す。\r\n* @param {Object} p           パラメータ\r\n* @param {number} p.mapx      X座標\r\n* @param {number} p.mapy      Y座標\r\n* @param {number} p.direction 方向\r\n* @param {number} p.distance  距離\r\n* @return {Array<Object>} 座標配列\r\n###\r\nnz.Graph.frontArea = (p) ->\r\n  r = []\r\n  for a,i in @hexLine(p)\r\n    r.push a\r\n    a.direction += 2\r\n    a.distance = i + 1\r\n    Array.prototype.push.apply r, @hexLine(a)\r\n  return r\r\n","###*\r\n* @file GridNode.coffee\r\n* A*用ノードクラス\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nclass nz.GridNodeWrap\r\n  constructor: (node, direction=-1) ->\r\n    @node      = node\r\n    @direction = direction\r\n    @back      = false\r\n\r\n  clean: -> @node.clean()\r\n\r\n  ###*\r\n  * 自分のノードに、指定されたノードから移動する（入る）場合のコスト\r\n  * @param wrap {nz.GridNodeWrap} 移動元ノード\r\n  ###\r\n  getCost: (wrap) ->\r\n    cost = @node.weight\r\n    if @mapx is wrap.mapx and @mapy is wrap.mapy\r\n      # 方向転換のコスト（１づつ方向転換するからコストは1）\r\n      cost = 1\r\n    else if nz.Graph.direction(@,wrap) is wrap.direction\r\n      cost += 1\r\n      @back = true\r\n    return cost\r\n\r\n  isWall: -> @node.isWall()\r\n\r\nObject.defineProperty nz.GridNodeWrap.prototype,'mapx',\r\n  get: -> @node.mapx\r\n  enumerable: true\r\nObject.defineProperty nz.GridNodeWrap.prototype,'mapy',\r\n  get: -> @node.mapy\r\n  enumerable: true\r\n\r\nclass nz.GridNode\r\n\r\n  ###*\r\n  * @param {Object} chipdata\r\n  * @param {number} chipdata.weight\r\n  * @param {number} chipdata.frame\r\n  * @param {string} chipdata.name\r\n  ###\r\n  constructor: (mapx, mapy, chipdata={weight:0}) ->\r\n    @mapx = mapx\r\n    @mapy = mapy\r\n    {\r\n      @weight\r\n      @frame\r\n      @name\r\n      @object\r\n    } = chipdata\r\n    @clean()\r\n\r\n  clean: ->\r\n    return\r\n\r\n  toString: -> \"[#{@mapx},#{@mapy}]\"\r\n\r\n  ###*\r\n  * 指定されたノードが、自分から見てどの方向にあるか\r\n  * @param node {GridNode|GridNodeWrap} 調査対象ノード\r\n  ###\r\n  calcDirection:   (node) -> nz.Graph.direction(@,node)\r\n  calcDirectionTo: (node) -> nz.Graph.direction(@,node)\r\n  calcDirectionBy: (node) -> nz.Graph.direction(node,@)\r\n\r\n  ###*\r\n  * 壁判定\r\n  ###\r\n  isWall: -> @weight is 0 or @options?.isWall\r\n","###*\r\n* @file Character.coffee\r\n* キャラクター情報\r\n###\r\n\r\n###* nineteen namespace.\r\n* @namespace nz\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nDIRECTIONS = nz.system.character.directions\r\nACTION_COST = nz.system.character.action_cost\r\n\r\nclass nz.Character\r\n\r\n  ###* 初期化\r\n  * @classdesc キャラクタークラス\r\n  * @constructor nz.Character\r\n  ###\r\n  constructor: (param = {}) ->\r\n    # 色変えする場合\r\n    nz.utils.marge @, {\r\n      name: 'テストキャラクター'\r\n      spriteSheet: 'character_test'\r\n      team: 'teamA'\r\n      colorChanges: [\r\n        # {from:[255,255,255],to:[255,0,0]}\r\n      ]\r\n      ai:\r\n        name: 'Default'\r\n        # src: 'nz/ai/Default.js'\r\n      maxhp: 10\r\n      maxsp: 100\r\n      maxap: 6\r\n      hp: 10\r\n      sp: 100\r\n      mapx: -1\r\n      mapy: -1\r\n      direction: 0\r\n      move:\r\n        speed: 300\r\n      armor:\r\n        defense: 1\r\n      weapon:\r\n        damage: 4\r\n        height: 48\r\n        width: 12\r\n        range:\r\n          start: 0\r\n          end: 120\r\n          anticlockwise: false\r\n        speed: 600\r\n      shot:\r\n        damage: 2\r\n        range:\r\n          start: 0\r\n          end: -120\r\n          anticlockwise: true\r\n        distance: 32 * 8\r\n        speed: 100\r\n    }\r\n    nz.utils.marge @, param\r\n    if @teamColor\r\n      @colorChanges.push {\r\n        from: [255,255,255]\r\n        to: @teamColor\r\n      }\r\n    @commands = [] # 戦闘コマンドリスト\r\n    return\r\n\r\n  _command: (i) ->\r\n    i = @commands.length - 1 unless i?\r\n    unless @commands[i]?\r\n      @commands[i] = {}\r\n      @clearCommand i\r\n    @commands[i]\r\n\r\n  ###* AI用キャラクター情報\r\n  * @param {number} i 戦闘ターン数\r\n  * @return {nz.Character} AI用のキャラクターインスタンス\r\n  * @memberof nz.Character#\r\n  * @method createAiInfo\r\n  ###\r\n  createAiInfo: (i) ->\r\n    info = {\r\n      name:      @name\r\n      maxhp:     @maxhp\r\n      maxsp:     @maxsp\r\n      maxap:     @maxap\r\n      hp:        @hp\r\n      sp:        @sp\r\n      mapx:      @mapx\r\n      mapy:      @mapy\r\n      direction: @direction\r\n      team:      @team\r\n    }\r\n    info.move   = nz.utils.marge {}, @move\r\n    info.weapon = nz.utils.marge {}, @weapon\r\n    info.shot   = nz.utils.marge {}, @shot\r\n    info.ai     = nz.utils.marge {}, @ai\r\n    return new nz.Character(info)\r\n\r\n  ###* コマンド削除\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method clearCommand\r\n  ###\r\n  clearCommand: (i) ->\r\n    command = @_command i\r\n    command.attack = false\r\n    command.actions = []\r\n    command.cost = 0\r\n    return\r\n\r\n  ###* 移動コマンド削除\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method clearMoveCommand\r\n  ###\r\n  clearMoveCommand: (i) ->\r\n    command = @_command i\r\n    actions = []\r\n    for action in command.actions\r\n      if action.move? or action.rotate?\r\n        command.cost -= action.cost\r\n      else\r\n        actions.push action\r\n    command.actions = actions\r\n    return\r\n\r\n  ###* 攻撃コマンドを削除\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method clearAttackCommand\r\n  ###\r\n  clearAttackCommand: (i) ->\r\n    command = @_command i\r\n    unless command.attack\r\n      return @\r\n    command.cost -= ACTION_COST.attack\r\n    command.attack = false\r\n    return @\r\n\r\n  ###* 射撃コマンドを削除\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method clearShotCommand\r\n  ###\r\n  clearShotCommand: (i) ->\r\n    command = @_command i\r\n    actions = []\r\n    for action in command.actions\r\n      if action.shot?\r\n        command.cost -= action.cost\r\n      else\r\n        actions.push action\r\n    command.actions = actions\r\n    return\r\n\r\n  ###* アクションコストを取得\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method getActionCost\r\n  ###\r\n  getActionCost: (i) -> @_command(i).cost\r\n\r\n  ###* 残りのアクションポイントを取得\r\n  * @param {number} i 戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method getRemnantAp\r\n  ###\r\n  getRemnantAp: (i) -> @maxap - @getActionCost(i)\r\n\r\n  getLastDirection: (i) ->\r\n    command = @_command i\r\n    direction = @direction\r\n    for a in command.actions when a.rotate?\r\n      direction = a.rotate.direction\r\n    return direction\r\n\r\n  getLastPosition: (i) ->\r\n    command = @_command i\r\n    pos =\r\n      mapx: @mapx\r\n      mapy: @mapy\r\n    for a in command.actions when a.move?\r\n      pos = a.move\r\n    return pos\r\n\r\n  ###* 移動コマンドを追加\r\n  * @param {number} i 戦闘ターン数\r\n  * @param {Array} route 移動ルート\r\n  * @memberof nz.Character#\r\n  * @method addMoveCommand\r\n  ###\r\n  addMoveCommand: (i,route) ->\r\n    command   = @_command i\r\n    direction = @getLastDirection(i)\r\n    prev = command.cost\r\n    cost = 0\r\n    for r in route when prev + cost <= @maxap\r\n      if direction != r.direction\r\n        @addRotateCommand i, direction, DIRECTIONS[direction].rotateIndex[r.direction]\r\n        direction = r.direction\r\n      else\r\n        r.speed = @move.speed\r\n        if r.back\r\n          r.speed *= 2\r\n        command.actions.push\r\n          move: r\r\n          cost: r.cost - cost\r\n      cost = r.cost\r\n    command.cost = prev + cost\r\n    return @\r\n\r\n  ###* 方向転換コマンドを追加\r\n  * @param {number} i 戦闘ターン数\r\n  * @param {number} direction1 元の向き\r\n  * @param {number} rotateIndex 方向転換する量(マイナスは反時計回り)\r\n  * @memberof nz.Character#\r\n  * @method addRotateCommand\r\n  ###\r\n  addRotateCommand:  (i,direction1,rotateIndex) ->\r\n    command = @_command i\r\n    for i in [0 .. rotateIndex] when i != 0\r\n      command.actions.push\r\n        rotate:\r\n          direction: (direction1 + i + 6) % 6\r\n          speed: @move.speed\r\n        cost: ACTION_COST.rotate\r\n      command.cost += ACTION_COST.rotate\r\n    return @\r\n\r\n  ###* 攻撃コマンドを設定\r\n  * @param {number}  i    戦闘ターン数\r\n  * @memberof nz.Character#\r\n  * @method setAttackCommand\r\n  ###\r\n  setAttackCommand: (i) ->\r\n    if @isShotCommand i\r\n      return @\r\n    command = @_command i\r\n    if command.attack\r\n      return @\r\n    if @maxap >= ACTION_COST.attack\r\n      command.cost += ACTION_COST.attack\r\n      command.attack = true\r\n    return @\r\n\r\n  ###* 射撃コマンドを追加\r\n  * @param {number} i        戦闘ターン数\r\n  * @param {number} rotation 射撃角度\r\n  * @memberof nz.Character#\r\n  * @method addShotCommand\r\n  ###\r\n  addShotCommand: (i,rotation) ->\r\n    if @isAttackCommand i\r\n      return @\r\n    command = @_command i\r\n    command.actions.push\r\n      shot:\r\n        rotation: rotation\r\n        distance: @shot.distance\r\n        speed: @shot.speed\r\n      cost: ACTION_COST.shot\r\n    command.cost += ACTION_COST.shot\r\n    return @\r\n\r\n  ###* 射撃コマンドが設定されているかどうか\r\n  * @param {number} i 戦闘ターン数\r\n  * @return {boolean} 射撃コマンドを設定していたら true\r\n  * @memberof nz.Character#\r\n  * @method isShotCommand\r\n  ###\r\n  isShotCommand: (i) -> @_command(i).actions.some (action) -> action.shot?\r\n\r\n  ###* 攻撃コマンドが設定されているかどうか\r\n  * @param {number} i 戦闘ターン数\r\n  * @return {boolean} 攻撃コマンドを設定していたら true\r\n  * @memberof nz.Character#\r\n  * @method isAttackCommand\r\n  ###\r\n  isAttackCommand: (i) -> @_command(i).attack\r\n\r\n  ###* 移動コマンドが設定されているかどうか\r\n  * @param {number} i 戦闘ターン数\r\n  * @return {boolean} 移動コマンドを設定していたら true\r\n  * @memberof nz.Character#\r\n  * @method isMoveCommand\r\n  ###\r\n  isMoveCommand: (i) -> @_command(i).actions.some (action) -> action.move?\r\n\r\n  ###* 死亡判定\r\n  * @return {boolean} 死んでいる場合 true\r\n  * @memberof nz.Character#\r\n  * @method isDead\r\n  ###\r\n  isDead: -> @hp <= 0\r\n\r\n  ###* 生存判定\r\n  * @return {boolean} 生きている場合 true\r\n  * @memberof nz.Character#\r\n  * @method isAlive\r\n  ###\r\n  isAlive: -> @hp > 0\r\n","###*\r\n* @file BattleCounter.coffee\r\n* 戦闘用のカウンター\r\n###\r\n\r\n###* nineteen namespace.\r\n* @namespace nz\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nclass nz.BattleCounter\r\n\r\n  ###* 初期化\r\n  * @classdesc 戦闘用のカウンター\r\n  * @constructor nz.BattleCounter\r\n  ###\r\n  constructor: (param = {}) ->\r\n    @clear()\r\n    return\r\n\r\n  clear: ->\r\n    @ballet =\r\n      atk:\r\n        hit: 0\r\n        miss: 0\r\n        damage:\r\n          max: 0\r\n          total: 0\r\n      def:\r\n        hit: 0\r\n        damage:\r\n          max: 0\r\n          total: 0\r\n    @weapon =\r\n      atk:\r\n        hit: 0\r\n        miss: 0\r\n        damage:\r\n          max: 0\r\n          total: 0\r\n      def:\r\n        hit: 0\r\n        damage:\r\n          max: 0\r\n          total: 0\r\n    return\r\n\r\n  missBallet: ->\r\n    @ballet.atk.miss += 1\r\n    return\r\n  hitBallet: (d) ->\r\n    @ballet.atk.hit += 1\r\n    @ballet.atk.damage.max = Math.max @ballet.atk.damage.max, d\r\n    @ballet.atk.damage.total += d\r\n    return\r\n  receiveBallet: (d) ->\r\n    @ballet.def.hit += 1\r\n    @ballet.def.damage.max = Math.max @ballet.def.damage.max, d\r\n    @ballet.def.damage.total += d\r\n    return\r\n\r\n  missWeapon: ->\r\n    @weapon.atk.miss += 1\r\n    return\r\n  hitWeapon: (d) ->\r\n    @weapon.atk.hit += 1\r\n    @weapon.atk.damage.max = Math.max @weapon.atk.damage.max, d\r\n    @weapon.atk.damage.total += d\r\n    return\r\n  receiveWeapon: (d) ->\r\n    @weapon.def.hit += 1\r\n    @weapon.def.damage.max = Math.max @weapon.def.damage.max, d\r\n    @weapon.def.damage.total += d\r\n    return\r\n","###*\r\n* @file SpriteBattleMap.coffee\r\n* 戦闘マップスプライト\r\n###\r\n\r\nMAP_CHIP_W = nz.system.map.chip.width\r\nMAP_CHIP_H = nz.system.map.chip.height\r\n\r\ntm.define 'nz.SpriteBattleMap',\r\n  superClass: tm.display.CanvasElement\r\n\r\n  ###* 初期化\r\n  * @classdesc 戦闘マップスプライト\r\n  * @constructor nz.SpriteBattleMap\r\n  ###\r\n  init: (mapName) ->\r\n    @superInit()\r\n    @_chips  = []\r\n    @_blinks = []\r\n    @_activeBlinks = []\r\n    @characterSprites = []\r\n\r\n    @map = tm.asset.Manager.get(mapName).data\r\n\r\n    @graph = new nz.Graph\r\n      mapdata: @map\r\n      chipdata: tm.asset.Manager.get('chipdata').data\r\n\r\n    @width  = @map.width  * MAP_CHIP_W\r\n    @height = @map.height * MAP_CHIP_H\r\n    for mapx in [0...@map.width]\r\n      h = if mapx % 2 != 0 then @map.height else @map.height - 1\r\n      for mapy in [0...h]\r\n        @_initMapChip(mapx,mapy)\r\n\r\n    @cursor = @_createCursor().addChildTo(@)\r\n    @setCursorPosition @getMapChip(0,0)\r\n\r\n    @on 'startBattlePhase', (e) ->\r\n      @cursor.visible = false\r\n      return\r\n    @on 'endBattlePhase', (e) ->\r\n      @cursor.visible = true\r\n      return\r\n\r\n    @on 'input_up'     , @cursorUp\r\n    @on 'input_down'   , @cursorDown\r\n    @on 'input_left'   , @cursorLeft\r\n    @on 'input_right'  , @cursorRight\r\n    @on 'repeat_up'    , @cursorUp\r\n    @on 'repeat_down'  , @cursorDown\r\n    @on 'repeat_left'  , @cursorLeft\r\n    @on 'repeat_right' , @cursorRight\r\n\r\n    return\r\n\r\n  setCursorPosition: (param) ->\r\n    return unless param?\r\n    @cursor.mapx = param.mapx if param.mapx?\r\n    @cursor.mapy = param.mapy if param.mapy?\r\n    @cursor.x = param.x\r\n    @cursor.y = param.y\r\n    return\r\n\r\n  cursorUp: ->\r\n    {mapx,mapy} = @cursor\r\n    @setCursorPosition @getMapChip(mapx,mapy - 1)\r\n    return\r\n  cursorDown: ->\r\n    {mapx,mapy} = @cursor\r\n    @setCursorPosition @getMapChip(mapx,mapy + 1)\r\n    return\r\n  cursorLeft: ->\r\n    {mapx,mapy} = @cursor\r\n    chip = @getMapChip(mapx - 1,mapy)\r\n    unless chip?\r\n      chip = @getMapChip(mapx - 1,mapy - 1)\r\n    @setCursorPosition chip\r\n    return\r\n  cursorRight: ->\r\n    {mapx,mapy} = @cursor\r\n    chip = @getMapChip(mapx + 1,mapy)\r\n    unless chip?\r\n      chip = @getMapChip(mapx + 1,mapy - 1)\r\n    @setCursorPosition chip\r\n    return\r\n\r\n  # 指定された座標のキャラクターを探す\r\n  findCharacter: (mapx,mapy) ->\r\n    res = []\r\n    for character in @characterSprites\r\n      if character.mapx == mapx and character.mapy == mapy\r\n        res.push character\r\n    return res\r\n  findCharacterGhost: (mapx,mapy) ->\r\n    res = []\r\n    for character in @characterSprites\r\n      if character.ghost?.mapx == mapx and character.ghost?.mapy == mapy\r\n        res.push character.ghost\r\n    return res\r\n\r\n  _createCursor: ->\r\n    cursor = tm.display.Shape(\r\n      x:           0\r\n      y:           0\r\n      width:       MAP_CHIP_W\r\n      height:      MAP_CHIP_H\r\n      strokeStyle: 'red'\r\n      lineWidth:   3\r\n      visible:     true\r\n    )\r\n    cursor._render = -> @canvas.strokeRect(0, 0, @width, @height)\r\n    cursor.render()\r\n    return cursor\r\n\r\n  # MapChip用イベントハンドラ\r\n  _dispatchMapChipEvent: (_e) ->\r\n    e = tm.event.Event('map.' + _e.type)\r\n    e.app = _e.app\r\n    e.pointing = _e.pointing\r\n    e.mapx = @mapx\r\n    e.mapy = @mapy\r\n    e.app.currentScene.dispatchEvent e\r\n    return\r\n\r\n  # 座標位置のマップチップを作成\r\n  _initMapChip: (mapx,mapy) ->\r\n    w = MAP_CHIP_W\r\n    h = MAP_CHIP_H\r\n    {\r\n      x\r\n      y\r\n    } = nz.utils.mapxy2screenxy(mapx,mapy)\r\n\r\n    # マップデータから座標位置のマップチップを取得する\r\n    node = @graph.grid[mapx][mapy]\r\n    frameIndex = node.frame\r\n\r\n    # TODO: マップごとに画像を変更したい\r\n    chip = tm.display.Sprite('map_chip',w,h)\r\n      .addChildTo(@)\r\n      .setPosition(x,y)\r\n      .setFrameIndex(frameIndex)\r\n      .setInteractive(true)\r\n      .setBoundingType('rect')\r\n      .on 'pointingstart', @_dispatchMapChipEvent\r\n      .on 'pointingover', @_dispatchMapChipEvent\r\n      .on 'pointingout', @_dispatchMapChipEvent\r\n      .on 'pointingend', @_dispatchMapChipEvent\r\n    chip.mapx = mapx\r\n    chip.mapy = mapy\r\n\r\n    chip.on 'pointingover', @setCursorPosition.bind @, chip\r\n\r\n    tm.display.Label(\"#{mapx},#{mapy}\",{fontSize:8}).setPosition(0,h/2-8).addChildTo(chip)\r\n\r\n    if node.object?\r\n      tm.display.Sprite('map_object',w,h*2)\r\n        .setOrigin(0.5,0.75)\r\n        .addChildTo(chip)\r\n        .setFrameIndex(node.object.frame)\r\n\r\n    blink = tm.display.RectangleShape(\r\n      width: w\r\n      height: h\r\n      strokeStyle: 'white'\r\n      fillStyle: 'white'\r\n    ).addChildTo(@)\r\n      .setPosition(x,y)\r\n      .setInteractive(true)\r\n      .setAlpha(0.0)\r\n      .setVisible(false)\r\n\r\n    @_chips[mapx] = [] unless @_chips[mapx]?\r\n    @_chips[mapx][mapy] = chip\r\n    @_blinks[mapx] = [] unless @_blinks[mapx]?\r\n    @_blinks[mapx][mapy] = blink\r\n    return\r\n\r\n  blink: (mapx,mapy) ->\r\n    blink = @_blinks[mapx]?[mapy]\r\n    if blink?\r\n      blink.visible = true\r\n      blink.tweener.clear().fade(0.5,300).fade(0.1,300).setLoop(true)\r\n      @_activeBlinks.push blink\r\n    return\r\n\r\n  clearBlink: ->\r\n    for blink in @_activeBlinks\r\n      blink.visible = false\r\n      blink.setAlpha(0.0)\r\n      blink.tweener.clear()\r\n    @_activeBlinks.clear()\r\n    return\r\n\r\n  isBlink: (mapx,mapy) -> @_blinks[mapx]?[mapy]?.visible\r\n\r\n  getMapChip: (mapx,mapy) -> @_chips[mapx]?[mapy]\r\n","###*\r\n* @file SpriteCharacter.coffee\r\n* キャラクタースプライト\r\n###\r\n\r\nMAP_CHIP_W = nz.system.map.chip.width\r\nMAP_CHIP_H = nz.system.map.chip.height\r\nDIRECTIONS = nz.system.character.directions\r\nST_COST    = nz.system.character.stamina_cost\r\n\r\ntm.define 'nz.SpriteCharacter',\r\n  superClass: tm.display.AnimationSprite\r\n\r\n  ###* 初期化\r\n  * @classdesc キャラクタースプライトクラス\r\n  * @constructor nz.SpriteCharacter\r\n  * @param {nz.Character} character\r\n  ###\r\n  init: (@index,@character) ->\r\n    @superInit(@character.spriteSheet)\r\n\r\n    if @character.colorChanges?\r\n      @ss = tm.asset.SpriteSheet(@ss) # 複製…ちょっと無理やり感\r\n      w   = @ss.image.width\r\n      h   = @ss.image.height\r\n      bmp = @ss.image.getBitmap(0,0,w,h)\r\n      for c in @character.colorChanges\r\n        f = @_createColorFilter c.from, c.to\r\n        bmp.filter f if f?\r\n      @ss.image = tm.graphics.Canvas().resize(w,h).drawBitmap(bmp,0,0)\r\n\r\n    @checkHierarchy = true\r\n    @ghost = null\r\n    @counter = new nz.BattleCounter()\r\n\r\n    @body = tm.display.Shape(\r\n      width:  @width\r\n      height: @height\r\n    ).addChildTo @\r\n\r\n    @weapon = @createWeapon()\r\n    @weapon.on 'enterframe', @_enterframeWeapon.bind @\r\n\r\n    @setMapPosition @character.mapx, @character.mapy\r\n    @setDirection @character.direction\r\n\r\n    @on 'startBattleScene', ->\r\n      @counter.clear()\r\n      return\r\n    @on 'endBattleScene', ->\r\n      console.log @counter\r\n      return\r\n    @on 'startBattlePhase', ->\r\n      @clearGhost()\r\n      return\r\n    @on 'endBattlePhase', ->\r\n      return\r\n    @on 'startBattleTurn', (e) ->\r\n      @startAction(e.turn)\r\n      @_weaponHitFlag = []\r\n      return\r\n    @on 'endBattleTurn', (e) ->\r\n      @update = null\r\n      @attack = false\r\n      return\r\n    @on 'addBallet', (e) ->\r\n      e.ballet.collision.add(@) if @ != e.owner and @isAlive()\r\n      return\r\n    @on 'hitWeapon', (e) ->\r\n      @_hitWeapon(e.owner)\r\n      return\r\n    @on 'hitBallet', (e) ->\r\n      @_hitBallet(e.owner,e.ballet)\r\n      return\r\n    @on 'deadCharacter', (e) ->\r\n      {\r\n        character\r\n      } = e\r\n      # TODO:アニメーション\r\n      if e.character is @character\r\n        @hide()\r\n      return\r\n    return\r\n\r\n  isGhost: () -> (@alpha == 0.5) # 半透明かどうかで判断\r\n  hasGhost: () -> @ghost != null\r\n\r\n  _createColorFilter: (a,b) ->\r\n    if b.length is 3\r\n      return {\r\n        calc: (pixel, index, x, y, bitmap) ->\r\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2]\r\n            bitmap.setPixelIndex(index, b[0], b[1], b[2])\r\n      }\r\n    if a.length is 4 and b.length is 4\r\n      return {\r\n        calc: (pixel, index, x, y, bitmap) ->\r\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2] and pixel[3] is a[3]\r\n            bitmap.setPixel32Index(index, b[0], b[1], b[2], b[3])\r\n      }\r\n    return undefined\r\n\r\n  createWeapon: ->\r\n    w = tm.display.RectangleShape(\r\n      width: @character.weapon.height\r\n      height: @character.weapon.width\r\n      strokeStyle: 'black'\r\n      fillStyle: 'red'\r\n    ).addChildTo @body\r\n      .setOrigin(0.0,0.5)\r\n      .setVisible(false)\r\n    w.checkHierarchy = true\r\n    return w\r\n\r\n  createGhost: (param) ->\r\n    {\r\n      direction\r\n      mapx\r\n      mapy\r\n    } = param\r\n    @clearGhost()\r\n    @ghost = nz.SpriteCharacter(@index,@character)\r\n      .setAlpha 0.5\r\n      .setMapPosition(mapx, mapy)\r\n      .setDirection(direction)\r\n    return @ghost\r\n\r\n  clearGhost: ->\r\n    if @ghost?\r\n      @ghost.remove()\r\n      @ghost = null\r\n    return\r\n\r\n  setMapPosition: (@mapx,@mapy) ->\r\n    {@x,@y} = nz.utils.mapxy2screenxy(@)\r\n    return @\r\n\r\n  setDirection: (@direction) ->\r\n    d = DIRECTIONS[@direction]\r\n    @body.rotation = d.rotation\r\n    @gotoAndPlay(d.name)\r\n    return @\r\n\r\n  updateBattle: ->\r\n    scene = @getRoot()\r\n    for enemy,i in scene.characterSprites when @index != i and enemy.isAlive()\r\n      @_updateAttack(enemy)\r\n    return\r\n\r\n  ###* 座標方向確認。\r\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\r\n  * @param {number} param.x          mapSprite の local X座標\r\n  * @param {number} param.y          mapSprite の local Y座標\r\n  * @param {number} param.start      確認する開始角度 -180 ～ 180\r\n  * @param {number} param.end        確認する終了角度 -180 ～ 180\r\n  * @param {Function} param.callback チェック結果をもらう関数\r\n  ###\r\n  checkDirection: (param) ->\r\n    {\r\n      r\r\n      start\r\n      end\r\n      anticlockwise\r\n      callback\r\n    } = param\r\n    r = nz.utils.relativeRotation(@body.rotation,@,param) unless r?\r\n    r1 = if anticlockwise then end   else start\r\n    r2 = if anticlockwise then start else end\r\n    res = false\r\n    if r1 < r2\r\n      res = r1 <= r and r <= r2\r\n    else\r\n      res = r1 <= r or  r <= r2\r\n    if callback?\r\n      ra = r\r\n      unless res\r\n        ra = r1 if r1 > r\r\n        ra = r2 if r  > r2\r\n      callback(res,ra)\r\n    return res\r\n\r\n  _checkAttackDirection: (p) ->\r\n    p.x -= @width  / 2\r\n    p.y -= @height / 2\r\n    return true if @checkDirection(p)\r\n    p.x += @width\r\n    return true if @checkDirection(p)\r\n    p.y += @height\r\n    return true if @checkDirection(p)\r\n    p.x -= @width\r\n    return true if @checkDirection(p)\r\n    return false\r\n\r\n  _updateAttack: (enemy) ->\r\n    return unless @attack\r\n    return if @character.team == enemy.character.team\r\n    cw = @character.weapon\r\n    distance = enemy.position.distance @position\r\n    if distance < (cw.height + @body.width / 2)\r\n      p = enemy.position.clone().$extend cw.range\r\n      if @_checkAttackDirection(p)\r\n        @_attackAnimation()\r\n        @attack = false\r\n    return\r\n\r\n  _enterframeWeapon: (e) ->\r\n    return unless @weapon.visible\r\n    scene = @getRoot()\r\n    for enemy,i in scene.characterSprites when @index != i and not @_weaponHitFlag[i]\r\n      if @_isHitWeapon(enemy)\r\n        enemy.flare 'hitWeapon', {owner: @}\r\n        @_weaponHitFlag[i] = true\r\n    return\r\n\r\n  _isHitWeapon: (enemy) ->\r\n    for w in [16 ... @weapon.width] by 8\r\n      rt = tm.geom.Vector2 0,0\r\n      rt.setDegree(@weapon.rotation + @body.rotation, w)\r\n      rt = @localToGlobal rt\r\n      if enemy.isHitPoint(rt.x,rt.y)\r\n        return true\r\n    return false\r\n\r\n  startAction: (turn) ->\r\n    @tweener.clear()\r\n    @move      = false\r\n    @attack    = false\r\n    @action    = true\r\n    @mapx      = @character.mapx\r\n    @mapy      = @character.mapy\r\n    @direction = @character.direction\r\n\r\n    command = @character.commands[turn]\r\n    if command?\r\n      @attack = command.attack\r\n      for action in command.actions\r\n        @_setShotAction(action.shot) if action.shot?\r\n        @_setMoveAction(action.move) if action.move?\r\n        @_setRotateAction(action.rotate) if action.rotate?\r\n        if @attack\r\n          @tweener.call @updateBattle,@,[]\r\n      @tweener.call @_endAction,@,[]\r\n    else\r\n      @_endAction()\r\n    return\r\n\r\n  applyPosition: ->\r\n    @character.mapx      = @mapx\r\n    @character.mapy      = @mapy\r\n    @character.direction = @direction\r\n    return\r\n\r\n  _endAction: ->\r\n    @applyPosition()\r\n    @move                = false\r\n    @action              = false\r\n    # まだ攻撃してない場合、攻撃をつづける\r\n    if @attack\r\n      @updateBattle()\r\n      @update = @updateBattle\r\n    @tweener.clear()\r\n    return\r\n\r\n  isMove: -> @move\r\n  isStop: -> not @move\r\n  isDead: -> @character.isDead()\r\n  isAlive: -> @character.isAlive()\r\n\r\n  _setShotAction: (param) ->\r\n    @tweener.call @_shotAnimation,@,[param]\r\n    @tweener.call @_fatigue,@,[ST_COST.shot]\r\n    return\r\n\r\n  _setMoveAction: (param) ->\r\n    @move = true\r\n    {\r\n      @mapx\r\n      @mapy\r\n      speed\r\n    } = param\r\n    {\r\n      x\r\n      y\r\n    } = nz.utils.mapxy2screenxy(@)\r\n    @tweener.move(x,y,speed)\r\n    @tweener.call @_fatigue,@,[ST_COST.move]\r\n    return\r\n\r\n  _setRotateAction: (param) ->\r\n    {\r\n      direction\r\n      speed\r\n    } = param\r\n    @tweener.wait speed\r\n    @tweener.call @setDirection,@,[direction]\r\n    @tweener.call @_fatigue,@,[ST_COST.rotate]\r\n\r\n  _attackAnimation: ->\r\n    # 攻撃アニメーション中は、アクションを続ける\r\n    action = @action\r\n    @action = true\r\n    finish = ->\r\n      @weapon.visible  = false\r\n      @weapon.rotation = 0\r\n      @tweener.play()\r\n      @action = action # 元の状態に\r\n      @_fatigue(ST_COST.attack)\r\n    @tweener.pause()\r\n    cw = @character.weapon\r\n    @weapon.visible = true\r\n    @weapon.rotation = cw.range.start\r\n    @weapon.tweener\r\n        .clear()\r\n        .wait 50\r\n        .rotate(cw.range.end,cw.speed)\r\n        .call finish,@,[]\r\n\r\n  _shotAnimation: (param) ->\r\n    {\r\n      rotation\r\n      distance\r\n      speed\r\n    } = param\r\n    scene = @getRoot()\r\n    bv = scene.mapSprite.globalToLocal @localToGlobal(@body.position)\r\n    ballet = tm.display.CircleShape(\r\n      x:      bv.x\r\n      y:      bv.y\r\n      width:  10\r\n      height: 10\r\n    ).addChildTo scene.mapSprite\r\n    angle = Math.degToRad(rotation)\r\n    vx = distance * Math.cos(angle) + bv.x\r\n    vy = distance * Math.sin(angle) + bv.y\r\n    speed = speed * distance / 32\r\n    info = {\r\n      ballet: ballet\r\n      owner: @\r\n    }\r\n    ｈ = scene.eventHandler\r\n    finish = ->\r\n      ballet.remove()\r\n      ｈ.removeBallet(info)\r\n    ballet.tweener\r\n      .move(vx,vy,speed)\r\n      .call finish, @, []\r\n    ballet.on 'collisionenter', (e) ->\r\n      e.other.flare 'hitBallet', info\r\n      ballet.tweener\r\n        .clear()\r\n        .call finish, @, []\r\n\r\n    ｈ.addBallet(info)\r\n    return\r\n\r\n  _deadAnimation: (param) ->\r\n    return\r\n\r\n  _hitBallet: (shooter,ballet) ->\r\n    d = shooter.character.shot.damage - @character.armor.defense\r\n    @_damage(d)\r\n    shooter.counter.hitBallet(d)\r\n    @counter.receiveBallet(d)\r\n    return\r\n\r\n  _hitWeapon: (attacker) ->\r\n    d = attacker.character.weapon.damage - @character.armor.defense\r\n    @_damage(d)\r\n    attacker.counter.hitWeapon(d)\r\n    @counter.receiveWeapon(d)\r\n    return\r\n\r\n  _damage: (n)->\r\n    return if n <= 0\r\n    @character.hp -= n\r\n    h = @getRoot().eventHandler\r\n    if @character.isDead()\r\n      h.deadCharacter(@character)\r\n    h.refreshStatus()\r\n    return\r\n\r\n  _fatigue: (n) ->\r\n    return if n <= 0\r\n    @character.sp -= n\r\n    @getRoot().eventHandler.refreshStatus()\r\n    return\r\n","###*\r\n* @file SpriteStatus.coffee\r\n* ステータス表示用スプライト\r\n###\r\n\r\nDIRECTIONS = nz.system.character.directions\r\n\r\ntm.define 'nz.SpriteStatus',\r\n  superClass: tm.display.CanvasElement\r\n\r\n  init: (param) ->\r\n    {\r\n      @index\r\n      @character\r\n      @characterSprite\r\n      @detail\r\n    } = param\r\n    @superInit()\r\n    @setOrigin(0.0,0.0)\r\n\r\n    @width          = 32 * 5\r\n    @height         = 32 * 2.5\r\n    @alpha          = 1.0\r\n    @boundingType   = 'rect'\r\n    @interactive    = true\r\n    @checkHierarchy = true\r\n    @bgColor        = 'blanchedalmond'\r\n\r\n    form =\r\n      children:\r\n        bg:\r\n          type:          'RoundRectangleShape'\r\n          width:         @width\r\n          height:        @height\r\n          strokeStyle:   'black'\r\n          fillStyle:     @bgColor\r\n          lineWidth:     1\r\n          shadowBlur:    1\r\n          shadowOffsetX: 2\r\n          shadowOffsetY: 2\r\n          shadowColor:   'gray'\r\n          originX:       @originX\r\n          originY:       @originY\r\n        name: @_label\r\n          text:          @character.name\r\n          fontSize:      8\r\n          fillStyle:     'black'\r\n          stroke:        false\r\n          x:             8\r\n          y:             10\r\n        action: @_label\r\n          text:          ''\r\n          fontSize:      8\r\n          fillStyle:     'black'\r\n          stroke:        false\r\n          x:             8\r\n          y:             20\r\n        hpGauge: @_gauge\r\n          y:             38\r\n          color:         'Green'\r\n          _maxValue:     @character.maxhp\r\n        spGauge: @_gauge\r\n          y:             50\r\n          color:         'DarkSlateBlue'\r\n          _maxValue:     @character.maxsp\r\n        hpLabel: @_label\r\n          text:          'HP'\r\n          fontSize:      12\r\n          x:             10\r\n          y:             38 - 6\r\n        spLabel: @_label\r\n          text:          'SP'\r\n          fontSize:      12\r\n          x:             10\r\n          y:             50 - 6\r\n    #if @detail\r\n    #  form.children.apGauge =\r\n    #    type:          'tm.ui.GlossyGauge'\r\n    #    x:             8\r\n    #    y:             48\r\n    #    width:         @width - 16\r\n    #    height:        4\r\n    #    originX:       @originX\r\n    #    originY:       @originY\r\n    #    borderWidth:   1\r\n    #    color:         'red'\r\n    #    bgColor:       @bgColor\r\n    #    borderColor:   gaugebBrderColor\r\n    #    animationFlag: false\r\n    #    _maxValue:     @character.maxap\r\n    @fromJSON form\r\n\r\n    @sprite = tm.display.AnimationSprite(@characterSprite.ss).addChildTo @\r\n    @sprite.x = @width - 40\r\n    @sprite.y = 10\r\n    @sprite.setScale(0.5,0.5)\r\n    @sprite.setOrigin(0.0,0.0)\r\n\r\n    @on 'refreshStatus', @refreshStatus\r\n\r\n    @eventHandler = nz.EventHandlerBattle()\r\n    @on 'pointingend', -> @eventHandler.selectStatus(status:@)\r\n\r\n  _gauge: (param) ->\r\n    {\r\n      type:          'tm.ui.GlossyGauge'\r\n      x:             8\r\n      y:             0\r\n      width:         @width - 16\r\n      height:        6\r\n      originX:       @originX\r\n      originY:       @originY\r\n      borderWidth:   1\r\n      color:         'green'\r\n      bgColor:       @bgColor\r\n      borderColor:   'gray'\r\n      animationTime: 1000\r\n    }.$extend param\r\n\r\n  _label: (param) ->\r\n    {\r\n      type:          'Label'\r\n      fillStyle:     'white'\r\n      strokeStyle:   'black'\r\n      lineWidth:     2\r\n      stroke:        true\r\n      align:         'left'\r\n      baseline:      'top'\r\n      originX:       @originX\r\n      originY:       @originY\r\n      fontSize:      12\r\n      text:          'null'\r\n    }.$extend param\r\n\r\n  refreshStatus: (param) ->\r\n    {\r\n      turn\r\n    } = param\r\n\r\n    @sprite.gotoAndPlay DIRECTIONS[@characterSprite.direction].name\r\n\r\n    @_refreshActionText turn\r\n\r\n    @hpGauge.value = @character.hp\r\n    @spGauge.value = @character.sp\r\n    # @apGauge.value = ap if @detail\r\n\r\n  _refreshActionText: (turn) ->\r\n    text = 'Action: '\r\n    if @detail\r\n      ap = @character.getRemnantAp(turn)\r\n      actions = []\r\n      actions.push 'Attack' if @character.isAttackCommand(turn)\r\n      actions.push 'Shot'   if @character.isShotCommand(turn)\r\n      actions.push 'Move'   if @character.isMoveCommand(turn)\r\n      text += actions.join(' & ')\r\n      text += \" (AP=#{ap})\"\r\n    else\r\n      text += '???'\r\n    @action.text = text\r\n","###*\r\n* @file EventHandlerBattle.coffee\r\n* 戦闘用イベントハンドラ\r\n###\r\n\r\ntm.define 'nz.EventHandlerBattle',\r\n\r\n  ###* 初期化\r\n  * @classdesc 戦闘用イベントハンドラ\r\n  * @constructor nz.EventHandlerBattle\r\n  ###\r\n  init: ->\r\n\r\n  _fireAll: (e,param={}) ->\r\n    app   = nz.system.app\r\n    scene = app.currentScene\r\n    if typeof e is 'string'\r\n      e       = tm.event.Event(e)\r\n      e.app   = app\r\n      e.scene = scene\r\n      e.turn  = scene.turn\r\n      e.$extend param\r\n    @_dispatchEvent(e,scene)\r\n    return\r\n\r\n  _dispatchEvent: (e,element) ->\r\n    if element.hasEventListener(e.type)\r\n      element.fire(e)\r\n    for child in element.children\r\n      @_dispatchEvent(e,child) if child?\r\n    return\r\n\r\n  refreshStatus: ->\r\n    @_fireAll('refreshStatus')\r\n    return\r\n\r\n  deadCharacter: (character) ->\r\n    @_fireAll('deadCharacter',character:character)\r\n    return\r\n\r\n  startBattleScene: ->\r\n    @_fireAll('startBattleScene')\r\n    return\r\n\r\n  endBattleScene: ->\r\n    @_fireAll('endBattleScene')\r\n    return\r\n\r\n  replayBattle: ->\r\n    @_fireAll('replayBattle')\r\n    return\r\n\r\n  startBattlePhase: ->\r\n    @_fireAll('startBattlePhase')\r\n    return\r\n\r\n  endBattlePhase: ->\r\n    @_fireAll('endBattlePhase')\r\n    return\r\n\r\n  startBattleTurn: ->\r\n    @_fireAll('startBattleTurn')\r\n    return\r\n\r\n  endBattleTurn: ->\r\n    @_fireAll('endBattleTurn')\r\n    return\r\n\r\n  addBallet: (param) ->\r\n    @_fireAll('addBallet',param)\r\n    return\r\n\r\n  removeBallet: (param) ->\r\n    @_fireAll('removeBallet',param)\r\n    return\r\n\r\n  selectStatus: (param) ->\r\n    @_fireAll('selectStatus',param)\r\n    return\r\n","###*\r\n* @file SceneBase.coffee\r\n* シーンベース\r\n###\r\n\r\nSCREEN_W = nz.system.screen.width\r\nSCREEN_H = nz.system.screen.height\r\nCENTER_X = SCREEN_W / 2\r\nCENTER_Y = SCREEN_H / 2\r\n\r\ntm.define 'nz.SceneBase',\r\n  superClass: tm.app.Scene\r\n\r\n  init: ->\r\n    @superInit()\r\n    return\r\n\r\n  popMessage: (param) ->\r\n    {message} = param\r\n    scene = nz.ScenePopMessage\r\n      message:  message\r\n      width:    SCREEN_W / 2\r\n      height:   50\r\n      start:    [CENTER_X,-25]\r\n      center:   [CENTER_X,CENTER_Y]\r\n      end:      [CENTER_X,SCREEN_H + 25]\r\n      duration: 1000\r\n      fillStyle:   nz.system.dialog.fillStyle\r\n      strokeStyle: nz.system.dialog.strokeStyle\r\n      popwait:  500\r\n    @app.pushScene scene\r\n\r\n  openMenuDialog: (param) ->\r\n    dlg = nz.SceneMenu(param)\r\n    @app.pushScene dlg\r\n    return dlg\r\n\r\n  description: (text) ->\r\n    unless @_description\r\n      @_description = tm.display.Label(\r\n        ''\r\n        14\r\n      ).addChildTo   @\r\n        .setAlign    'center'\r\n        .setBaseline 'middle'\r\n        .setPosition SCREEN_W / 2, SCREEN_H - 10\r\n    @_description.text = text\r\n\r\n  createKeyboradHander: ->\r\n    eventKeys      = ['up','down','left','right','enter']\r\n    repeatCount    = 0\r\n    repeatDelay    = 10\r\n    repeatIntarval = 0\r\n\r\n    return (e) ->\r\n      app = @app ? e.app\r\n      kb = app.keyboard\r\n      for key in eventKeys when kb.getKeyDown(key)\r\n        repeatCount = 0\r\n        @fire tm.event.Event('input_' + key)\r\n\r\n      for key in eventKeys when kb.getKey(key)\r\n        if repeatDelay < repeatCount++\r\n          @fire tm.event.Event('repeat_' + key)\r\n          repeatCount -= repeatIntarval\r\n\r\n  setupCursorHandler: (handler) ->\r\n    for k in ['up','down','left','right']\r\n      @on 'input_'  + k, handler\r\n      @on 'repeat_' + k, handler\r\n    return\r\n","###*\r\n* @file SceneMenu.coffee\r\n* メニューシーン\r\n###\r\n\r\nSCREEN_W    = nz.system.screen.width\r\nSCREEN_H    = nz.system.screen.height\r\n\r\ntm.define 'nz.SceneMenu',\r\n  superClass: tm.ui.MenuDialog\r\n\r\n  init: (param) ->\r\n    param = {\r\n      self: @\r\n      screenWidth:  SCREEN_W\r\n      screenHeight: SCREEN_H\r\n    }.$extend param\r\n    @menuFunc  = (m.func for m in param.menu when m.func?)\r\n    param.menuDesctiptions = (m.desctiption for m in param.menu when m.desctiption?)\r\n    param.menu = (m.name for m in param.menu when m.name?)\r\n    @superInit(param)\r\n\r\n    @box.setStrokeStyle nz.system.dialog.strokeStyle\r\n    @box.setFillStyle   nz.system.dialog.fillStyle\r\n\r\n    index = null\r\n    @on 'menuselected', (e) ->\r\n      index = e.selectIndex\r\n      return\r\n    @on 'menuclosed', (e) ->\r\n      @menuFunc[index]?.call(param.self,index) if index?\r\n      return\r\n\r\n    @on 'enterframe', (e) ->\r\n      {app} = e\r\n      kb = app.keyboard\r\n      if kb.getKeyDown('up')\r\n        @up()\r\n      else if kb.getKeyDown('down')\r\n        @down()\r\n      else if kb.getKeyDown('enter')\r\n        @closeDialog(@_selected)\r\n      return\r\n\r\n    return\r\n\r\n  up: ->\r\n    @setIndex @_selected - 1\r\n    return\r\n  down: ->\r\n    @setIndex @_selected + 1\r\n    return\r\n\r\n  setIndex: (i) ->\r\n    @_selected = (i + @menu.length) % @menu.length\r\n    @selectValue = @menu[@_selected]\r\n    @selectIndex = @_selected\r\n    @dispatchEvent tm.event.Event('menuselect')\r\n    return\r\n","###*\r\n* @file SceneTitleMenu.coffee\r\n* タイトルシーン\r\n###\r\n\r\ntm.define 'nz.SceneTitleMenu',\r\n  superClass: nz.SceneBase\r\n\r\n  ###* 初期化\r\n  * @classdesc タイトルシーンクラス\r\n  * @constructor nz.SceneTitleMenu\r\n  ###\r\n  init: () ->\r\n    @superInit()\r\n\r\n    menu = [\r\n      {\r\n        name: 'New Game'\r\n        desctiption: '新しいゲームをはじめる'\r\n        func: @_new_game\r\n      }\r\n      {\r\n        name: 'Load Game'\r\n        desctiption: '保存したゲームをはじめる'\r\n        func: @_load_game\r\n      }\r\n      {\r\n        name: 'Option'\r\n        desctiption: 'ゲームオプション'\r\n        func: @_option\r\n      }\r\n      {\r\n        name: 'Debug Game'\r\n        desctiption: 'デバックゲーム'\r\n        func: @_debug_game\r\n      }\r\n    ]\r\n\r\n    @on 'enter', ->\r\n      scene = tm.game.TitleScene(title:nz.system.title)\r\n      scene.on 'enterframe', ->\r\n        if @app.keyboard.getKeyDown('enter')\r\n          @onpointingstart()\r\n      @app.pushScene scene\r\n\r\n    @on 'resume', ->\r\n      @openMenuDialog\r\n        self: @\r\n        title: nz.system.title\r\n        menu: menu\r\n\r\n    return\r\n\r\n  ###* 新しいゲームを開始\r\n  * @constructor nz.SceneTitleMenu#\r\n  ###\r\n  _new_game: ->\r\n    @app.replaceScene nz.SceneBattle(\r\n      mapId: 1\r\n      controlTeam: ['teamA']\r\n      characters: [\r\n        {name:'キャラクター1',team:'teamA'}\r\n        {name:'キャラクター2',team:'teamA'}\r\n        {name:'キャラクター3',team:'teamA'}\r\n        {name:'キャラクター4',team:'teamB'}\r\n        {name:'キャラクター5',team:'teamB'}\r\n        {name:'キャラクター6',team:'teamB'}\r\n      ]\r\n    )\r\n    return\r\n\r\n  ###* ゲームをロード\r\n  * @constructor nz.SceneTitleMenu#\r\n  ###\r\n  _load_game: ->\r\n    console.log 'load game'\r\n    return\r\n\r\n  ###* システムオプション\r\n  * @constructor nz.SceneTitleMenu#\r\n  ###\r\n  _option: ->\r\n    console.log 'option'\r\n    return\r\n\r\n  ###* 新しいゲームを開始\r\n  * @constructor nz.SceneTitleMenu#\r\n  ###\r\n  _debug_game: ->\r\n    @app.replaceScene nz.SceneBattle(\r\n      mapId: 0\r\n      controlTeam: ['teamA']\r\n      characters: [\r\n        #new nz.Character(\r\n        #  name:'キャラクター1'\r\n        #  team:'teamA'\r\n        #  spriteSheet:'character_test'\r\n        #  weapon:\r\n        #    damage: 20\r\n        #)\r\n        #new nz.Character(\r\n        #  name:'キャラクター2'\r\n        #  team:'teamA'\r\n        #  spriteSheet:'character_test'\r\n        #  ai:\r\n        #    name: 'Shooter'\r\n        #    src: 'nz/ai/Shooter.js'\r\n        #)\r\n        #new nz.Character(\r\n        #  name:'キャラクター3'\r\n        #  team:'teamA'\r\n        #  spriteSheet:'character_test'\r\n        #  ai:\r\n        #    name: 'Default'\r\n        #)\r\n        {\r\n          name:'キャラクター3'\r\n          team:'teamA'\r\n          spriteSheet:'character_test'\r\n          ai:\r\n            name: 'Runner'\r\n            src: 'nz/ai/Runner.js'\r\n        }\r\n        #new nz.Character(\r\n        #  name:'キャラクター4'\r\n        #  team:'teamB'\r\n        #  spriteSheet:'character_test'\r\n        #  ai:\r\n        #    name: 'Shooter'\r\n        #    src: 'nz/ai/Shooter.js'\r\n        #)\r\n        #new nz.Character(\r\n        #  name:'キャラクター5'\r\n        #  team:'teamB'\r\n        #  spriteSheet:'character_test'\r\n        #  ai:\r\n        #    name: 'Runner'\r\n        #    src: 'nz/ai/Runner.js'\r\n        #)\r\n        {\r\n          name:'キャラクター6'\r\n          team:'teamB'\r\n          spriteSheet:'character_test'\r\n          ai:\r\n            name: 'Shooter'\r\n            src: 'nz/ai/Shooter.js'\r\n        }\r\n      ]\r\n    )\r\n    return\r\n","###*\r\n* @file SceneBattle.coffee\r\n* 戦闘シーン\r\n###\r\n\r\nSCREEN_W    = nz.system.screen.width\r\nSCREEN_H    = nz.system.screen.height\r\nDIRECTIONS  = nz.system.character.directions\r\nACTION_COST = nz.system.character.action_cost\r\n\r\ntm.define 'nz.SceneBattle',\r\n  superClass: nz.SceneBase\r\n\r\n  ###* 初期化\r\n  * @classdesc 戦闘シーンクラス\r\n  * @constructor nz.SceneBattle\r\n  ###\r\n  init: (param) ->\r\n    {\r\n      @mapId\r\n      @characters\r\n      @controlTeam\r\n      @endCondition\r\n    } = param\r\n    @superInit()\r\n    @mapName = 'map_' + \"#{@mapId}\".paddingLeft(3,'0')\r\n    @_selectCharacterIndex = 0\r\n\r\n    unless @endCondition?\r\n      @endCondition =\r\n        type: 'team'\r\n        turn: 20\r\n\r\n    for c,i in @characters\r\n      unless c instanceof nz.Character\r\n        @characters[i] = new nz.Character(c)\r\n\r\n    @data =\r\n      turn:   0    # 戦闘ターン数\r\n      winner: null\r\n      replay: null\r\n      startInfo: {}\r\n\r\n    @eventHandler = nz.EventHandlerBattle()\r\n\r\n    @on 'enter', @load.bind @\r\n    return\r\n\r\n  load: ->\r\n    loaded = true\r\n    assets = {}\r\n    unless tm.asset.Manager.contains(@mapName)\r\n      assets[@mapName] = \"data/#{@mapName}.json\"\r\n      loaded = false\r\n    for c in @characters when not tm.asset.Manager.contains(c.ai.name)\r\n      src = c.ai.src ? \"nz/ai/#{c.ai.name}.js\"\r\n      unless nz.system.ai[c.ai.name]?\r\n        assets[c.ai.name] = src\r\n        loaded = false\r\n\r\n    unless loaded\r\n      scene = tm.game.LoadingScene(\r\n        assets:  assets\r\n        width:   SCREEN_W\r\n        height:  SCREEN_H\r\n        autopop: true\r\n      )\r\n\r\n      scene.on 'load', @setup.bind @\r\n\r\n      @app.pushScene scene\r\n    else\r\n      @setup()\r\n    return\r\n\r\n  setup: ->\r\n    scene = @\r\n\r\n    # マップ\r\n    @mapSprite = nz.SpriteBattleMap(@mapName).addChildTo(@)\r\n    @mapSprite.x = (SCREEN_W - @mapSprite.width ) - 32\r\n    @mapSprite.y = (SCREEN_H - @mapSprite.height) / 2\r\n\r\n    # ステータスフォルダ\r\n    @status = tm.display.CanvasElement().addChildTo @\r\n\r\n    x = y = 0\r\n    for character,i in @characters\r\n      # キャラクター\r\n      sprite = nz.SpriteCharacter(i,character)\r\n        .setVisible(false)\r\n        .addChildTo(@mapSprite)\r\n      @characterSprites.push sprite\r\n\r\n      # ステータス\r\n      s = nz.SpriteStatus(\r\n        index: i\r\n        character: character\r\n        characterSprite: sprite\r\n        detail: @controlTeam.contains character.team\r\n      )\r\n      s.setPosition x, y\r\n      @status.addChildAt s, 0\r\n      y += 32 * 2.5 - 8\r\n\r\n    @on 'selectStatus', (e) ->\r\n      {\r\n        scene\r\n        status\r\n      } = e\r\n      scene.activeStatus status\r\n      scene.blinkCharacter status.index\r\n\r\n    # 基本操作\r\n    @on 'map.pointingend', @_mapPointingend\r\n\r\n    # 開始時位置決め\r\n    @one 'enterframe', ->\r\n      @_pushScene(\r\n        nz.SceneBattlePosition(\r\n          mapSprite: @mapSprite\r\n          controlTeam: @controlTeam\r\n        )\r\n      )\r\n      @one 'resume', ->\r\n        @eventHandler.startBattleScene()\r\n        @data.startInfo.characters = []\r\n        for c in @characters\r\n          @data.startInfo.characters.push\r\n            mapx:      c.mapx\r\n            mapy:      c.mapy\r\n            direction: c.direction\r\n            hp:        c.hp\r\n            sp:        c.sp\r\n        @_startInputPhase()\r\n\r\n    @eventHandler.refreshStatus()\r\n\r\n    # イベント\r\n    @on 'enterframe'   , @createKeyboradHander()\r\n    @on 'input_enter'  , @inputEnter\r\n    @setupCursorHandler @cursorHandler\r\n    return\r\n\r\n  cursorHandler: (e) ->\r\n    @mapSprite.fire e\r\n\r\n  inputEnter: (e) ->\r\n    @_mapPointingend @mapSprite.cursor\r\n\r\n  _mapPointingend: (param) ->\r\n    {\r\n      mapx\r\n      mapy\r\n    } = param\r\n    @mapSprite.clearBlink()\r\n    targets = @mapSprite.findCharacterGhost(mapx,mapy)\r\n    for t in @mapSprite.findCharacter(mapx,mapy) when t.isAlive()\r\n      if not t.hasGhost() or t.ghost.mapx != mapx or t.ghost.mapy != mapy\r\n        targets.push t\r\n    targets = (t for t in targets when @controlTeam.contains t.character.team)\r\n    if targets.length == 0\r\n      @_openGameMenu()\r\n    else if targets.length == 1\r\n      @_openCommandMenu(targets[0])\r\n    else\r\n      @_openSelectCharacterMenu(targets)\r\n    return\r\n\r\n  activeStatus: (status) ->\r\n    @status.addChild status\r\n    return\r\n\r\n  blinkCharacter: (index) ->\r\n    s = @characterSprites[index]\r\n    @mapSprite.clearBlink()\r\n    @mapSprite.blink(s.mapx,s.mapy)\r\n    @mapSprite.blink(s.ghost.mapx,s.ghost.mapy) if s.hasGhost()\r\n    return\r\n\r\n  _createResultTimeup: ->\r\n    name = ''\r\n    score = 0\r\n    t = {}\r\n    for c in @characters when c.isAlive()\r\n      unless t[c.team]?\r\n        t[c.team] = c.hp\r\n      else\r\n        t[c.team] += c.hp\r\n      if score < t[c.team]\r\n        name  = c.team\r\n        score = t[c.team]\r\n    winner = [\r\n      {\r\n        name: name\r\n        score: score\r\n      }\r\n    ]\r\n    for k,v of t when name isnt k and score is v\r\n      winner.push\r\n        name: k\r\n        score: v\r\n    if winner.length is 1\r\n      @data.result =\r\n        winner: winner[0]\r\n    else\r\n      @data.result =\r\n        draw: winner\r\n    return\r\n\r\n  _createResultTeam: ->\r\n    # １チームが残っている場合に終了\r\n    t = null\r\n    for c in @characters when c.isAlive()\r\n      unless t?\r\n        t = c.team\r\n      else if t isnt c.team\r\n        return\r\n    @data.result = {\r\n      winner:\r\n        name: t\r\n    }\r\n    return\r\n\r\n  _createResult: ->\r\n    # 時間切れの場合\r\n    if @turn >= @endCondition.turn\r\n      @_createResultTimeup()\r\n      return\r\n    # 終了タイプがチームの場合\r\n    if @endCondition.type is 'team'\r\n      @_createResultTeam()\r\n      return\r\n    return\r\n\r\n  isEnd: -> @data.result?\r\n\r\n  _pushScene: (scene) ->\r\n    @eventHandler.refreshStatus()\r\n    @one 'pause',  ->\r\n      @mapSprite.addChildTo scene\r\n      @status.addChildTo scene\r\n      return\r\n    @one 'resume', ->\r\n      @mapSprite.addChildTo @\r\n      @status.addChildTo @\r\n      @eventHandler.refreshStatus()\r\n      return\r\n    @mapSprite.remove()\r\n    @status.remove()\r\n    @app.pushScene scene\r\n    return\r\n\r\n  _commandScene: (klass,callback) ->\r\n    target = @selectCharacterSprite\r\n    if @_selectGhost\r\n      target = @selectCharacterSprite.ghost\r\n    @_pushScene klass(\r\n      turn:       @turn\r\n      target:     target\r\n      callback:   callback\r\n      mapSprite:  @mapSprite\r\n      status:     @status\r\n      characters: @characters\r\n    )\r\n    @one 'resume', @_checkCommandConf.bind @\r\n    return\r\n\r\n  _openGameMenu: ->\r\n    @openMenuDialog\r\n      self: @\r\n      title: 'Command?'\r\n      menu: [\r\n        {name:'Next Turn', func: @_openTurnConfMenu}\r\n        {name:'Option',    func: -> return}\r\n        {name:'Exit Game', func: @_exitGame}\r\n        {name:'Close Menu'}\r\n      ]\r\n    return\r\n\r\n  _openSelectCharacterMenu: (targets) ->\r\n    menu = []\r\n    for t in targets\r\n      menu.push\r\n        name: t.character.name\r\n        func: (i) -> @_openCommandMenu targets[i]\r\n    menu.push {name: 'Close Menu'}\r\n    @openMenuDialog\r\n      self: @\r\n      title: 'Select Character'\r\n      menu: menu\r\n    return\r\n\r\n  _openCommandMenu: (target) ->\r\n    @_selectCharacterIndex = target.index\r\n    @_selectGhost          = target.isGhost()\r\n    @activeStatus(s) for s in @status.children when s.index == target.index\r\n    menu  = []\r\n    sc    = @selectCharacter\r\n    acost = sc.getActionCost(@turn)\r\n    rap   = sc.getRemnantAp(@turn)\r\n    # アクションの入力が可能かどうか。（ゴーストを選択しているか、ゴーストを選択してない場合は、ゴーストを持っていなければ、入力可能）\r\n    if @_selectGhost or (not @_selectGhost and not target.hasGhost())\r\n      if rap >= ACTION_COST.move\r\n        menu.push\r\n          name: 'Move'\r\n          func: @_addMoveCommand\r\n      if rap >= ACTION_COST.rotate\r\n        menu.push\r\n          name: 'Rotate'\r\n          func: @_addRotateCommand\r\n      if rap >= ACTION_COST.attack\r\n        attack = sc.isAttackCommand(@turn)\r\n        shot   = sc.isShotCommand(@turn)\r\n        if not attack and not shot\r\n          menu.push\r\n            name: 'Attack'\r\n            func: @_addAttackCommand\r\n          menu.push\r\n            name: 'Shot'\r\n            func: @_addShotCommand\r\n    if acost > 0\r\n      menu.push\r\n        name: 'Reset Action'\r\n        func: @_resetCommand\r\n    menu.push {name:'Close Menu'}\r\n    @openMenuDialog\r\n      self: @\r\n      title: sc.name\r\n      menu: menu\r\n    return\r\n\r\n  _openTurnConfMenu: ->\r\n    @openMenuDialog\r\n      self: @\r\n      title: 'Start Battle?'\r\n      menu: [\r\n        {name:'Yes',func: -> @_startBattlePhase() }\r\n        {name:'No'}\r\n      ]\r\n    return\r\n\r\n  _checkCommandConf: ->\r\n    for c in @characters when @controlTeam.contains(c.team) and c.isAlive()\r\n      if c.getRemnantAp(@turn) > 0\r\n        return\r\n    @_openTurnConfMenu()\r\n    return\r\n\r\n  _openResult: ->\r\n    @_pushScene nz.SceneBattleResult\r\n      mapSprite: @mapSprite\r\n      status: @status\r\n      data: @data\r\n    @one 'resume', ->\r\n      if @data.replay?\r\n        @_startReplay()\r\n      else\r\n        @eventHandler.endBattleScene()\r\n        @app.popScene()\r\n      return\r\n    return\r\n\r\n  _startReplay: ->\r\n    return unless @data.replay?\r\n    si = @data.startInfo\r\n    for sc,i in @characterSprites\r\n      c    = sc.character\r\n      o    = si.characters[i]\r\n      c.hp = o.hp\r\n      c.sp = o.sp\r\n      sc.setMapPosition(o.mapx,o.mapy)\r\n      sc.setDirection(o.direction)\r\n      sc.applyPosition()\r\n      sc.show()\r\n    @_startBattlePhase(@data.replay)\r\n    return\r\n\r\n  _exitGame: ->\r\n    nz.system.restart()\r\n    return\r\n\r\n  _startInputPhase: () ->\r\n    @data.turn += 1\r\n    console.log \"battle turn #{@data.turn}\"\r\n    characters = @characters.map (c) -> c.createAiInfo()\r\n    for c,i in characters when not (@controlTeam.contains c.team) and c.isAlive()\r\n      nz.system.ai[c.ai.name]?.setupAction new nz.ai.Param(\r\n        character: c\r\n        characters: characters\r\n        graph: @mapSprite.graph\r\n        turn: @turn\r\n      )\r\n      @characters[i].commands[@turn] = c.commands[@turn]\r\n    @eventHandler.refreshStatus()\r\n\r\n    if @controlTeam.length is 0\r\n      @_startBattlePhase()\r\n    else\r\n      @popMessage(message:\"Turn #{@data.turn}\")\r\n\r\n  _startBattlePhase: (param) ->\r\n    {\r\n      start\r\n      end\r\n    } = {\r\n      start: @turn\r\n      end: @turn\r\n    }.$extend param\r\n    @_pushScene(\r\n      nz.SceneBattlePhase(\r\n        start: start\r\n        end: end\r\n        mapSprite: @mapSprite\r\n        status: @status\r\n      )\r\n    )\r\n    @one 'resume', ->\r\n      @_createResult()\r\n      if @isEnd()\r\n        @_openResult()\r\n      else\r\n        @_startInputPhase()\r\n    return\r\n\r\n  _addMoveCommand: ->\r\n    @_commandScene(\r\n      nz.SceneBattleMoveCommand\r\n      ((route) ->\r\n        sc = @selectCharacter\r\n        sc.addMoveCommand @turn, route\r\n        if route.length > 0\r\n          @selectCharacterSprite.createGhost(route[route.length-1]).addChildTo @mapSprite\r\n        if sc.getRemnantAp(@turn) > 0\r\n          @_selectGhost = true\r\n          @one 'enterframe', @_addRotateCommand\r\n        return\r\n      ).bind @\r\n    )\r\n    return\r\n\r\n  _addAttackCommand: ->\r\n    sc = @selectCharacter\r\n    sc.setAttackCommand @turn\r\n    scs = @selectCharacterSprite\r\n    if not scs.hasGhost() and not scs.isGhost()\r\n      scs.createGhost(scs).addChildTo @mapSprite\r\n    @eventHandler.refreshStatus()\r\n    if sc.getRemnantAp(@turn) > 0\r\n      @_selectGhost = true\r\n      @one 'enterframe', @_addMoveCommand\r\n    else\r\n      @_checkCommandConf()\r\n    return\r\n\r\n  _addShotCommand: ->\r\n    @_commandScene(\r\n      nz.SceneBattleShotCommand\r\n      ((rotation) ->\r\n        sc  = @selectCharacter\r\n        scs = @selectCharacterSprite\r\n        sc.addShotCommand @turn, rotation\r\n        if not scs.hasGhost() and not scs.isGhost()\r\n          scs.createGhost(scs).addChildTo @mapSprite\r\n        if sc.getRemnantAp(@turn) > 0\r\n          @_selectGhost = true\r\n          @one 'enterframe', @_addMoveCommand\r\n        return\r\n      ).bind @\r\n    )\r\n    return\r\n\r\n  _addRotateCommand: ->\r\n    @_commandScene(\r\n      nz.SceneBattleDirectionCommand\r\n      ((direction1,direction2) ->\r\n        sc  = @selectCharacter\r\n        scs = @selectCharacterSprite\r\n        sc.addRotateCommand @turn, direction1, DIRECTIONS[direction1].rotateIndex[direction2]\r\n        unless scs.hasGhost()\r\n          scs.createGhost(scs).addChildTo @mapSprite\r\n        scs.ghost.setDirection(direction2)\r\n        return\r\n      ).bind @\r\n    )\r\n    return\r\n\r\n  _resetCommand: ->\r\n    @selectCharacter.clearCommand()\r\n    @selectCharacterSprite.clearGhost()\r\n    @eventHandler.refreshStatus()\r\n    return\r\n\r\nnz.SceneBattle.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\r\nnz.SceneBattle.prototype.getter 'selectCharacterSprite', -> @characterSprites[@_selectCharacterIndex]\r\nnz.SceneBattle.prototype.getter 'selectCharacter', -> @selectCharacterSprite.character\r\nnz.SceneBattle.prototype.getter 'turn', -> @data.turn\r\n","###*\r\n* @file SceneBattlePosition.coffee\r\n* 戦闘開始位置設定\r\n###\r\n\r\nMSGS   = nz.system.messages\r\nDIRNUM = nz.system.direction_num\r\n\r\ntm.define 'nz.SceneBattlePosition',\r\n  superClass: nz.SceneBase\r\n\r\n  init: (param) ->\r\n    @superInit()\r\n    {\r\n      @mapSprite\r\n      @controlTeam\r\n    } = param\r\n\r\n    @otherTeam = []\r\n\r\n    @teamArea  = {}\r\n    @members   = {}\r\n\r\n    areaIndex  = 0\r\n    for c in @mapSprite.characterSprites\r\n      team = c.character.team\r\n      unless @members[team]?\r\n        @members[team]  = []\r\n        @teamArea[team] = @mapSprite.map.start.area[areaIndex].clone()\r\n        @otherTeam.push team unless @controlTeam.contains team\r\n        areaIndex += 1\r\n      @members[team].push c\r\n\r\n    # CPU側の位置設定\r\n    for team in @otherTeam\r\n      area    = @teamArea[team]\r\n      friends = (m.character for m in @members[team])\r\n      for m,i in @members[team]\r\n        c = m.character\r\n        p = nz.system.ai[c.ai.name]?.setupBattlePosition(\r\n          character: c\r\n          friends:   friends\r\n          area:      area\r\n        )\r\n        p = area[i] unless p?\r\n        @_setBattlePosition(m,p[0],p[1])\r\n        m.applyPosition()\r\n\r\n    @on 'map.pointingover', @_mapPointingover\r\n    @on 'map.pointingend',  @_mapPointingend\r\n    @on 'enter',            @_start\r\n\r\n    @on 'enterframe'   , @createKeyboradHander()\r\n    @on 'input_enter'  , @inputEnter\r\n    @setupCursorHandler @cursorHandler\r\n\r\n  cursorHandler: (e) ->\r\n    @mapSprite.fire e\r\n    @_mapPointingover @mapSprite.cursor\r\n\r\n  inputEnter: (e) ->\r\n    @_mapPointingend @mapSprite.cursor\r\n\r\n  _start: ->\r\n    for c in @mapSprite.characterSprites when (not c.visible) and @controlTeam.contains c.character.team\r\n      @_selectCharacter c\r\n      @description MSGS.battle.position.setiing.format name:c.character.name\r\n      return\r\n    @_end()\r\n    return\r\n\r\n  _end: ->\r\n    mapycenter = @mapSprite.map.width / 2\r\n    for c in @mapSprite.characterSprites\r\n      c.visible = true\r\n      if c.mapy < mapycenter\r\n        c.character.direction = DIRNUM.DOWN\r\n        c.setDirection(DIRNUM.DOWN)\r\n      else\r\n        c.character.direction = DIRNUM.UP\r\n        c.setDirection(DIRNUM.UP)\r\n    @mapSprite.clearBlink()\r\n    @one 'enterframe', -> @app.popScene()\r\n    return\r\n\r\n  _selectCharacter: (@character) ->\r\n    @mapSprite.clearBlink()\r\n    for m in @teamArea[@character.character.team]\r\n      if @mapSprite.findCharacter(m[0],m[1]).length == 0\r\n        @mapSprite.blink(m[0],m[1])\r\n\r\n  _setBattlePosition: (c,mapx,mapy) ->\r\n    c.setMapPosition mapx,mapy\r\n    if c.mapy < @mapSprite.map.width / 2\r\n      c.setDirection DIRNUM.DOWN\r\n    else\r\n      c.setDirection DIRNUM.UP\r\n    return\r\n\r\n  _mapPointingover: (param) ->\r\n    {\r\n      mapx\r\n      mapy\r\n    } = param\r\n    @_setBattlePosition(@character,mapx,mapy)\r\n    @character.applyPosition()\r\n    @mapSprite.cursor.visible = true\r\n    @character.visible = true\r\n    return\r\n\r\n  _mapPointingend: (param) ->\r\n    {\r\n      mapx\r\n      mapy\r\n    } = param\r\n    if @mapSprite.isBlink(mapx,mapy)\r\n      @_mapPointingover(param)\r\n      for team in @controlTeam\r\n        for c in @members[team] when not c.visible\r\n          @_start()\r\n          return\r\n      @_end()\r\n    return\r\n","###*\r\n* @file SceneBattleMoveCommand.coffee\r\n* 移動コマンド\r\n###\r\n\r\ntm.define 'nz.SceneBattleMoveCommand',\r\n  superClass: nz.SceneBase\r\n\r\n  init: (param) ->\r\n    @superInit()\r\n    {\r\n      @turn\r\n      @target\r\n      @callback\r\n      @mapSprite\r\n      @characters\r\n    } = param\r\n\r\n    @on 'map.pointingover', @_over\r\n    @on 'map.pointingend', @_end\r\n\r\n    @on 'enterframe'   , @createKeyboradHander()\r\n    @setupCursorHandler (e) ->\r\n      @mapSprite.fire e\r\n      @_over @mapSprite.cursor\r\n    @on 'input_enter'  , @inputEnter\r\n\r\n  inputEnter: (e) ->\r\n    @_end @mapSprite.cursor\r\n\r\n  searchRoute: (e)->\r\n    op = {\r\n      graph:\r\n        cost: @target.character.getRemnantAp(@turn)\r\n    }\r\n    r = nz.utils.searchRoute(\r\n      @mapSprite.graph\r\n      @target\r\n      e\r\n      @characters\r\n      op\r\n    )\r\n    return r\r\n\r\n  _end: (e) ->\r\n    if @mapSprite.isBlink(e.mapx, e.mapy)\r\n      @callback @searchRoute(e)\r\n    @mapSprite.clearBlink()\r\n    @one 'enterframe', -> @app.popScene()\r\n    return\r\n\r\n  _over: (e) ->\r\n    @mapSprite.clearBlink()\r\n    ap = @target.character.getRemnantAp(@turn)\r\n    route = @searchRoute(e)\r\n    for r in route when r.cost <= ap\r\n      @mapSprite.blink(r.mapx,r.mapy)\r\n","###*\r\n* @file SceneBattleShotCommand.coffee\r\n* 射撃コマンドシーン\r\n###\r\n\r\ntm.define 'nz.SceneBattleShotCommand',\r\n  superClass: nz.SceneBase\r\n\r\n  init: (param) ->\r\n    @superInit()\r\n    {\r\n      @turn\r\n      @target\r\n      @callback\r\n      @mapSprite\r\n    } = param\r\n\r\n    @costa = @target.character.getActionCost(@turn)\r\n\r\n    @_keyInput = true\r\n    @_keyRotate = 0\r\n    @on 'enterframe'  , @createKeyboradHander()\r\n    @on 'input_left'  , @_inputLeft\r\n    @on 'repeat_left' , @_inputLeft\r\n    @on 'input_right' , @_inputRight\r\n    @on 'repeat_right', @_inputRight\r\n    #@on 'input_enter'  , @inputEnter\r\n\r\n    @on 'map.pointingover', -> @_keyInput = false\r\n    @on 'map.pointingend',   @_pointEnd\r\n    @_createPointer()\r\n\r\n  _inputLeft: ->\r\n    @_keyInput = true\r\n    @_keyRotate -= 5\r\n    @_rotatePointer @_keyRotate\r\n    return\r\n\r\n  _inputRight: ->\r\n    @_keyInput = true\r\n    @_keyRotate += 5\r\n    @_rotatePointer @_keyRotate\r\n    return\r\n\r\n  _rotatePointer: (r) ->\r\n    if @pointer?\r\n      tcsr = @target.character.shot.range\r\n\r\n      r = nz.utils.relativeRotation(@target.body.rotation,r)\r\n      @target.checkDirection(\r\n        r:             r\r\n        start:         tcsr.start\r\n        end:           tcsr.end\r\n        anticlockwise: tcsr.anticlockwise\r\n        callback: ((result,ra) ->\r\n          ra += @target.body.rotation\r\n          unless result\r\n            @_keyRotate = ra\r\n          @pointer.rotation = ra\r\n        ).bind @\r\n      )\r\n    return\r\n\r\n  update: (app) ->\r\n    @_movePointer(app.pointing) unless @_keyInput\r\n    return\r\n\r\n  _pointStart: (e) ->\r\n    #@_removePointer()\r\n    #@_createPointer()\r\n    @_movePointer(e.pointing)\r\n    return\r\n\r\n  _pointMove: (e) ->\r\n    @_movePointer(e.pointing)\r\n    return\r\n\r\n  _pointEnd: (e) ->\r\n    @_setupCommand()\r\n    @_removePointer()\r\n    @_endScene()\r\n    return\r\n\r\n  _setupCommand: ->\r\n    if @pointer?\r\n      @callback(@pointer.rotation)\r\n    return\r\n\r\n  _endScene: ->\r\n    @one 'enterframe', -> @app.popScene()\r\n    return\r\n\r\n  _createPointer: ->\r\n    @pointer = tm.display.Shape(\r\n      width: 10\r\n      height: 10\r\n    ).addChildTo @mapSprite\r\n      .setPosition @target.x,@target.y\r\n    tm.display.CircleShape(\r\n      x: 40\r\n      width: 10\r\n      height: 10\r\n      fillStyle: 'blue'\r\n    ).addChildTo @pointer\r\n    @pointer.rotation = @target.body.rotation\r\n    return\r\n\r\n  _removePointer: ->\r\n    if @pointer?\r\n      @pointer.remove()\r\n      @pointer = null\r\n    return\r\n\r\n  _movePointer: (pointing) ->\r\n    if @pointer?\r\n      t    = @mapSprite.globalToLocal pointing\r\n      tcsr = @target.character.shot.range\r\n\r\n      @target.checkDirection(\r\n        x:             t.x\r\n        y:             t.y\r\n        start:         tcsr.start\r\n        end:           tcsr.end\r\n        anticlockwise: tcsr.anticlockwise\r\n        callback: ((result,r) ->\r\n          if result\r\n            x = t.x - @target.x\r\n            y = t.y - @target.y\r\n            v = tm.geom.Vector2 x,y\r\n            r = Math.radToDeg v.toAngle()\r\n          else\r\n            r += @target.body.rotation\r\n          @pointer.rotation = r\r\n        ).bind @\r\n      )\r\n    return\r\n","###*\r\n* @file SceneBattleDirectionCommand.coffee\r\n* 向き設定コマンドシーン\r\n###\r\n\r\nDIRECTIONS  = nz.system.character.directions\r\n\r\ntm.define 'nz.SceneBattleDirectionCommand',\r\n  superClass: nz.SceneBattleShotCommand\r\n\r\n  init: (param) ->\r\n    @superInit(param)\r\n\r\n    @_direction = null\r\n\r\n  _setupCommand: ->\r\n    if @_direction?\r\n      @callback(@target.direction,@_direction)\r\n    return\r\n\r\n  _movePointer: (pointing) ->\r\n    return unless @pointer?\r\n    t = @target.body.localToGlobal tm.geom.Vector2(0,0)\r\n    x = pointing.x - t.x\r\n    y = pointing.y - t.y\r\n    v = tm.geom.Vector2 x,y\r\n    rotation = Math.radToDeg v.toAngle()\r\n    for d,i in DIRECTIONS when 0 <= i and i < 6\r\n      if d.rotation - 30 < rotation and rotation < d.rotation + 30\r\n        costd = nz.Graph.directionCost(@target.direction, d.index)\r\n        if (@costa + costd) <= @target.character.maxap\r\n          if @_direction != d.index\r\n            @_direction = d.index\r\n            @pointer.rotation = d.rotation\r\n            return\r\n    return\r\n","###*\r\n* @file SceneBattlePhase.coffee\r\n* 戦闘フェーズの処理\r\n###\r\n\r\ntm.define 'nz.SceneBattlePhase',\r\n  superClass: nz.SceneBase\r\n\r\n  init: (param) ->\r\n    @superInit()\r\n    {\r\n      @mapSprite\r\n      @status\r\n      start\r\n      end\r\n    } = param\r\n    @startTuen = start\r\n    @endTurn   = end\r\n    @turn      = start\r\n\r\n    @_balletCount = 0\r\n\r\n    @eventHandler = nz.EventHandlerBattle()\r\n\r\n    @on 'enter', @_startPhase\r\n    @on 'addBallet', @_addBallet\r\n    @on 'removeBallet', @_removeBallet\r\n\r\n    @on 'map.pointingend', @_openPauseMenu\r\n\r\n    @on 'enterframe'   , @createKeyboradHander()\r\n    @on 'input_enter'  , @_openPauseMenu\r\n\r\n    @on 'selectStatus', (e) ->\r\n      {\r\n        scene\r\n        status\r\n      } = e\r\n      scene.activeStatus status\r\n\r\n    return\r\n\r\n  activeStatus: (status) ->\r\n    @status.addChild status\r\n    return\r\n\r\n  _openPauseMenu: ->\r\n    @openMenuDialog\r\n      self: @\r\n      title: 'Pause'\r\n      menu: [\r\n        {name: 'Continue',   func: -> return }\r\n        {name: 'Exit Game?', func: @_exitGame}\r\n      ]\r\n    return\r\n\r\n  _exitGame: (e) ->\r\n    app = @app ? e.app\r\n    app.popScene()\r\n    nz.system.restart()\r\n    return\r\n\r\n  _removeBallet: (param) ->\r\n    {\r\n      ballet\r\n    } = param\r\n    @_balletCount -= 1\r\n\r\n  _addBallet: (param) ->\r\n    {\r\n      ballet\r\n      owner\r\n    } = param\r\n    @_balletCount += 1\r\n\r\n    # TODO: マップオブジェクトも追加しないと\r\n    return\r\n\r\n  _startPhase: ->\r\n    @eventHandler.startBattlePhase()\r\n    @_startTurn(@startTuen)\r\n    return\r\n\r\n  _endPhase: ->\r\n    @eventHandler.endBattlePhase()\r\n    @app.popScene()\r\n    return\r\n\r\n  _startTurn: (@turn) ->\r\n    @eventHandler.startBattleTurn()\r\n    @update = @updateTurn\r\n    return\r\n\r\n  _endTurn: ->\r\n    @eventHandler.endBattleTurn()\r\n    @update = null\r\n    return\r\n\r\n  _isEnd: -> @turn >= @endTurn\r\n\r\n  _isEndAllCharacterAction: ->\r\n    flag = @characterSprites\r\n      .filter (c) -> c.isAlive()\r\n      .some (c) -> c.action\r\n    #flag = false\r\n    #flag |= c.action for c in @characterSprites when c.isAlive()\r\n    return (not flag) and (@_balletCount is 0)\r\n\r\n  updateTurn: ->\r\n    if @_isEndAllCharacterAction()\r\n      @_endTurn()\r\n      if @_isEnd()\r\n        @_endPhase()\r\n      else\r\n        @_startTurn(@turn + 1)\r\n        if @_isEndAllCharacterAction()\r\n          @_endTurn()\r\n          @_endPhase()\r\n    return\r\n\r\nnz.SceneBattlePhase.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\r\n","###*\r\n* @file SceneBattleResult.coffee\r\n* 戦闘結果の処理\r\n###\r\n\r\nSCREEN_W    = nz.system.screen.width\r\nSCREEN_H    = nz.system.screen.height\r\n\r\ntm.define 'nz.SceneBattleResult',\r\n  superClass: nz.SceneBase\r\n\r\n  init: (param) ->\r\n    @superInit()\r\n    {\r\n      @mapSprite\r\n      @data\r\n    } = param\r\n\r\n    @setOrigin(0.0,0.0)\r\n\r\n    @width          = SCREEN_W - 32 * 2\r\n    @height         = SCREEN_H - 32 * 2\r\n    @bgColor        = 'gray'\r\n    @boundingType   = 'rect'\r\n    @interactive    = true\r\n    @checkHierarchy = true\r\n\r\n    @one 'enterframe', @setup\r\n\r\n  setup: ->\r\n    form =\r\n      children:\r\n        bg:\r\n          type:          'RoundRectangleShape'\r\n          x:             32\r\n          y:             32\r\n          width:         @width\r\n          height:        @height\r\n          strokeStyle:   'black'\r\n          fillStyle:     @bgColor\r\n          lineWidth:     1\r\n          shadowBlur:    1\r\n          shadowOffsetX: 2\r\n          shadowOffsetY: 2\r\n          shadowColor:   'gray'\r\n          originX:       @originX\r\n          originY:       @originY\r\n        message:\r\n          type:      'Label'\r\n          fillStyle: 'black'\r\n          align:     'left'\r\n          baseline:  'top'\r\n          x:         32 + 8\r\n          y:         32 + 10\r\n          originX:   @originX\r\n          originY:   @originY\r\n          fontSize:  8\r\n    form.children.message.text =\r\n      if @data.result.winner?\r\n        'Winner! ' + @data.result.winner.name\r\n      else\r\n        'Draw!!! ' + (o.name for o in @data.result.draw).join ','\r\n\r\n    @fromJSON form\r\n\r\n    @on 'enterframe' , @createKeyboradHander()\r\n    @on 'pointingend', @_openBattleEndMenu\r\n    @on 'input_enter', @_openBattleEndMenu\r\n\r\n  _startReplay: ->\r\n    @data.replay =\r\n      start: 1\r\n      end: @data.turn\r\n    @app.popScene()\r\n    return\r\n\r\n  _endBattle: ->\r\n    @app.popScene()\r\n    return\r\n\r\n  _exitGame: ->\r\n    nz.system.restart()\r\n    return\r\n\r\n  _openBattleEndMenu: ->\r\n    @openMenuDialog\r\n      self: @\r\n      title: 'Battle End'\r\n      menu: [\r\n        {name: 'Replay',     func: @_startReplay}\r\n        {name: 'End Battle', func: @_endBattle}\r\n        {name: 'Exit Game',  func: @_exitGame}\r\n      ]\r\n    return\r\n","###*\r\n* @file ScenePopMessage.coffee\r\n* POP Message シーン\r\n###\r\n\r\ntm.define 'nz.ScenePopMessage',\r\n\r\n  superClass: 'tm.app.Scene'\r\n\r\n  init: (param) ->\r\n    {\r\n      width\r\n      height\r\n      start\r\n      center\r\n      end\r\n      duration\r\n      easing\r\n      fillStyle\r\n      strokeStyle\r\n      message\r\n      popwait\r\n    } = {\r\n      width:  200\r\n      height: 50\r\n      start:  [100,-25]\r\n      center: [100,100]\r\n      end:    [100,-25]\r\n      duration: 1000\r\n      easing: 'swing'\r\n      fillStyle: 'gray'\r\n      strokeStyle: 'gray'\r\n      message:     '(test message)'\r\n      popwait:     undefined\r\n    }.$extend param\r\n\r\n    @_param = {\r\n      start:\r\n        x:        start[0]\r\n        y:        start[1]\r\n      center:\r\n        x:        center[0]\r\n        y:        center[1]\r\n        duration: center[2] ? duration\r\n        easing:   center[3] ? easing\r\n      end:\r\n        x:        end[0]\r\n        y:        end[1]\r\n        duration: end[2]    ? duration\r\n        easing:   end[3]    ? easing\r\n      popwait: popwait\r\n    }\r\n\r\n    @superInit()\r\n    @setInteractive(true)\r\n\r\n    {x,y} = @_param.start\r\n    @_board = tm.display.RoundRectangleShape\r\n      x:           x\r\n      y:           y\r\n      height:      height\r\n      width:       width\r\n      fillStyle:   fillStyle\r\n      strokeStyle: strokeStyle\r\n    @_board.addChildTo @\r\n\r\n    @_label = tm.display.Label message\r\n    @_label.addChildTo @_board\r\n\r\n    @on 'pointingend', -> @outAnimation()\r\n    @on 'enter', -> @inAnimation()\r\n\r\n    @_out = false\r\n\r\n  inAnimation: ->\r\n    {x,y,duration,easing} = @_param.center\r\n    @_board.tweener\r\n      .clear()\r\n      .move(x,y,duration,easing)\r\n    if @_param.popwait?\r\n      @_board.tweener\r\n        .wait @_param.popwait\r\n        .call @outAnimation, @, []\r\n\r\n  outAnimation: ->\r\n    return if @_out\r\n    @_out = true\r\n    {x,y,duration,easing} = @_param.end\r\n    @_board.tweener\r\n      .clear()\r\n      .move(x,y,duration,easing)\r\n      .call (-> @_out = false), @, []\r\n      .call (-> @app.popScene()), @, []\r\n","###* AIパラメータ.\r\n* @file Param.coffee\r\n###\r\n\r\n###* nineteen namespace.\r\n* @namespace nz\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\n###* AI namespace.\r\n* @namespace nz.ai\r\n###\r\nnz.ai = nz.ai ? {}\r\n\r\nDIRECTIONS = nz.system.character.directions\r\n\r\nclass nz.ai.Param\r\n\r\n  ###* 戦闘ターン数\r\n  * @var {number} nz.ai.Param#turn\r\n  ###\r\n  ###* 設定対象キャラクター\r\n  * @var {nz.Character} nz.ai.Param#character\r\n  ###\r\n  ###* 設定対象を含む戦闘に参加しているキャラクターの配列\r\n  * @var {Array<nz.Character>} nz.ai.Param#characters\r\n  ###\r\n  ###* 設定対象を含まない味方キャラクターの配列\r\n  * @var {Array<nz.Character>} nz.ai.Param#friends\r\n  ###\r\n  ###* 敵キャラクターの配列\r\n  * @var {Array<nz.Character>} nz.ai.Param#targets\r\n  ###\r\n  ###* 対象キャラクター／場所。主にアクション設定時の対象として使用される。初期値は一番近い敵キャラクター。\r\n  * @var {Array<nz.Character|Object>} nz.ai.Param#target\r\n  ###\r\n  ###* 対象キャラクター／場所までの距離。初期値は一番近い敵キャラクターまでの距離。\r\n  * @var {Array<nz.Character|Object>} nz.ai.Param#distance\r\n  ###\r\n  ###* マップ情報\r\n  * @var {nz.Graph} nz.ai.Param#graph\r\n  ###\r\n\r\n  ###* コンストラクタ.\r\n  * @classdesc AIパラメータ.\r\n  * @constructor nz.ai.Param\r\n  * @param {Object}              param            初期化パラメータ\r\n  * @param {nz.Character}        param.character  AI対象キャラクター\r\n  * @param {Array<nz.Character>} param.characters AI対象外の戦闘参加キャラクター\r\n  * @param {nz.Graph}            param.graph      マップ情報\r\n  * @param {number}              param.turn       現在の戦闘ターン数\r\n  ###\r\n  constructor: (param) ->\r\n    {\r\n      @character\r\n      @characters\r\n      @graph\r\n      @turn\r\n    } = param\r\n    @setFriendsAndTargets()\r\n    @setNearTarget()\r\n    return\r\n\r\n  ###*\r\n  * @private\r\n  ###\r\n  _searchCharacters: (rotatedir, distance, characters, character = @character) ->\r\n    {\r\n      mapx\r\n      mapy\r\n      direction\r\n    } = character\r\n    nodes = nz.Graph.frontArea(\r\n      mapx:      mapx\r\n      mapy:      mapy\r\n      direction: direction + rotatedir\r\n      distance:  distance\r\n    )\r\n    r = []\r\n    for n in nodes\r\n      for c in characters\r\n        if n.mapx is c.mapx and n.mapy is c.mapy\r\n          r.push c\r\n    return r\r\n\r\n  ###* 敵の範囲検索\r\n  * @memberof nz.ai.Param#\r\n  * @method searchTargets\r\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\r\n  * @param {number} distance  検索距離\r\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\r\n  ###\r\n  searchTargets: (rotatedir,distance) ->\r\n    return @_searchCharacters rotatedir,distance,@targets\r\n\r\n  ###* 味方の範囲検索\r\n  * @memberof nz.ai.Param#\r\n  * @method searchFriends\r\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\r\n  * @param {number} distance  検索距離\r\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\r\n  ###\r\n  searchFriends: (rotatedir,distance) ->\r\n    return @_searchCharacters rotatedir,distance,@friends\r\n\r\n  ###* 近くの敵をターゲットとして検索する\r\n  * @memberof nz.ai.Param#\r\n  * @method findNearTarget\r\n  ###\r\n  findNearTarget: ->\r\n    result = {\r\n      target: null\r\n      distance: 99\r\n    }\r\n    for t in @targets\r\n      d = nz.Graph.distance(@character,t)\r\n      if d < result.distance\r\n        result.distance = d\r\n        result.target = t\r\n    return result\r\n\r\n  ###* 周囲6方向の位置を座標を取得\r\n  * @param {number} n 距離\r\n  * @return {Array} {mapx,mapy} の座標を表したオブジェクトは配列\r\n  ###\r\n  getHexPosition: (n=6) ->\r\n    c = @character\r\n    nx = n\r\n    ny1 = n / 2\r\n    ny2 = n / 2\r\n    if n % 2 != 0\r\n      if c.mapx % 2 == 0\r\n        ny1 -= 0.5\r\n        ny2 += 0.5\r\n      else\r\n        ny1 += 0.5\r\n        ny2 -= 0.5\r\n    return (\r\n      for res in [\r\n        {mapx: c.mapx     , mapy: c.mapy - n  }\r\n        {mapx: c.mapx     , mapy: c.mapy + n  }\r\n        {mapx: c.mapx - nx, mapy: c.mapy - ny1}\r\n        {mapx: c.mapx - nx, mapy: c.mapy + ny2}\r\n        {mapx: c.mapx + nx, mapy: c.mapy - ny1}\r\n        {mapx: c.mapx + nx, mapy: c.mapy + ny2}\r\n      ] when @graph.grid[res.mapx]?[res.mapy]?\r\n        res\r\n    )\r\n\r\n  ###* 戦闘参加キャラクターの敵と味方を分ける。\r\n  * @memberof nz.ai.Param#\r\n  * @method setFriendsAndTargets\r\n  ###\r\n  setFriendsAndTargets: ->\r\n    @friends = []\r\n    @targets = []\r\n    for c in @characters when c.name != @character.name\r\n      if @character.team == c.team\r\n        @friends.push c\r\n      else\r\n        @targets.push c\r\n    return\r\n\r\n  ###* 近くにいる敵キャラクターをターゲットに設定。距離も設定する。\r\n  * @memberof nz.ai.Param#\r\n  * @method setNearTarget\r\n  ###\r\n  setNearTarget: ->\r\n    r = @findNearTarget()\r\n    @target   = r.target\r\n    @distance = r.distance\r\n    return\r\n\r\n  ###* 射撃範囲にターゲットがいるか確認する\r\n  * @memberof nz.ai.Param#\r\n  * @method checkShotRange\r\n  ###\r\n  checkShotRange: ->\r\n    self = @\r\n    source = nz.utils.mapxy2screenxy @character\r\n    source.direction = @character.direction\r\n    target = nz.utils.mapxy2screenxy @target\r\n    data = {\r\n      source: source\r\n      target: target\r\n      range: @character.shot.range\r\n      callback: (res,r) ->\r\n        self.rotation = r if res\r\n    }\r\n    return nz.utils.checkDirectionRange(data)\r\n\r\n  ###* 指定した座標が移動できるか確認する(コスト計算含まない)\r\n  * @memberof nz.ai.Param#\r\n  * @method checkMovePosition\r\n  * @param {Object} p {mapx,mapy}\r\n  ###\r\n  checkMovePosition: (p) ->\r\n    return false unless p?\r\n    node = @graph.grid[p.mapx]?[p.mapy]\r\n    return false unless node?\r\n    return false if node.isWall()\r\n    for c in @characters\r\n      if c.mapx is p.mapx and c.mapy is p.mapy\r\n        return false\r\n    return true\r\n\r\n  getFrontPosition: ->\r\n    c = @character.getLastPosition(@turn)\r\n    c.direction = @character.getLastDirection(@turn)\r\n    return nz.Graph.frontPosition c\r\n\r\n  getBackPosition: ->\r\n    c = @character.getLastPosition(@turn)\r\n    c.direction = @character.getLastDirection(@turn)\r\n    return nz.Graph.backPosition c\r\n\r\n  ###* 前に移動できるか確認する(コスト計算含む)\r\n  * @memberof nz.ai.Param#\r\n  * @method checkFrontPosition\r\n  ###\r\n  checkFrontPosition: ->\r\n    p = @getFrontPosition()\r\n    unless @checkMovePosition(p)\r\n      return false\r\n    node = @graph.grid[p.mapx][p.mapy]\r\n    if @character.getRemnantAp() < node.weight + 1\r\n      return false\r\n    return true\r\n\r\n  ###* 後ろに移動できるか確認する(コスト計算含む)\r\n  * @memberof nz.ai.Param#\r\n  * @method checkBackPosition\r\n  ###\r\n  checkBackPosition: ->\r\n    p = @getBackPosition()\r\n    unless @checkMovePosition(p)\r\n      return false\r\n    node = @graph.grid[p.mapx][p.mapy]\r\n    if @character.getRemnantAp() < node.weight + 1\r\n      return false\r\n    return true\r\n\r\n  ###* 移動コマンドを設定する\r\n  * @memberof nz.ai.Param#\r\n  * @method setMoveCommand\r\n  ###\r\n  setMoveCommand: (args={}) ->\r\n    target = args.target ? @target\r\n    length = args.length ? 99\r\n    route  = nz.utils.searchRoute @graph,@character,target,@characters\r\n    if length < route.length\r\n      route = route[0 ... length]\r\n    @character.addMoveCommand @turn,route\r\n    return\r\n\r\n  ###* 攻撃コマンドを設定する\r\n  * @memberof nz.ai.Param#\r\n  * @method setAttackCommand\r\n  ###\r\n  setAttackCommand: ->\r\n    @character.setAttackCommand @turn\r\n    return\r\n\r\n  ###* 射撃コマンドを設定する\r\n  * @memberof nz.ai.Param#\r\n  * @method setShotCommand\r\n  ###\r\n  setShotCommand: ->\r\n    direction = @character.getLastDirection @turn\r\n    rotation = nz.system.character.directions[direction].rotation\r\n    @character.addShotCommand @turn,@rotation + rotation\r\n    return\r\n\r\n  ###* 後ろに移動するコマンドを設定する\r\n  * @memberof nz.ai.Param#\r\n  * @method setMoveBackCommand\r\n  * @param {number} num 後退する歩数\r\n  ###\r\n  setMoveBackCommand: (num=1) ->\r\n    for i in [0 .. num]\r\n      if @checkBackPosition()\r\n        pos  = @getBackPosition()\r\n        node = @graph.grid[pos.mapx][pos.mapy]\r\n        cost = node.weight + 1\r\n        route = {\r\n          mapx: pos.mapx\r\n          mapy: pos.mapy\r\n          cost: cost\r\n          back: true\r\n          direction: pos.direction\r\n        }\r\n        @character.addMoveCommand @turn, [route]\r\n    return\r\n\r\n  ###* 前に移動するコマンドを設定する\r\n  * @memberof nz.ai.Param#\r\n  * @method setMoveFrontCommand\r\n  * @param {number} num 前進する歩数\r\n  ###\r\n  setMoveFrontCommand: (num=1) ->\r\n    for i in [0 .. num]\r\n      if @checkFrontPosition()\r\n        pos  = @getFrontPosition()\r\n        node = @graph.grid[pos.mapx][pos.mapy]\r\n        cost = node.weight + 1\r\n        route = {\r\n          mapx: pos.mapx\r\n          mapy: pos.mapy\r\n          cost: cost\r\n          back: false\r\n          direction: pos.direction\r\n        }\r\n        @character.addMoveCommand @turn, [route]\r\n    return\r\n\r\n  ###* 方向転換コマンドを設定する（相対値）\r\n  * @memberof nz.ai.Param#\r\n  * @method setRotateCommand\r\n  * @param {number} rotate 方向転換する値(-3から+3の相対値)\r\n  ###\r\n  setRotateCommand: (rotate) ->\r\n    d = @character.getLastDirection @turn\r\n    @character.addRotateCommand @turn, d, rotate\r\n    return\r\n\r\n  ###* 方向転換コマンドを設定する（絶対値）\r\n  * @memberof nz.ai.Param#\r\n  * @method setDirectionCommand\r\n  * @param {number} direction 方向転換する方向(0から5の絶対値)\r\n  ###\r\n  setDirectionCommand: (direction) ->\r\n    if 0 <= direction and direction <= 5\r\n      d = @character.getLastDirection @turn\r\n      @character.addRotateCommand @turn, d, DIRECTIONS[d].rotateIndex[direction]\r\n    return\r\n","###*\r\n* @file Default.coffee\r\n* デフォルトAI\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nnz.ai = nz.ai ? {}\r\n\r\nclass nz.ai.Default\r\n\r\n  ###* 初期化\r\n  * @classdesc デフォルトAIクラス\r\n  * @constructor nz.ai.Default\r\n  ###\r\n  constructor: ->\r\n\r\n  ###* 戦闘開始位置設定\r\n  * @memberof nz.ai.Default#\r\n  * @method setupBattlePosition\r\n  * @param  {Object}         param           設定用パラメータ\r\n  * @param  {nz.Character}   param.character 設定対象のキャラクター\r\n  * @param  {nz.Character[]} param.friends   設定対象を含む味方のキャラクター配列\r\n  * @param  {Object[]}       param.area      開始位置情報の配列(mapdata.start.area)\r\n  * @return {Object[]}       対象キャラクターの位置を、param.area の配列から１つ選択し返す\r\n  ###\r\n  setupBattlePosition: (param) ->\r\n    {\r\n      character\r\n      friends\r\n      area\r\n    } = param\r\n    i = friends.indexOf character\r\n    return area[i]\r\n\r\n  ###* 戦闘行動設定\r\n  * @memberof nz.ai.Default#\r\n  * @method setupBattlePosition\r\n  * @param　{nz.ai.Param} param 設定用パラメータ\r\n  ###\r\n  setupAction: (param) ->\r\n    return\r\n\r\nnz.system.addAI 'Default', new nz.ai.Default()\r\n","###*\r\n* @file Rule.coffee\r\n* ルールベースのAIクラス\r\n###\r\n\r\n# node.js と ブラウザでの this.nz を同じインスタンスにする\r\n_g = window ? global\r\nnz = _g.nz = _g.nz ? {}\r\n_g = undefined\r\n\r\nnz.ai = nz.ai ? {}\r\n\r\nclass nz.ai.Rule\r\n\r\n  ###* 初期化\r\n  * @classdesc ルールベースのAIクラス\r\n  * @constructor nz.ai.Rule\r\n  ###\r\n  constructor: (caller) ->\r\n    @_caller = caller\r\n    @rules   = []\r\n\r\n  add: (rule) ->\r\n    @rules.push rule\r\n\r\n  ###* 戦闘行動設定\r\n  * @param　{nz.ai.Param} param 設定用パラメータ\r\n  ###\r\n  setupAction: (param) ->\r\n    for r in @rules\r\n      if r.cond.call(@_caller,param)\r\n        if r.setup?.call(@_caller,param)\r\n          break\r\n    return\r\n","\r\ntm.main ->\r\n  screen = nz.system.screen\r\n  assets = nz.system.assets\r\n\r\n  nz.system.app = app = tm.display.CanvasApp '#world'\r\n  # app.enableStats()\r\n\r\n  # リサイズ\r\n  app.resize screen.width, screen.height\r\n\r\n  # フィット\r\n  app.fitWindow()\r\n\r\n  # APバックグラウンド\r\n  app.background = 'gray'\r\n  \r\n  # 最初のシーンに切り替える\r\n  app.pushScene tm.game.LoadingScene(\r\n    assets: assets\r\n    width:  screen.width\r\n    height: screen.height\r\n  ).on 'load', (e) ->\r\n    @app.fitWindow()\r\n    nz.system.start()\r\n    return\r\n\r\n  #app.pushScene SplashScene(\r\n  #  width:  screen.width\r\n  #  height: screen.height\r\n  #)\r\n\r\n  # 実行\r\n  app.run()\r\n\r\n  #tm.inform()\r\n"],"sourceRoot":"/source/"}