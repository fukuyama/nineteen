{"version":3,"sources":["System.coffee","main.min.js","Utils.coffee","Graph.coffee","GridNode.coffee","Character.coffee","SpriteBattleMap.coffee","SpriteCharacter.coffee","SpriteStatus.coffee","EventHandlerBattle.coffee","SceneBase.coffee","SceneMenu.coffee","SceneTitleMenu.coffee","SceneBattle.coffee","SceneBattlePosition.coffee","SceneBattleMoveCommand.coffee","SceneBattleShotCommand.coffee","SceneBattleDirectionCommand.coffee","SceneBattlePhase.coffee","SceneBattleResult.coffee","Param.coffee","Default.coffee","Rule.coffee","main.coffee"],"names":["_g","nz","ref","window","global","System","this","ai","prototype","title","direction_num","UP","UP_RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","UP_LEFT","character","directions","name","rotation","index","rotateIndex","action_cost","move","rotate","attack","shot","stamina_cost","map","chip","width","height","screen","dialog","strokeStyle","fillStyle","assets","chipdata","map_object","map_chip","character_001","type","src","character_test","messages","battle","position","setiing","addAI","start","app","replaceScene","SceneTitleMenu","restart","system","call","DIRECTIONS","MAP_CHIP_H","MAP_CHIP_W","Utils","marge","r","o","k","v","Array","concat","searchRoute","graph","source","target","characters","options","c","direction","i","len","mapx","mapy","grid","cost","ap","closest","length","isAlive","push","isWall","mapxy2screenxy","p","arguments","x","y","screenxy2mapxy","Math","floor","relativeRotation","p1","p2","radToDeg","atan2","lineRoute","ax","ay","dx","dy","hx","hy","j","ref1","ref2","ret","sx","sy","abs","round","Graph","distance","checkDirectionRange","param","anticlockwise","callback","end","r1","r2","ra","res","range","utils","_FRONT_POS","_NEIGHBORS","chipid","l","mapdata","node","ref3","nodes","data","GridNode","clear","cleanWrap","clean","cleanDirty","markDirty","wrapNodes","getWrap","d","key","GridNodeWrap","astar","cleanNode","neighbors","w","results","toString","graphString","len1","rowDebug","weight","join","sd","ex","ey","op","g","len2","pd","result","route","wrap","heuristic","search","back","wrap1","wrap2","hd","hr","ceil","calcDirectionTo","directionCost","c1","c2","dir","dis","direction1","direction2","frontPosition","t","backPosition","hexLine","n","frontArea","a","apply","getCost","Object","defineProperty","get","enumerable","frame","object","calcDirection","calcDirectionBy","ACTION_COST","Character","spriteSheet","team","colorChanges","maxhp","maxsp","maxap","hp","sp","speed","armor","defense","weapon","damage","teamColor","from","to","commands","_command","clearCommand","createAiInfo","info","command","actions","clearMoveCommand","action","clearAttackCommand","clearShotCommand","getActionCost","getRemnantAp","getLastDirection","getLastPosition","pos","addMoveCommand","prev","addRotateCommand","setAttackCommand","isShotCommand","addShotCommand","isAttackCommand","some","isMoveCommand","isDead","tm","define","superClass","display","CanvasElement","init","mapName","h","superInit","_chips","_blinks","_activeBlinks","characterSprites","asset","Manager","_initMapChip","cursor","_createCursor","addChildTo","setCursorPosition","getMapChip","on","e","visible","cursorUp","cursorDown","cursorLeft","cursorRight","findCharacter","findCharacterGhost","ghost","Shape","lineWidth","_render","canvas","strokeRect","render","_dispatchMapChipEvent","_e","event","Event","pointing","currentScene","dispatchEvent","blink","frameIndex","Sprite","setPosition","setFrameIndex","setInteractive","setBoundingType","bind","Label","fontSize","setOrigin","RectangleShape","setAlpha","setVisible","tweener","fade","setLoop","clearBlink","isBlink","ST_COST","AnimationSprite","index1","character1","bmp","f","ss","SpriteSheet","image","getBitmap","_createColorFilter","filter","graphics","Canvas","resize","drawBitmap","checkHierarchy","body","createWeapon","_enterframeWeapon","setMapPosition","setDirection","clearGhost","startAction","turn","_weaponHitFlag","update","owner","ballet","collision","add","_hitWeapon","_hitBallet","hide","isGhost","alpha","hasGhost","b","calc","pixel","bitmap","setPixelIndex","setPixel32Index","createGhost","SpriteCharacter","remove","mapx1","mapy1","gotoAndPlay","updateBattle","enemy","scene","getRoot","_updateAttack","checkDirection","_checkAttackDirection","cw","clone","$extend","_attackAnimation","_isHitWeapon","flare","rt","geom","Vector2","setDegree","localToGlobal","isHitPoint","_setShotAction","_setMoveAction","_setRotateAction","_endAction","applyPosition","isMove","isStop","_shotAnimation","_fatigue","wait","finish","play","pause","angle","bv","vx","vy","ｈ","mapSprite","globalToLocal","CircleShape","degToRad","cos","sin","eventHandler","removeBallet","other","addBallet","_deadAnimation","shooter","_damage","attacker","refreshStatus","deadCharacter","form","characterSprite","detail","boundingType","interactive","bgColor","children","bg","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","originX","originY","_label","text","stroke","hpGauge","_gauge","color","_maxValue","spGauge","hpLabel","spLabel","fromJSON","sprite","setScale","EventHandlerBattle","selectStatus","status","borderWidth","borderColor","animationTime","align","baseline","_refreshActionText","value","_fireAll","_dispatchEvent","element","child","hasEventListener","fire","startBattlePhase","endBattlePhase","startBattleTurn","endBattleTurn","SCREEN_H","SCREEN_W","Scene","openMenuDialog","dlg","SceneMenu","pushScene","description","_description","setAlign","setBaseline","createKeyboradHander","eventKeys","repeatCount","repeatDelay","repeatIntarval","kb","keyboard","getKeyDown","getKey","setupCursorHandler","handler","ui","MenuDialog","m","self","screenWidth","screenHeight","menuFunc","menu","func","menuDesctiptions","desctiption","box","setStrokeStyle","setFillStyle","selectIndex","up","down","closeDialog","_selected","setIndex","selectValue","SceneBase","_new_game","_load_game","_option","_debug_game","game","TitleScene","onpointingstart","SceneBattle","mapId","controlTeam","console","log","endCondition","paddingLeft","_selectCharacterIndex","winner","replay","startInfo","load","loaded","contains","setup","LoadingScene","autopop","s","SpriteBattleMap","SpriteStatus","addChildAt","activeStatus","blinkCharacter","_mapPointingend","one","_pushScene","SceneBattlePosition","_startInputPhase","inputEnter","cursorHandler","targets","_openGameMenu","_openCommandMenu","_openSelectCharacterMenu","addChild","_createResultTimeup","score","draw","_createResultTeam","_createResult","isEnd","_commandScene","klass","selectCharacterSprite","_selectGhost","_checkCommandConf","_openTurnConfMenu","_exitGame","acost","rap","sc","selectCharacter","_addMoveCommand","_addRotateCommand","_addAttackCommand","_addShotCommand","_resetCommand","_startBattlePhase","_openResult","SceneBattleResult","_startReplay","si","show","setupAction","Param","SceneBattlePhase","SceneBattleMoveCommand","scs","SceneBattleShotCommand","SceneBattleDirectionCommand","getter","DIRNUM","MSGS","area","areaIndex","friends","otherTeam","teamArea","members","setupBattlePosition","_setBattlePosition","_mapPointingover","_start","_selectCharacter","format","_end","mapycenter","popScene","_over","costa","_keyInput","_keyRotate","_inputLeft","_inputRight","_pointEnd","_createPointer","_rotatePointer","tcsr","pointer","_movePointer","_pointStart","_pointMove","_setupCommand","_removePointer","_endScene","toAngle","_direction","costd","startTuen","endTurn","runing","_balletCount","_startPhase","_addBallet","_removeBallet","_openPauseMenu","_startTurn","_endPhase","updateTurn","_endTurn","_isEnd","_isEndAllCharacterAction","flag","message","_openBattleEndMenu","setFriendsAndTargets","setNearTarget","_searchCharacters","rotatedir","searchTargets","searchFriends","findNearTarget","getHexPosition","nx","ny1","ny2","checkShotRange","checkMovePosition","getFrontPosition","getBackPosition","checkFrontPosition","checkBackPosition","setMoveCommand","args","slice","setShotCommand","setMoveBackCommand","num","setMoveFrontCommand","setRotateCommand","setDirectionCommand","Default","indexOf","Rule","caller","_caller","rules","rule","cond","main","CanvasApp","fitWindow","background","run"],"mappings":"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","file":"main.min.js","sourcesContent":["###*\n* @file System.coffee\n* システム情報\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nclass nz.System\n\n  title: 'Nineteen'\n  direction_num:\n    UP:         0\n    UP_RIGHT:   1\n    DOWN_RIGHT: 2\n    DOWN:       3\n    DOWN_LEFT:  4\n    UP_LEFT:    5\n  character:\n    directions: [\n      {name:'up'        , rotation:  -90, index:0, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\n      {name:'up_right'  , rotation:  -30, index:1, rotateIndex:[-1, 0, 1, 2, 3,-2]}\n      {name:'down_right', rotation:   30, index:2, rotateIndex:[-2,-1, 0, 1, 2, 3]}\n      {name:'down'      , rotation:   90, index:3, rotateIndex:[ 3,-2,-1, 0, 1, 2]}\n      {name:'down_left' , rotation:  150, index:4, rotateIndex:[ 2, 3,-2,-1, 0, 1]}\n      {name:'up_left'   , rotation: -150, index:5, rotateIndex:[ 1, 2, 3,-2,-1, 0]}\n      {name:'default'   , rotation:   90, index:6, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\n    ]\n    action_cost:\n      move:   1\n      rotate: 1\n      attack: 2\n      shot:   2\n    stamina_cost:\n      move:   1\n      rotate: 1\n      attack: 4\n      shot:   2\n  map:\n    chip:\n      width:  32\n      height: 32\n  screen:\n    width:  640\n    height: 480\n  dialog:\n    strokeStyle:'rgba(255,255,255,1.0)'\n    fillStyle:'rgba(128,128,128,1.0)'\n  assets:\n    chipdata: 'data/chipdata.json'\n    map_object: 'img/map_object.png'\n    map_chip: 'img/map_chip.png'\n    character_001:\n      type: 'tmss'\n      src: 'data/character_001.json'\n    character_test:\n      type: 'tmss'\n      src: 'data/character_test.json'\n  messages:\n    battle:\n      position:\n        setiing: '{name} の開始位置を選択してください。'\n\n  ###* 初期化\n  * @classdesc システムクラス\n  * @constructor nz.System\n  ###\n  constructor: () ->\n    @ai = {}\n    return\n\n  addAI: (name,ai) -> @ai[name] = ai\n\n  start: ->\n    @app.replaceScene nz.SceneTitleMenu()\n    return\n\n  restart: ->\n    @start()\n    return\n\n\nnz.system = new nz.System()\n",null,"# Utils.coffee\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\nDIRECTIONS = nz.system.character.directions\n\nclass nz.Utils\n\n  ###* オブジェクトマージ\n  * @param {Object} r 受け側オブジェクト\n  * @param {Object} o マージオブジェクト\n  ###\n  marge: (r,o) ->\n    for k,v of o\n      if typeof v is 'object'\n        if v instanceof Array\n          r[k] = [].concat v\n        else\n          r[k] = {} unless r[k]?\n          @marge r[k], v\n      else\n        r[k] = v\n    return r\n\n\n  ###* 経路探索\n  * @param {nz.Graph} graph  グラフ（マップ情報）\n  * @param {Object}   source 開始位置のキャラクター({mapx,mapy,direction})\n  * @param {Object}   target 終了位置のキャラクターか位置情報({mapx,mapy})\n  * @param {Array}    characters 配列({mapx,mapy})\n  * @param {Object}   [options] オプション\n  * @param {boolean}  [options.closest] 到達できない場合に近くまで探索する場合 true\n  * @param {Object}   [options.grid] グリッドオプション\n  * @return {Array}   ルート情報\n  ###\n  searchRoute: (graph, source, target, characters, options = {})->\n    unless options.grid?\n      options.grid = []\n    unless options.graph?\n      options.graph = {\n        cost: source.ap\n      }\n    unless options.closest?\n      options.closest = true\n\n    for c in characters when c.isAlive() and (source.mapx != c.mapx or source.mapy != c.mapy)\n      options.grid.push {\n        mapx: c.mapx\n        mapy: c.mapy\n        options: {\n          isWall: true\n        }\n      }\n\n    {direction,mapx,mapy} = source\n    return graph.searchRoute(direction, mapx, mapy, target.mapx, target.mapy, options)\n\n  ###* マップ座標をスクリーン座標へ変換\n  * @param {Object} p {mapx,mapy}\n  * @return {Object}  {x,y}\n  ###\n  mapxy2screenxy: (p) ->\n    if arguments.length == 2\n      p = {\n        mapx: arguments[0]\n        mapy: arguments[1]\n      }\n    # origin があるから、0.5 ずらす\n    r = {\n      x: p.mapx * MAP_CHIP_W + MAP_CHIP_W * 0.5\n      y: p.mapy * MAP_CHIP_H + MAP_CHIP_H * 0.5\n    }\n    r.y += MAP_CHIP_H * 0.5 if p.mapx % 2 == 0\n    return r\n\n  ###* スクリーン座標をマップ座標へ変換\n  * @param {Object} p {x,y}\n  * @return {Object}  {mapx,mapy}\n  ###\n  screenxy2mapxy: (p) ->\n    if arguments.length == 2\n      p = {\n        x: arguments[0]\n        y: arguments[1]\n      }\n    mapx = Math.floor p.x / MAP_CHIP_W\n    if mapx % 2 == 0\n      mapy = Math.floor (p.y - MAP_CHIP_H * 0.5) / MAP_CHIP_H\n    else\n      mapy = Math.floor p.y / MAP_CHIP_H\n    mapx = 0 if mapx < 0\n    mapy = 0 if mapy < 0\n    return {\n      mapx: mapx\n      mapy: mapy\n    }\n\n  relativeRotation: (rotation,p1,p2) ->\n    r = 0\n    if p2?\n      r = Math.radToDeg(Math.atan2 p2.y - p1.y, p2.x - p1.x)\n    else\n      r = p1 % 360\n    r = r - rotation\n    if r > 180\n      r -= 360\n    else if r < -180\n      r += 360\n    return r\n\n  lineRoute: (p1,p2) ->\n    ret = [{\n      mapx: p1.mapx\n      mapy: p1.mapy\n    }]\n    dx = p2.mapx - p1.mapx\n    dy = p2.mapy - p1.mapy\n    hx = if dx < 0 then -1 else 1\n    hy = if dy < 0 then -1 else 1\n    ax = Math.abs dx\n    ay = Math.abs dy\n    if ax < ay\n      sx = if ay is 0 then hx else dx / ay\n      sy = if dy < 0 then -1 else 1\n      for y in [1 .. ay]\n        p = {\n          mapx: p1.mapx + sx * y\n          mapy: p1.mapy + sy * y\n        }\n        p.mapx = Math.round(p.mapx)\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\n          ret.push {\n            mapx: p.mapx - hx\n            mapy: p.mapy\n          }\n        ret.push p\n    else\n      sx = if dx < 0 then -1 else 1\n      sy = if ax is 0 then hy else dy / ax\n      for x in [1 .. ax]\n        p = {\n          mapx: p1.mapx + sx * x\n          mapy: p1.mapy + sy * x\n        }\n        p.mapy -= 0.5 if p.mapx % 2 == 0\n        p.mapy = Math.round(p.mapy)\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\n          ret.push {\n            mapx: p.mapx\n            mapy: p.mapy - hy\n          }\n        ret.push p\n    return ret\n    \n\n  ###* 座標方向確認。\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\n  * @param {Object}   param\n  * @param {number}   param.rotation キャラクターの向いている方向\n  * @param {number}   param.source   キャラクターの座標(x,y)\n  * @param {number}   param.target   ターゲット座標(x,y)\n  * @param {number}   param.start    確認する開始角度 -180 ～ 180\n  * @param {number}   param.end      確認する終了角度 -180 ～ 180\n  * @param {boolean}  param.anticlockwise range 方向(true 反時計回り)\n  * @param {Function} param.callback チェック結果をもらう関数\n  ###\n  checkDirectionRange: (param) ->\n    {\n      rotation\n      source\n      target\n      callback\n    } = param\n    {\n      start\n      end\n      anticlockwise\n    } = param.range\n    rotation = DIRECTIONS[source.direction].rotation unless rotation?\n    r = nz.utils.relativeRotation(rotation,source,target)\n    r1 = if anticlockwise then end   else start\n    r2 = if anticlockwise then start else end\n    res = false\n    if r1 < r2\n      res = r1 <= r and r <= r2\n    else\n      res = r1 <= r or  r <= r2\n    if callback?\n      unless res\n        ra = r1 if r1 > r\n        ra = r2 if r  > r2\n      else\n        ra = r\n      callback(res,ra)\n    return res\n\nnz.utils = new nz.Utils()\n","###*\n* @file Graph.coffee\n* A*用グラフクラス\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\n_NEIGHBORS = [\n  [\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\n    [[ 1, 0, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 1, 1]]\n    [[ 1, 1, 2],[ 0, 0, 1],[ 0, 0, 3],[-1, 0, 2]]\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\n    [[-1, 1, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1, 0, 4]]\n    [[-1, 0, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 1, 5]]\n  ]\n  [\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\n    [[ 1,-1, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 0, 1]]\n    [[ 1, 0, 2],[ 0, 0, 1],[ 0, 0, 3],[-1,-1, 2]]\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\n    [[-1, 0, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1,-1, 4]]\n    [[-1,-1, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 0, 5]]\n  ]\n]\n\nclass nz.Graph\n\n  ###* コンストラクタ.\n  * @classdesc A*用グラフクラス\n  * @constructor nz.Graph\n  ###\n  constructor: (param = {}) ->\n    {\n      mapdata\n      chipdata\n    } = param\n    @nodes = []\n    @grid = []\n    @grid[x] = [] for x in [0...mapdata.width]\n    for y in [0...mapdata.height]\n      for x in [0...mapdata.width]\n        unless y == mapdata.height - 1 and x % 2 == 0\n          chipid = mapdata.data[y][x]\n          node = new nz.GridNode(x,y,chipdata[chipid])\n          @grid[x][y] = node\n          @nodes.push(node)\n    @clear()\n\n  ###* クリア\n  * @memberof nz.Graph#\n  * @method clear\n  ###\n  clear: ->\n    @cleanWrap()\n    for node in @nodes\n      node.clean()\n    return\n\n  ###* ダーティノードの削除\n  * @memberof nz.Graph#\n  * @method cleanDirty\n  ###\n  cleanDirty: ->\n    return\n\n  ###* ダーティノードのマーク\n  * @memberof nz.Graph#\n  * @method markDirty\n  * @param {Object} node\n  ###\n  markDirty: (node) ->\n    return\n\n  ###* ラップクラスの削除\n  * @memberof nz.Graph#\n  * @method cleanWrap\n  ###\n  cleanWrap: ->\n    @wrapNodes = {}\n    return\n\n  ###* ラップクラスの取得\n  * @memberof nz.Graph#\n  * @method getWrap\n  ###\n  getWrap: (x,y,d) ->\n    key = \"#{x}-#{y}\"\n    if @wrapNodes[key]?\n      return @wrapNodes[key]\n    unless d?\n      unless @wrapNodes[key]?\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y])\n        astar.cleanNode(@wrapNodes[key])\n    else\n      key = \"#{x}-#{y}-#{d}\"\n      unless @wrapNodes[key]?\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y],d)\n        astar.cleanNode(@wrapNodes[key])\n    @wrapNodes[key]\n\n\n  neighbors: (w) ->\n    #self = @\n    #return _NEIGHBORS[w.mapx % 2][w.direction]\n    #  .filter (o) ->\n    #    [x,y,d] = o\n    #    self.grid[x + w.mapx]?[y + w.mapy]?\n    #  .map (o) ->\n    #    [x,y,d] = o\n    #    self.getWrap(x + w.mapx,y + w.mapy,d)\n    #ret = []\n    #for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction]\n    #  x += w.mapx\n    #  y += w.mapy\n    #  if @grid[x]?[y]?\n    #    ret.push @getWrap(x,y,d)\n    #return ret\n    for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction] when @grid[x + w.mapx]?[y + w.mapy]?\n      @getWrap(x + w.mapx, y + w.mapy, d)\n\n  toString: ->\n    graphString = []\n    for nodes in @grid\n      rowDebug = []\n      for node in nodes\n        rowDebug.push(node.weight)\n      graphString.push(rowDebug.join(\" \"))\n    return graphString.join(\"\\n\")\n\n  searchRoute: (sd,sx,sy,ex,ey,op={}) ->\n    route = []\n    start = @getWrap sx,sy,sd\n    end   = @getWrap ex,ey\n    # 壁じゃなかったら探索\n    if (not end.isWall()) or op.closest\n\n      unless op.closest?\n        op.closest = false\n      unless op.heuristic?\n        op.heuristic = nz.Graph.heuristic\n      unless op.grid?\n        op.grid = []\n\n      for g in op.grid\n        @grid[g.mapx][g.mapy].options = g.options\n      if op.graph?\n        @options = op.graph\n\n      result = astar.search(@, start, end, op)\n      pd = sd\n      for wrap in result\n        route.push {\n          mapx: wrap.mapx\n          mapy: wrap.mapy\n          cost: wrap.g\n          back: wrap.back\n          direction: if wrap.direction < 0 then pd else wrap.direction\n        }\n        pd = wrap.direction\n      for g in op.grid\n        @grid[g.mapx][g.mapy].options = undefined\n      @options = undefined\n    @cleanWrap()\n    return route\n\nnz.Graph.heuristic = (wrap1,wrap2) ->\n  hx = Math.abs(wrap1.mapx - wrap2.mapx)\n  hy = Math.abs(wrap1.mapy - wrap2.mapy)\n  #hr = Math.floor(hx / 2)\n  hr = Math.ceil(hx / 2)\n  direction = wrap1.node.calcDirectionTo(wrap2)\n  hd = nz.Graph.directionCost(wrap1.direction,direction)\n  if hy == hr\n    hy = 0\n  else if hy < hr\n    if hy != 0\n      hy = 1\n      if hd == 1\n        hd = 0\n  else\n    hy -= hr\n  #console.log \"#{wrap1.mapx} #{wrap1.mapy} #{wrap2.mapx} #{wrap2.mapy} #{hx} #{hy} #{hd} #{direction}\"\n  hx + hy + hd\n\n###* 対象の方向\n* @param {Object} c1 元\n* @param {Object} c2 対象\n###\nnz.Graph.direction = (c1,c2) ->\n  dis = nz.Graph.distance c1,c2\n  r   = Math.floor(dis / 2)\n  dir = 0\n  if (c2.mapx - r) <= c1.mapx and c1.mapx <= (c2.mapx + r)\n    dir = 0 if c1.mapy > c2.mapy\n    dir = 3 if c1.mapy < c2.mapy\n  else if c1.mapx > c2.mapx # 左側\n    if c1.mapy == c2.mapy\n      dir = if c1.mapx % 2 == 0 then 5 else 4\n    else if c1.mapy > c2.mapy\n      dir = 5\n    else if c1.mapy < c2.mapy\n      dir = 4\n  else if c1.mapx < c2.mapx # 右側\n    if c1.mapy == c2.mapy\n      dir = if c1.mapx % 2 == 0 then 1 else 2\n    else if c1.mapy > c2.mapy\n      dir = 1\n    else if c1.mapy < c2.mapy\n      dir = 2\n  return dir\n\n###* 距離\n* @param {Object} c1 元\n* @param {Object} c2 対象\n###\nnz.Graph.distance = (c1,c2) ->\n  hx = Math.abs(c1.mapx - c2.mapx)\n  hy = Math.abs(c1.mapy - c2.mapy)\n  hr = Math.ceil(hx / 2)\n  return hx if hy < hr\n  if hx % 2 == 1\n    if c1.mapx % 2 == 1\n      if c1.mapy <= c2.mapy\n        hy += 1\n    else\n      if c1.mapy >= c2.mapy\n        hy += 1\n  return hx + hy - hr\n\n###* 方向転換にかかるコストを計算\n* @param {number} direction1 方向1\n* @param {number} direction2 方向2\n###\nnz.Graph.directionCost = (direction1,direction2) ->\n  Math.abs(3 - Math.abs((direction2 - direction1 - 3) % 6))\n\n# mapx = _FRONT_POS[mapx % 2][direction][0]\n# mapy = _FRONT_POS[mapx % 2][direction][1]\n_FRONT_POS = [\n  [[ 0,-1],[ 1, 0],[ 1, 1],[ 0, 1],[-1, 1],[-1, 0]]\n  [[ 0,-1],[ 1,-1],[ 1, 0],[ 0, 1],[-1, 0],[-1,-1]]\n]\n\n###* 向いている目の前の座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @return {Object} 目の前の座標\n###\nnz.Graph.frontPosition = (p) ->\n  d = (p.direction + 6) % 6\n  t = p.mapx % 2\n  return {\n    mapx:      p.mapx + _FRONT_POS[t][d][0]\n    mapy:      p.mapy + _FRONT_POS[t][d][1]\n    direction: d\n  }\n\n###* 向いている方向に対する後ろの座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @return {Object} 後ろの座標\n###\nnz.Graph.backPosition = (p) ->\n  r = nz.Graph.frontPosition {\n    mapx: p.mapx\n    mapy: p.mapy\n    direction: p.direction + 3\n  }\n  r.direction = p.direction\n  return r\n\n###* ヘックス状のライン座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @param {number} p.distance  距離\n* @return {Array<Object>} 座標配列\n###\nnz.Graph.hexLine = (p) ->\n  for n in [0 ... p.distance]\n    p = @frontPosition(p)\n\n###* 方向に対する座標エリアを取得する。\n* 時計まわりに３０度のエリアを探す。\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @param {number} p.distance  距離\n* @return {Array<Object>} 座標配列\n###\nnz.Graph.frontArea = (p) ->\n  r = []\n  for a,i in @hexLine(p)\n    r.push a\n    a.direction += 2\n    a.distance = i + 1\n    Array.prototype.push.apply r, @hexLine(a)\n  return r\n","###*\n* @file GridNode.coffee\n* A*用ノードクラス\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nclass nz.GridNodeWrap\n  constructor: (node, direction=-1) ->\n    @node      = node\n    @direction = direction\n    @back      = false\n\n  clean: -> @node.clean()\n\n  ###*\n  * 自分のノードに、指定されたノードから移動する（入る）場合のコスト\n  * @param wrap {nz.GridNodeWrap} 移動元ノード\n  ###\n  getCost: (wrap) ->\n    cost = @node.weight\n    if @mapx is wrap.mapx and @mapy is wrap.mapy\n      # 方向転換のコスト（１づつ方向転換するからコストは1）\n      cost = 1\n    else if nz.Graph.direction(@,wrap) is wrap.direction\n      cost += 1\n      @back = true\n    return cost\n\n  isWall: -> @node.isWall()\n\nObject.defineProperty nz.GridNodeWrap.prototype,'mapx',\n  get: -> @node.mapx\n  enumerable: true\nObject.defineProperty nz.GridNodeWrap.prototype,'mapy',\n  get: -> @node.mapy\n  enumerable: true\n\nclass nz.GridNode\n\n  ###*\n  * @param {Object} chipdata\n  * @param {number} chipdata.weight\n  * @param {number} chipdata.frame\n  * @param {string} chipdata.name\n  ###\n  constructor: (mapx, mapy, chipdata={weight:0}) ->\n    @mapx = mapx\n    @mapy = mapy\n    {\n      @weight\n      @frame\n      @name\n      @object\n    } = chipdata\n    @clean()\n\n  clean: ->\n    return\n\n  toString: -> \"[#{@mapx},#{@mapy}]\"\n\n  ###*\n  * 指定されたノードが、自分から見てどの方向にあるか\n  * @param node {GridNode|GridNodeWrap} 調査対象ノード\n  ###\n  calcDirection:   (node) -> nz.Graph.direction(@,node)\n  calcDirectionTo: (node) -> nz.Graph.direction(@,node)\n  calcDirectionBy: (node) -> nz.Graph.direction(node,@)\n\n  ###*\n  * 壁判定\n  ###\n  isWall: -> @weight is 0 or @options?.isWall\n","###*\n* @file Character.coffee\n* キャラクター情報\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nDIRECTIONS = nz.system.character.directions\nACTION_COST = nz.system.character.action_cost\n\nclass nz.Character\n\n  ###* 初期化\n  * @classdesc キャラクタークラス\n  * @constructor nz.Character\n  ###\n  constructor: (param = {}) ->\n    # 色変えする場合\n    nz.utils.marge @, {\n      name: 'テストキャラクター'\n      spriteSheet: 'character_test'\n      team: 'teamA'\n      colorChanges: [\n        # {from:[255,255,255],to:[255,0,0]}\n      ]\n      ai:\n        name: 'Default'\n        # src: 'nz/ai/Default.js'\n      maxhp: 10\n      maxsp: 100\n      maxap: 6\n      hp: 10\n      sp: 100\n      mapx: -1\n      mapy: -1\n      direction: 0\n      move:\n        speed: 300\n      armor:\n        defense: 1\n      weapon:\n        damage: 4\n        height: 48\n        width: 12\n        range:\n          start: 0\n          end: 120\n          anticlockwise: false\n        speed: 600\n      shot:\n        damage: 2\n        range:\n          start: 0\n          end: -120\n          anticlockwise: true\n        distance: 32 * 8\n        speed: 100\n    }\n    nz.utils.marge @, param\n    if @teamColor\n      @colorChanges.push {\n        from: [255,255,255]\n        to: @teamColor\n      }\n    @commands = [] # 戦闘コマンドリスト\n    return\n\n  _command: (i) ->\n    i = @commands.length - 1 unless i?\n    unless @commands[i]?\n      @commands[i] = {}\n      @clearCommand i\n    @commands[i]\n\n  ###* AI用キャラクター情報\n  * @param {number} i 戦闘ターン数\n  * @return {nz.Character} AI用のキャラクターインスタンス\n  * @memberof nz.Character#\n  * @method createAiInfo\n  ###\n  createAiInfo: (i) ->\n    info = {\n      name:      @name\n      maxhp:     @maxhp\n      maxsp:     @maxsp\n      maxap:     @maxap\n      hp:        @hp\n      sp:        @sp\n      mapx:      @mapx\n      mapy:      @mapy\n      direction: @direction\n      team:      @team\n    }\n    info.move   = nz.utils.marge {}, @move\n    info.weapon = nz.utils.marge {}, @weapon\n    info.shot   = nz.utils.marge {}, @shot\n    info.ai     = nz.utils.marge {}, @ai\n    return new nz.Character(info)\n\n  ###* コマンド削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearCommand\n  ###\n  clearCommand: (i) ->\n    command = @_command i\n    command.attack = false\n    command.actions = []\n    command.cost = 0\n    return\n\n  ###* 移動コマンド削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearMoveCommand\n  ###\n  clearMoveCommand: (i) ->\n    command = @_command i\n    actions = []\n    for action in command.actions\n      if action.move? or action.rotate?\n        command.cost -= action.cost\n      else\n        actions.push action\n    command.actions = actions\n    return\n\n  ###* 攻撃コマンドを削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearAttackCommand\n  ###\n  clearAttackCommand: (i) ->\n    command = @_command i\n    unless command.attack\n      return @\n    command.cost -= ACTION_COST.attack\n    command.attack = false\n    return @\n\n  ###* 射撃コマンドを削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearShotCommand\n  ###\n  clearShotCommand: (i) ->\n    command = @_command i\n    actions = []\n    for action in command.actions\n      if action.shot?\n        command.cost -= action.cost\n      else\n        actions.push action\n    command.actions = actions\n    return\n\n  ###* アクションコストを取得\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method getActionCost\n  ###\n  getActionCost: (i) -> @_command(i).cost\n\n  ###* 残りのアクションポイントを取得\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method getRemnantAp\n  ###\n  getRemnantAp: (i) -> @maxap - @getActionCost(i)\n\n  getLastDirection: (i) ->\n    command = @_command i\n    direction = @direction\n    for a in command.actions when a.rotate?\n      direction = a.rotate.direction\n    return direction\n\n  getLastPosition: (i) ->\n    command = @_command i\n    pos =\n      mapx: @mapx\n      mapy: @mapy\n    for a in command.actions when a.move?\n      pos = a.move\n    return pos\n\n  ###* 移動コマンドを追加\n  * @param {number} i 戦闘ターン数\n  * @param {Array} route 移動ルート\n  * @memberof nz.Character#\n  * @method addMoveCommand\n  ###\n  addMoveCommand: (i,route) ->\n    command   = @_command i\n    direction = @getLastDirection(i)\n    prev = command.cost\n    cost = 0\n    for r in route when prev + cost <= @maxap\n      if direction != r.direction\n        @addRotateCommand i, direction, DIRECTIONS[direction].rotateIndex[r.direction]\n        direction = r.direction\n      else\n        r.speed = @move.speed\n        if r.back\n          r.speed *= 2\n        command.actions.push\n          move: r\n          cost: r.cost - cost\n      cost = r.cost\n    command.cost = prev + cost\n    return @\n\n  ###* 方向転換コマンドを追加\n  * @param {number} i 戦闘ターン数\n  * @param {number} direction1 元の向き\n  * @param {number} rotateIndex 方向転換する量(マイナスは反時計回り)\n  * @memberof nz.Character#\n  * @method addRotateCommand\n  ###\n  addRotateCommand:  (i,direction1,rotateIndex) ->\n    command = @_command i\n    for i in [0 .. rotateIndex] when i != 0\n      command.actions.push\n        rotate:\n          direction: (direction1 + i + 6) % 6\n          speed: @move.speed\n        cost: ACTION_COST.rotate\n      command.cost += ACTION_COST.rotate\n    return @\n\n  ###* 攻撃コマンドを設定\n  * @param {number}  i    戦闘ターン数\n  * @memberof nz.Character#\n  * @method setAttackCommand\n  ###\n  setAttackCommand: (i) ->\n    if @isShotCommand i\n      return @\n    command = @_command i\n    if command.attack\n      return @\n    if @maxap >= ACTION_COST.attack\n      command.cost += ACTION_COST.attack\n      command.attack = true\n    return @\n\n  ###* 射撃コマンドを追加\n  * @param {number} i        戦闘ターン数\n  * @param {number} rotation 射撃角度\n  * @memberof nz.Character#\n  * @method addShotCommand\n  ###\n  addShotCommand: (i,rotation) ->\n    if @isAttackCommand i\n      return @\n    command = @_command i\n    command.actions.push\n      shot:\n        rotation: rotation\n        distance: @shot.distance\n        speed: @shot.speed\n      cost: ACTION_COST.shot\n    command.cost += ACTION_COST.shot\n    return @\n\n  ###* 射撃コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 射撃コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isShotCommand\n  ###\n  isShotCommand: (i) -> @_command(i).actions.some (action) -> action.shot?\n\n  ###* 攻撃コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 攻撃コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isAttackCommand\n  ###\n  isAttackCommand: (i) -> @_command(i).attack\n\n  ###* 移動コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 移動コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isMoveCommand\n  ###\n  isMoveCommand: (i) -> @_command(i).actions.some (action) -> action.move?\n\n  ###* 死亡判定\n  * @return {boolean} 死んでいる場合 true\n  * @memberof nz.Character#\n  * @method isDead\n  ###\n  isDead: -> @hp <= 0\n\n  ###* 生存判定\n  * @return {boolean} 生きている場合 true\n  * @memberof nz.Character#\n  * @method isAlive\n  ###\n  isAlive: -> @hp > 0\n","###*\n* @file SpriteBattleMap.coffee\n* 戦闘マップスプライト\n###\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\n\ntm.define 'nz.SpriteBattleMap',\n  superClass: tm.display.CanvasElement\n\n  ###* 初期化\n  * @classdesc 戦闘マップスプライト\n  * @constructor nz.SpriteBattleMap\n  ###\n  init: (mapName) ->\n    @superInit()\n    @_chips  = []\n    @_blinks = []\n    @_activeBlinks = []\n    @characterSprites = []\n\n    @map = tm.asset.Manager.get(mapName).data\n\n    @graph = new nz.Graph\n      mapdata: @map\n      chipdata: tm.asset.Manager.get('chipdata').data\n\n    @width  = @map.width  * MAP_CHIP_W\n    @height = @map.height * MAP_CHIP_H\n    for mapx in [0...@map.width]\n      h = if mapx % 2 != 0 then @map.height else @map.height - 1\n      for mapy in [0...h]\n        @_initMapChip(mapx,mapy)\n\n    @cursor = @_createCursor().addChildTo(@)\n    @setCursorPosition @getMapChip(0,0)\n\n    @on 'startBattlePhase', (e) ->\n      @cursor.visible = false\n      return\n    @on 'endBattlePhase', (e) ->\n      @cursor.visible = true\n      return\n\n    @on 'input_up'     , @cursorUp\n    @on 'input_down'   , @cursorDown\n    @on 'input_left'   , @cursorLeft\n    @on 'input_right'  , @cursorRight\n    @on 'repeat_up'    , @cursorUp\n    @on 'repeat_down'  , @cursorDown\n    @on 'repeat_left'  , @cursorLeft\n    @on 'repeat_right' , @cursorRight\n\n    return\n\n  setCursorPosition: (param) ->\n    return unless param?\n    @cursor.mapx = param.mapx if param.mapx?\n    @cursor.mapy = param.mapy if param.mapy?\n    @cursor.x = param.x\n    @cursor.y = param.y\n    return\n\n  cursorUp: ->\n    {mapx,mapy} = @cursor\n    @setCursorPosition @getMapChip(mapx,mapy - 1)\n    return\n  cursorDown: ->\n    {mapx,mapy} = @cursor\n    @setCursorPosition @getMapChip(mapx,mapy + 1)\n    return\n  cursorLeft: ->\n    {mapx,mapy} = @cursor\n    chip = @getMapChip(mapx - 1,mapy)\n    unless chip?\n      chip = @getMapChip(mapx - 1,mapy - 1)\n    @setCursorPosition chip\n    return\n  cursorRight: ->\n    {mapx,mapy} = @cursor\n    chip = @getMapChip(mapx + 1,mapy)\n    unless chip?\n      chip = @getMapChip(mapx + 1,mapy - 1)\n    @setCursorPosition chip\n    return\n\n  # 指定された座標のキャラクターを探す\n  findCharacter: (mapx,mapy) ->\n    res = []\n    for character in @characterSprites\n      if character.mapx == mapx and character.mapy == mapy\n        res.push character\n    return res\n  findCharacterGhost: (mapx,mapy) ->\n    res = []\n    for character in @characterSprites\n      if character.ghost?.mapx == mapx and character.ghost?.mapy == mapy\n        res.push character.ghost\n    return res\n\n  _createCursor: ->\n    cursor = tm.display.Shape(\n      x:           0\n      y:           0\n      width:       MAP_CHIP_W\n      height:      MAP_CHIP_H\n      strokeStyle: 'red'\n      lineWidth:   3\n      visible:     true\n    )\n    cursor._render = -> @canvas.strokeRect(0, 0, @width, @height)\n    cursor.render()\n    return cursor\n\n  # MapChip用イベントハンドラ\n  _dispatchMapChipEvent: (_e) ->\n    e = tm.event.Event('map.' + _e.type)\n    e.app = _e.app\n    e.pointing = _e.pointing\n    e.mapx = @mapx\n    e.mapy = @mapy\n    e.app.currentScene.dispatchEvent e\n    return\n\n  # 座標位置のマップチップを作成\n  _initMapChip: (mapx,mapy) ->\n    w = MAP_CHIP_W\n    h = MAP_CHIP_H\n    {\n      x\n      y\n    } = nz.utils.mapxy2screenxy(mapx,mapy)\n\n    # マップデータから座標位置のマップチップを取得する\n    node = @graph.grid[mapx][mapy]\n    frameIndex = node.frame\n\n    # TODO: マップごとに画像を変更したい\n    chip = tm.display.Sprite('map_chip',w,h)\n      .addChildTo(@)\n      .setPosition(x,y)\n      .setFrameIndex(frameIndex)\n      .setInteractive(true)\n      .setBoundingType('rect')\n      .on 'pointingstart', @_dispatchMapChipEvent\n      .on 'pointingover', @_dispatchMapChipEvent\n      .on 'pointingout', @_dispatchMapChipEvent\n      .on 'pointingend', @_dispatchMapChipEvent\n    chip.mapx = mapx\n    chip.mapy = mapy\n\n    chip.on 'pointingover', @setCursorPosition.bind @, chip\n\n    tm.display.Label(\"#{mapx},#{mapy}\",{fontSize:8}).setPosition(0,h/2-8).addChildTo(chip)\n\n    if node.object?\n      tm.display.Sprite('map_object',w,h*2)\n        .setOrigin(0.5,0.75)\n        .addChildTo(chip)\n        .setFrameIndex(node.object.frame)\n\n    blink = tm.display.RectangleShape(\n      width: w\n      height: h\n      strokeStyle: 'white'\n      fillStyle: 'white'\n    ).addChildTo(@)\n      .setPosition(x,y)\n      .setInteractive(true)\n      .setAlpha(0.0)\n      .setVisible(false)\n\n    @_chips[mapx] = [] unless @_chips[mapx]?\n    @_chips[mapx][mapy] = chip\n    @_blinks[mapx] = [] unless @_blinks[mapx]?\n    @_blinks[mapx][mapy] = blink\n    return\n\n  blink: (mapx,mapy) ->\n    blink = @_blinks[mapx]?[mapy]\n    if blink?\n      blink.visible = true\n      blink.tweener.clear().fade(0.5,300).fade(0.1,300).setLoop(true)\n      @_activeBlinks.push blink\n    return\n\n  clearBlink: ->\n    for blink in @_activeBlinks\n      blink.visible = false\n      blink.setAlpha(0.0)\n      blink.tweener.clear()\n    @_activeBlinks.clear()\n    return\n\n  isBlink: (mapx,mapy) -> @_blinks[mapx]?[mapy]?.visible\n\n  getMapChip: (mapx,mapy) -> @_chips[mapx]?[mapy]\n","###*\n* @file SpriteCharacter.coffee\n* キャラクタースプライト\n###\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\nDIRECTIONS = nz.system.character.directions\nST_COST    = nz.system.character.stamina_cost\n\ntm.define 'nz.SpriteCharacter',\n  superClass: tm.display.AnimationSprite\n\n  ###* 初期化\n  * @classdesc キャラクタースプライトクラス\n  * @constructor nz.SpriteCharacter\n  * @param {nz.Character} character\n  ###\n  init: (@index,@character) ->\n    @superInit(@character.spriteSheet)\n\n    if @character.colorChanges?\n      @ss = tm.asset.SpriteSheet(@ss) # 複製…ちょっと無理やり感\n      w   = @ss.image.width\n      h   = @ss.image.height\n      bmp = @ss.image.getBitmap(0,0,w,h)\n      for c in @character.colorChanges\n        f = @_createColorFilter c.from, c.to\n        bmp.filter f if f?\n      @ss.image = tm.graphics.Canvas().resize(w,h).drawBitmap(bmp,0,0)\n\n    @checkHierarchy = true\n    @ghost = null\n\n    @body = tm.display.Shape(\n      width:  @width\n      height: @height\n    ).addChildTo @\n\n    @weapon = @createWeapon()\n    @weapon.on 'enterframe', @_enterframeWeapon.bind @\n\n    @setMapPosition @character.mapx, @character.mapy\n    @setDirection @character.direction\n\n    @on 'startBattlePhase', ->\n      @clearGhost()\n      return\n    @on 'endBattlePhase', ->\n      return\n    @on 'startBattleTurn', (e) ->\n      @startAction(e.turn)\n      @_weaponHitFlag = []\n      return\n    @on 'endBattleTurn', (e) ->\n      @update = null\n      @attack = false\n      return\n    @on 'addBallet', (e) ->\n      e.ballet.collision.add(@) if @ != e.owner and @isAlive()\n      return\n    @on 'hitWeapon', (e) ->\n      @_hitWeapon(e.owner)\n      return\n    @on 'hitBallet', (e) ->\n      @_hitBallet(e.owner,e.ballet)\n      return\n    @on 'deadCharacter', (e) ->\n      {\n        character\n      } = e\n      # TODO:アニメーション\n      if e.character is @character\n        @hide()\n      return\n    return\n\n  isGhost: () -> (@alpha == 0.5) # 半透明かどうかで判断\n  hasGhost: () -> @ghost != null\n\n  _createColorFilter: (a,b) ->\n    if b.length is 3\n      return {\n        calc: (pixel, index, x, y, bitmap) ->\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2]\n            bitmap.setPixelIndex(index, b[0], b[1], b[2])\n      }\n    if a.length is 4 and b.length is 4\n      return {\n        calc: (pixel, index, x, y, bitmap) ->\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2] and pixel[3] is a[3]\n            bitmap.setPixel32Index(index, b[0], b[1], b[2], b[3])\n      }\n    return undefined\n\n  createWeapon: ->\n    w = tm.display.RectangleShape(\n      width: @character.weapon.height\n      height: @character.weapon.width\n      strokeStyle: 'black'\n      fillStyle: 'red'\n    ).addChildTo @body\n      .setOrigin(0.0,0.5)\n      .setVisible(false)\n    w.checkHierarchy = true\n    return w\n\n  createGhost: (param) ->\n    {\n      direction\n      mapx\n      mapy\n    } = param\n    @clearGhost()\n    @ghost = nz.SpriteCharacter(@index,@character)\n      .setAlpha 0.5\n      .setMapPosition(mapx, mapy)\n      .setDirection(direction)\n    return @ghost\n\n  clearGhost: ->\n    if @ghost?\n      @ghost.remove()\n      @ghost = null\n    return\n\n  setMapPosition: (@mapx,@mapy) ->\n    {@x,@y} = nz.utils.mapxy2screenxy(@)\n    return @\n\n  setDirection: (@direction) ->\n    d = DIRECTIONS[@direction]\n    @body.rotation = d.rotation\n    @gotoAndPlay(d.name)\n    return @\n\n  updateBattle: ->\n    scene = @getRoot()\n    for enemy,i in scene.characterSprites when @index != i and enemy.isAlive()\n      @_updateAttack(enemy)\n    return\n\n  ###* 座標方向確認。\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\n  * @param {number} param.x          mapSprite の local X座標\n  * @param {number} param.y          mapSprite の local Y座標\n  * @param {number} param.start      確認する開始角度 -180 ～ 180\n  * @param {number} param.end        確認する終了角度 -180 ～ 180\n  * @param {Function} param.callback チェック結果をもらう関数\n  ###\n  checkDirection: (param) ->\n    {\n      r\n      start\n      end\n      anticlockwise\n      callback\n    } = param\n    r = nz.utils.relativeRotation(@body.rotation,@,param) unless r?\n    r1 = if anticlockwise then end   else start\n    r2 = if anticlockwise then start else end\n    res = false\n    if r1 < r2\n      res = r1 <= r and r <= r2\n    else\n      res = r1 <= r or  r <= r2\n    if callback?\n      ra = r\n      unless res\n        ra = r1 if r1 > r\n        ra = r2 if r  > r2\n      callback(res,ra)\n    return res\n\n  _checkAttackDirection: (p) ->\n    p.x -= @width  / 2\n    p.y -= @height / 2\n    return true if @checkDirection(p)\n    p.x += @width\n    return true if @checkDirection(p)\n    p.y += @height\n    return true if @checkDirection(p)\n    p.x -= @width\n    return true if @checkDirection(p)\n    return false\n\n  _updateAttack: (enemy) ->\n    return unless @attack\n    return if @character.team == enemy.character.team\n    cw = @character.weapon\n    distance = enemy.position.distance @position\n    if distance < (cw.height + @body.width / 2)\n      p = enemy.position.clone().$extend cw.range\n      if @_checkAttackDirection(p)\n        @_attackAnimation()\n        @attack = false\n    return\n\n  _enterframeWeapon: (e) ->\n    return unless @weapon.visible\n    scene = @getRoot()\n    for enemy,i in scene.characterSprites when @index != i and not @_weaponHitFlag[i]\n      if @_isHitWeapon(enemy)\n        enemy.flare 'hitWeapon', {owner: @}\n        @_weaponHitFlag[i] = true\n    return\n\n  _isHitWeapon: (enemy) ->\n    for w in [16 ... @weapon.width] by 8\n      rt = tm.geom.Vector2 0,0\n      rt.setDegree(@weapon.rotation + @body.rotation, w)\n      rt = @localToGlobal rt\n      if enemy.isHitPoint(rt.x,rt.y)\n        return true\n    return false\n\n  startAction: (turn) ->\n    @tweener.clear()\n    @move      = false\n    @attack    = false\n    @action    = true\n    @mapx      = @character.mapx\n    @mapy      = @character.mapy\n    @direction = @character.direction\n\n    command = @character.commands[turn]\n    if command?\n      @attack = command.attack\n      for action in command.actions\n        @_setShotAction(action.shot) if action.shot?\n        @_setMoveAction(action.move) if action.move?\n        @_setRotateAction(action.rotate) if action.rotate?\n        if @attack\n          @tweener.call @updateBattle,@,[]\n      @tweener.call @_endAction,@,[]\n    else\n      @_endAction()\n    return\n\n  applyPosition: ->\n    @character.mapx      = @mapx\n    @character.mapy      = @mapy\n    @character.direction = @direction\n    return\n\n  _endAction: ->\n    @applyPosition()\n    @move                = false\n    @action              = false\n    # まだ攻撃してない場合、攻撃をつづける\n    if @attack\n      @updateBattle()\n      @update = @updateBattle\n    @tweener.clear()\n    return\n\n  isMove: -> @move\n  isStop: -> not @move\n  isDead: -> @character.isDead()\n  isAlive: -> @character.isAlive()\n\n  _setShotAction: (param) ->\n    @tweener.call @_shotAnimation,@,[param]\n    @tweener.call @_fatigue,@,[ST_COST.shot]\n    return\n\n  _setMoveAction: (param) ->\n    @move = true\n    {\n      @mapx\n      @mapy\n      speed\n    } = param\n    {\n      x\n      y\n    } = nz.utils.mapxy2screenxy(@)\n    @tweener.move(x,y,speed)\n    @tweener.call @_fatigue,@,[ST_COST.move]\n    return\n\n  _setRotateAction: (param) ->\n    {\n      direction\n      speed\n    } = param\n    @tweener.wait speed\n    @tweener.call @setDirection,@,[direction]\n    @tweener.call @_fatigue,@,[ST_COST.rotate]\n\n  _attackAnimation: ->\n    # 攻撃アニメーション中は、アクションを続ける\n    action = @action\n    @action = true\n    finish = ->\n      @weapon.visible  = false\n      @weapon.rotation = 0\n      @tweener.play()\n      @action = action # 元の状態に\n      @_fatigue(ST_COST.attack)\n    @tweener.pause()\n    cw = @character.weapon\n    @weapon.visible = true\n    @weapon.rotation = cw.range.start\n    @weapon.tweener\n        .clear()\n        .wait 50\n        .rotate(cw.range.end,cw.speed)\n        .call finish,@,[]\n\n  _shotAnimation: (param) ->\n    {\n      rotation\n      distance\n      speed\n    } = param\n    scene = @getRoot()\n    bv = scene.mapSprite.globalToLocal @localToGlobal(@body.position)\n    ballet = tm.display.CircleShape(\n      x:      bv.x\n      y:      bv.y\n      width:  10\n      height: 10\n    ).addChildTo scene.mapSprite\n    angle = Math.degToRad(rotation)\n    vx = distance * Math.cos(angle) + bv.x\n    vy = distance * Math.sin(angle) + bv.y\n    speed = speed * distance / 32\n    info = {\n      ballet: ballet\n      owner: @\n    }\n    ｈ = scene.eventHandler\n    finish = ->\n      ballet.remove()\n      ｈ.removeBallet(info)\n    ballet.tweener\n      .move(vx,vy,speed)\n      .call finish, @, []\n    ballet.on 'collisionenter', (e) ->\n      e.other.flare 'hitBallet', info\n      ballet.tweener\n        .clear()\n        .call finish, @, []\n\n    ｈ.addBallet(info)\n    return\n\n  _deadAnimation: (param) ->\n    return\n\n  _hitBallet: (shooter,ballet) ->\n    @_damage(shooter.character.shot.damage - @character.armor.defense)\n    return\n\n  _hitWeapon: (attacker) ->\n    @_damage(attacker.character.weapon.damage - @character.armor.defense)\n    return\n\n  _damage: (n)->\n    return if n <= 0\n    @character.hp -= n\n    h = @getRoot().eventHandler\n    h.refreshStatus()\n    if @character.hp <= 0\n      h.deadCharacter(@character)\n    return\n\n  _fatigue: (n) ->\n    return if n <= 0\n    @character.sp -= n\n    h = @getRoot().eventHandler\n    h.refreshStatus()\n    return\n","###*\n* @file SpriteStatus.coffee\n* ステータス表示用スプライト\n###\n\nDIRECTIONS = nz.system.character.directions\n\ntm.define 'nz.SpriteStatus',\n  superClass: tm.display.CanvasElement\n\n  init: (param) ->\n    {\n      @index\n      @character\n      @characterSprite\n      @detail\n    } = param\n    @superInit()\n    @setOrigin(0.0,0.0)\n\n    @width          = 32 * 5\n    @height         = 32 * 2.5\n    @alpha          = 1.0\n    @boundingType   = 'rect'\n    @interactive    = true\n    @checkHierarchy = true\n    @bgColor        = 'blanchedalmond'\n\n    form =\n      children:\n        bg:\n          type:          'RoundRectangleShape'\n          width:         @width\n          height:        @height\n          strokeStyle:   'black'\n          fillStyle:     @bgColor\n          lineWidth:     1\n          shadowBlur:    1\n          shadowOffsetX: 2\n          shadowOffsetY: 2\n          shadowColor:   'gray'\n          originX:       @originX\n          originY:       @originY\n        name: @_label\n          text:          @character.name\n          fontSize:      8\n          fillStyle:     'black'\n          stroke:        false\n          x:             8\n          y:             10\n        action: @_label\n          text:          ''\n          fontSize:      8\n          fillStyle:     'black'\n          stroke:        false\n          x:             8\n          y:             20\n        hpGauge: @_gauge\n          y:             38\n          color:         'Green'\n          _maxValue:     @character.maxhp\n        spGauge: @_gauge\n          y:             50\n          color:         'DarkSlateBlue'\n          _maxValue:     @character.maxsp\n        hpLabel: @_label\n          text:          'HP'\n          fontSize:      12\n          x:             10\n          y:             38 - 6\n        spLabel: @_label\n          text:          'SP'\n          fontSize:      12\n          x:             10\n          y:             50 - 6\n    #if @detail\n    #  form.children.apGauge =\n    #    type:          'tm.ui.GlossyGauge'\n    #    x:             8\n    #    y:             48\n    #    width:         @width - 16\n    #    height:        4\n    #    originX:       @originX\n    #    originY:       @originY\n    #    borderWidth:   1\n    #    color:         'red'\n    #    bgColor:       @bgColor\n    #    borderColor:   gaugebBrderColor\n    #    animationFlag: false\n    #    _maxValue:     @character.maxap\n    @fromJSON form\n\n    @sprite = tm.display.AnimationSprite(@characterSprite.ss).addChildTo @\n    @sprite.x = @width - 40\n    @sprite.y = 10\n    @sprite.setScale(0.5,0.5)\n    @sprite.setOrigin(0.0,0.0)\n\n    @on 'refreshStatus', @refreshStatus\n\n    @eventHandler = nz.EventHandlerBattle()\n    @on 'pointingend', -> @eventHandler.selectStatus(status:@)\n\n  _gauge: (param) ->\n    {\n      type:          'tm.ui.GlossyGauge'\n      x:             8\n      y:             0\n      width:         @width - 16\n      height:        6\n      originX:       @originX\n      originY:       @originY\n      borderWidth:   1\n      color:         'green'\n      bgColor:       @bgColor\n      borderColor:   'gray'\n      animationTime: 1000\n    }.$extend param\n\n  _label: (param) ->\n    {\n      type:          'Label'\n      fillStyle:     'white'\n      strokeStyle:   'black'\n      lineWidth:     2\n      stroke:        true\n      align:         'left'\n      baseline:      'top'\n      originX:       @originX\n      originY:       @originY\n      fontSize:      12\n      text:          'null'\n    }.$extend param\n\n  refreshStatus: (param) ->\n    {\n      turn\n    } = param\n\n    @sprite.gotoAndPlay DIRECTIONS[@characterSprite.direction].name\n\n    @_refreshActionText turn\n\n    @hpGauge.value = @character.hp\n    @spGauge.value = @character.sp\n    # @apGauge.value = ap if @detail\n\n  _refreshActionText: (turn) ->\n    text = 'Action: '\n    if @detail\n      ap = @character.getRemnantAp(turn)\n      actions = []\n      actions.push 'Attack' if @character.isAttackCommand(turn)\n      actions.push 'Shot'   if @character.isShotCommand(turn)\n      actions.push 'Move'   if @character.isMoveCommand(turn)\n      text += actions.join(' & ')\n      text += \" (AP=#{ap})\"\n    else\n      text += '???'\n    @action.text = text\n","###*\n* @file EventHandlerBattle.coffee\n* 戦闘用イベントハンドラ\n###\n\ntm.define 'nz.EventHandlerBattle',\n\n  ###* 初期化\n  * @classdesc 戦闘用イベントハンドラ\n  * @constructor nz.EventHandlerBattle\n  ###\n  init: ->\n\n  _fireAll: (e,param={}) ->\n    app   = nz.system.app\n    scene = app.currentScene\n    if typeof e is 'string'\n      e       = tm.event.Event(e)\n      e.app   = app\n      e.scene = scene\n      e.turn  = scene.turn\n      e.$extend param\n    @_dispatchEvent(e,scene)\n    return\n\n  _dispatchEvent: (e,element) ->\n    if element.hasEventListener(e.type)\n      element.fire(e)\n    for child in element.children\n      @_dispatchEvent(e,child) if child?\n    return\n\n  refreshStatus: ->\n    @_fireAll('refreshStatus')\n    return\n\n  deadCharacter: (character) ->\n    @_fireAll('deadCharacter',character:character)\n    return\n\n  startBattlePhase: ->\n    @_fireAll('startBattlePhase')\n    return\n\n  endBattlePhase: ->\n    @_fireAll('endBattlePhase')\n    return\n\n  startBattleTurn: ->\n    @_fireAll('startBattleTurn')\n    return\n\n  endBattleTurn: ->\n    @_fireAll('endBattleTurn')\n    return\n\n  addBallet: (param) ->\n    @_fireAll('addBallet',param)\n    return\n\n  removeBallet: (param) ->\n    @_fireAll('removeBallet',param)\n    return\n\n  selectStatus: (param) ->\n    @_fireAll('selectStatus',param)\n    return\n","###*\n* @file SceneBase.coffee\n* シーンベース\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\n\ntm.define 'nz.SceneBase',\n  superClass: tm.app.Scene\n\n  init: ->\n    @superInit()\n    return\n\n  openMenuDialog: (param) ->\n    dlg = nz.SceneMenu(param)\n    @app.pushScene dlg\n    return dlg\n\n  description: (text) ->\n    unless @_description\n      @_description = tm.display.Label(\n        ''\n        14\n      ).addChildTo   @\n        .setAlign    'center'\n        .setBaseline 'middle'\n        .setPosition SCREEN_W / 2, SCREEN_H - 10\n    @_description.text = text\n\n  createKeyboradHander: ->\n    eventKeys      = ['up','down','left','right','enter']\n    repeatCount    = 0\n    repeatDelay    = 10\n    repeatIntarval = 0\n\n    return (e) ->\n      app = @app ? e.app\n      kb = app.keyboard\n      for key in eventKeys when kb.getKeyDown(key)\n        repeatCount = 0\n        @fire tm.event.Event('input_' + key)\n\n      for key in eventKeys when kb.getKey(key)\n        if repeatDelay < repeatCount++\n          @fire tm.event.Event('repeat_' + key)\n          repeatCount -= repeatIntarval\n\n  setupCursorHandler: (handler) ->\n    for k in ['up','down','left','right']\n      @on 'input_'  + k, handler\n      @on 'repeat_' + k, handler\n    return\n","###*\n* @file SceneMenu.coffee\n* メニューシーン\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\n\ntm.define 'nz.SceneMenu',\n  superClass: tm.ui.MenuDialog\n\n  init: (param) ->\n    param = {\n      self: @\n      screenWidth:  SCREEN_W\n      screenHeight: SCREEN_H\n    }.$extend param\n    @menuFunc  = (m.func for m in param.menu when m.func?)\n    param.menu = (m.name for m in param.menu when m.name?)\n    param.menuDesctiptions = (m.desctiption for m in param.menu when m.desctiption?)\n    @superInit(param)\n\n    @box.setStrokeStyle nz.system.dialog.strokeStyle\n    @box.setFillStyle   nz.system.dialog.fillStyle\n\n    index = null\n    @on 'menuselected', (e) ->\n      index = e.selectIndex\n      return\n    @on 'menuclosed', (e) ->\n      @menuFunc[index]?.call(param.self,index) if index?\n      return\n\n    @on 'enterframe', (e) ->\n      {app} = e\n      kb = app.keyboard\n      if kb.getKeyDown('up')\n        @up()\n      else if kb.getKeyDown('down')\n        @down()\n      else if kb.getKeyDown('enter')\n        @closeDialog(@_selected)\n      return\n\n    return\n\n  up: ->\n    @setIndex @_selected - 1\n    return\n  down: ->\n    @setIndex @_selected + 1\n    return\n\n  setIndex: (i) ->\n    @_selected = (i + @menu.length) % @menu.length\n    @selectValue = @menu[@_selected]\n    @selectIndex = @_selected\n    @dispatchEvent tm.event.Event('menuselect')\n    return\n","###*\n* @file SceneTitleMenu.coffee\n* タイトルシーン\n###\n\ntm.define 'nz.SceneTitleMenu',\n  superClass: nz.SceneBase\n\n  ###* 初期化\n  * @classdesc タイトルシーンクラス\n  * @constructor nz.SceneTitleMenu\n  ###\n  init: () ->\n    @superInit()\n\n    menu = [\n      {\n        name: 'New Game'\n        desctiption: '新しいゲームをはじめる'\n        func: @_new_game\n      }\n      {\n        name: 'Load Game'\n        desctiption: '保存したゲームをはじめる'\n        func: @_load_game\n      }\n      {\n        name: 'Option'\n        desctiption: 'ゲームオプション'\n        func: @_option\n      }\n      {\n        name: 'Debug Game'\n        desctiption: 'デバックゲーム'\n        func: @_debug_game\n      }\n    ]\n\n    @on 'enter', ->\n      scene = tm.game.TitleScene(title:nz.system.title)\n      scene.on 'enterframe', ->\n        if @app.keyboard.getKeyDown('enter')\n          @onpointingstart()\n      @app.pushScene scene\n\n    @on 'resume', ->\n      @openMenuDialog\n        self: @\n        title: nz.system.title\n        menu: menu\n\n    return\n\n  ###* 新しいゲームを開始\n  * @constructor nz.SceneTitleMenu#\n  ###\n  _new_game: ->\n    @app.replaceScene nz.SceneBattle(\n      mapId: 1\n      controlTeam: ['teamA']\n      characters: [\n        {name:'キャラクター1',team:'teamA'}\n        {name:'キャラクター2',team:'teamA'}\n        {name:'キャラクター3',team:'teamA'}\n        {name:'キャラクター4',team:'teamB'}\n        {name:'キャラクター5',team:'teamB'}\n        {name:'キャラクター6',team:'teamB'}\n      ]\n    )\n    return\n\n  ###* ゲームをロード\n  * @constructor nz.SceneTitleMenu#\n  ###\n  _load_game: ->\n    console.log 'load game'\n    return\n\n  ###* システムオプション\n  * @constructor nz.SceneTitleMenu#\n  ###\n  _option: ->\n    console.log 'option'\n    return\n\n  ###* 新しいゲームを開始\n  * @constructor nz.SceneTitleMenu#\n  ###\n  _debug_game: ->\n    @app.replaceScene nz.SceneBattle(\n      mapId: 0\n      controlTeam: ['teamA']\n      characters: [\n        #new nz.Character(\n        #  name:'キャラクター1'\n        #  team:'teamA'\n        #  spriteSheet:'character_test'\n        #  weapon:\n        #    damage: 20\n        #)\n        #new nz.Character(\n        #  name:'キャラクター2'\n        #  team:'teamA'\n        #  spriteSheet:'character_test'\n        #  ai:\n        #    name: 'Shooter'\n        #    src: 'nz/ai/Shooter.js'\n        #)\n        #new nz.Character(\n        #  name:'キャラクター3'\n        #  team:'teamA'\n        #  spriteSheet:'character_test'\n        #  ai:\n        #    name: 'Default'\n        #)\n        {\n          name:'キャラクター3'\n          team:'teamA'\n          spriteSheet:'character_test'\n          ai:\n            name: 'Runner'\n            src: 'nz/ai/Runner.js'\n        }\n        #new nz.Character(\n        #  name:'キャラクター4'\n        #  team:'teamB'\n        #  spriteSheet:'character_test'\n        #  ai:\n        #    name: 'Shooter'\n        #    src: 'nz/ai/Shooter.js'\n        #)\n        #new nz.Character(\n        #  name:'キャラクター5'\n        #  team:'teamB'\n        #  spriteSheet:'character_test'\n        #  ai:\n        #    name: 'Runner'\n        #    src: 'nz/ai/Runner.js'\n        #)\n        {\n          name:'キャラクター6'\n          team:'teamB'\n          spriteSheet:'character_test'\n          ai:\n            name: 'Shooter'\n            src: 'nz/ai/Shooter.js'\n        }\n      ]\n    )\n    return\n","###*\n* @file SceneBattle.coffee\n* 戦闘シーン\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\nDIRECTIONS  = nz.system.character.directions\nACTION_COST = nz.system.character.action_cost\n\ntm.define 'nz.SceneBattle',\n  superClass: nz.SceneBase\n\n  ###* 初期化\n  * @classdesc 戦闘シーンクラス\n  * @constructor nz.SceneBattle\n  ###\n  init: (param) ->\n    {\n      @mapId\n      @characters\n      @controlTeam\n      @endCondition\n    } = param\n    @superInit()\n    @mapName = 'map_' + \"#{@mapId}\".paddingLeft(3,'0')\n    @_selectCharacterIndex = 0\n\n    unless @endCondition?\n      @endCondition =\n        type: 'team'\n        turn: 20\n\n    for c,i in @characters\n      unless c instanceof nz.Character\n        @characters[i] = new nz.Character(c)\n\n    @data =\n      turn:   0    # 戦闘ターン数\n      winner: null\n      replay: null\n      startInfo: {}\n\n    @eventHandler = nz.EventHandlerBattle()\n\n    @on 'enter', @load.bind @\n    return\n\n  load: ->\n    loaded = true\n    assets = {}\n    unless tm.asset.Manager.contains(@mapName)\n      assets[@mapName] = \"data/#{@mapName}.json\"\n      loaded = false\n    for c in @characters when not tm.asset.Manager.contains(c.ai.name)\n      src = c.ai.src ? \"nz/ai/#{c.ai.name}.js\"\n      unless nz.system.ai[c.ai.name]?\n        assets[c.ai.name] = src\n        loaded = false\n\n    unless loaded\n      scene = tm.game.LoadingScene(\n        assets:  assets\n        width:   SCREEN_W\n        height:  SCREEN_H\n        autopop: true\n      )\n\n      scene.on 'load', @setup.bind @\n\n      @app.pushScene scene\n    else\n      @setup()\n    return\n\n  setup: ->\n    scene = @\n\n    # マップ\n    @mapSprite = nz.SpriteBattleMap(@mapName).addChildTo(@)\n    @mapSprite.x = (SCREEN_W - @mapSprite.width ) - 32\n    @mapSprite.y = (SCREEN_H - @mapSprite.height) / 2\n\n    # ステータスフォルダ\n    @status = tm.display.CanvasElement().addChildTo @\n\n    x = y = 0\n    for character,i in @characters\n      # キャラクター\n      sprite = nz.SpriteCharacter(i,character)\n        .setVisible(false)\n        .addChildTo(@mapSprite)\n      @characterSprites.push sprite\n\n      # ステータス\n      s = nz.SpriteStatus(\n        index: i\n        character: character\n        characterSprite: sprite\n        detail: @controlTeam.contains character.team\n      )\n      s.setPosition x, y\n      @status.addChildAt s, 0\n      y += 32 * 2.5 - 8\n\n    @on 'selectStatus', (e) ->\n      {\n        scene\n        status\n      } = e\n      scene.activeStatus status\n      scene.blinkCharacter status.index\n\n    # 基本操作\n    @on 'map.pointingend', @_mapPointingend\n\n    # 開始時位置決め\n    @one 'enterframe', ->\n      @_pushScene(\n        nz.SceneBattlePosition(\n          mapSprite: @mapSprite\n          controlTeam: @controlTeam\n        )\n      )\n      @one 'resume', ->\n        @data.startInfo.characters = []\n        for c in @characters\n          @data.startInfo.characters.push\n            mapx:      c.mapx\n            mapy:      c.mapy\n            direction: c.direction\n            hp:        c.hp\n            sp:        c.sp\n        @_startInputPhase()\n\n    @eventHandler.refreshStatus()\n\n    # イベント\n    @on 'enterframe'   , @createKeyboradHander()\n    @on 'input_enter'  , @inputEnter\n    @setupCursorHandler @cursorHandler\n    return\n\n  cursorHandler: (e) ->\n    @mapSprite.fire e\n\n  inputEnter: (e) ->\n    @_mapPointingend @mapSprite.cursor\n\n  _mapPointingend: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    @mapSprite.clearBlink()\n    targets = @mapSprite.findCharacterGhost(mapx,mapy)\n    for t in @mapSprite.findCharacter(mapx,mapy) when t.isAlive()\n      if not t.hasGhost() or t.ghost.mapx != mapx or t.ghost.mapy != mapy\n        targets.push t\n    targets = (t for t in targets when @controlTeam.contains t.character.team)\n    if targets.length == 0\n      @_openGameMenu()\n    else if targets.length == 1\n      @_openCommandMenu(targets[0])\n    else\n      @_openSelectCharacterMenu(targets)\n    return\n\n  activeStatus: (status) ->\n    @status.addChild status\n    return\n\n  blinkCharacter: (index) ->\n    s = @characterSprites[index]\n    @mapSprite.clearBlink()\n    @mapSprite.blink(s.mapx,s.mapy)\n    @mapSprite.blink(s.ghost.mapx,s.ghost.mapy) if s.hasGhost()\n    return\n\n  _createResultTimeup: ->\n    name = ''\n    score = 0\n    t = {}\n    for c in @characters when c.isAlive()\n      unless t[c.team]?\n        t[c.team] = c.hp\n      else\n        t[c.team] += c.hp\n      if score < t[c.team]\n        name  = c.team\n        score = t[c.team]\n    winner = [\n      {\n        name: name\n        score: score\n      }\n    ]\n    for k,v of t when name isnt k and score is v\n      winner.push\n        name: k\n        score: v\n    if winner.length is 1\n      @data.result =\n        winner: winner[0]\n    else\n      @data.result =\n        draw: winner\n    return\n\n  _createResultTeam: ->\n    # １チームが残っている場合に終了\n    t = null\n    for c in @characters when c.isAlive()\n      unless t?\n        t = c.team\n      else if t isnt c.team\n        return\n    @data.result = {\n      winner:\n        name: t\n    }\n    return\n\n  _createResult: ->\n    # 時間切れの場合\n    if @turn >= @endCondition.turn\n      @_createResultTimeup()\n      return\n    # 終了タイプがチームの場合\n    if @endCondition.type is 'team'\n      @_createResultTeam()\n      return\n    return\n\n  isEnd: -> @data.result?\n\n  _pushScene: (scene) ->\n    @eventHandler.refreshStatus()\n    @one 'pause',  ->\n      @mapSprite.addChildTo scene\n      @status.addChildTo scene\n      return\n    @one 'resume', ->\n      @mapSprite.addChildTo @\n      @status.addChildTo @\n      @eventHandler.refreshStatus()\n      return\n    @mapSprite.remove()\n    @status.remove()\n    @app.pushScene scene\n    return\n\n  _commandScene: (klass,callback) ->\n    target = @selectCharacterSprite\n    if @_selectGhost\n      target = @selectCharacterSprite.ghost\n    @_pushScene klass(\n      turn:       @turn\n      target:     target\n      callback:   callback\n      mapSprite:  @mapSprite\n      status:     @status\n      characters: @characters\n    )\n    @one 'resume', @_checkCommandConf.bind @\n    return\n\n  _openGameMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Command?'\n      menu: [\n        {name:'Next Turn', func: @_openTurnConfMenu}\n        {name:'Option',    func: -> return}\n        {name:'Exit Game', func: @_exitGame}\n        {name:'Close Menu'}\n      ]\n    return\n\n  _openSelectCharacterMenu: (targets) ->\n    menu = []\n    for t in targets\n      menu.push\n        name: t.character.name\n        func: (i) -> @_openCommandMenu targets[i]\n    menu.push {name: 'Close Menu'}\n    @openMenuDialog\n      self: @\n      title: 'Select Character'\n      menu: menu\n    return\n\n  _openCommandMenu: (target) ->\n    @_selectCharacterIndex = target.index\n    @_selectGhost          = target.isGhost()\n    @activeStatus(s) for s in @status.children when s.index == target.index\n    menu  = []\n    sc    = @selectCharacter\n    acost = sc.getActionCost(@turn)\n    rap   = sc.getRemnantAp(@turn)\n    # アクションの入力が可能かどうか。（ゴーストを選択しているか、ゴーストを選択してない場合は、ゴーストを持っていなければ、入力可能）\n    if @_selectGhost or (not @_selectGhost and not target.hasGhost())\n      if rap >= ACTION_COST.move\n        menu.push\n          name: 'Move'\n          func: @_addMoveCommand\n      if rap >= ACTION_COST.rotate\n        menu.push\n          name: 'Rotate'\n          func: @_addRotateCommand\n      if rap >= ACTION_COST.attack\n        attack = sc.isAttackCommand(@turn)\n        shot   = sc.isShotCommand(@turn)\n        if not attack and not shot\n          menu.push\n            name: 'Attack'\n            func: @_addAttackCommand\n          menu.push\n            name: 'Shot'\n            func: @_addShotCommand\n    if acost > 0\n      menu.push\n        name: 'Reset Action'\n        func: @_resetCommand\n    menu.push {name:'Close Menu'}\n    @openMenuDialog\n      self: @\n      title: sc.name\n      menu: menu\n    return\n\n  _openTurnConfMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Start Battle?'\n      menu: [\n        {name:'Yes',func: -> @_startBattlePhase() }\n        {name:'No'}\n      ]\n    return\n\n  _checkCommandConf: ->\n    for c in @characters when @controlTeam.contains(c.team) and c.isAlive()\n      if c.getRemnantAp(@turn) > 0\n        return\n    @_openTurnConfMenu()\n    return\n\n  _openResult: ->\n    @_pushScene nz.SceneBattleResult\n      mapSprite: @mapSprite\n      status: @status\n      data: @data\n    @one 'resume', ->\n      @_startReplay()\n      return\n    return\n\n  _startReplay: ->\n    return unless @data.replay?\n    si = @data.startInfo\n    for sc,i in @characterSprites\n      c    = sc.character\n      o    = si.characters[i]\n      c.hp = o.hp\n      c.sp = o.sp\n      sc.setMapPosition(o.mapx,o.mapy)\n      sc.setDirection(o.direction)\n      sc.applyPosition()\n      sc.show()\n    @_startBattlePhase(@data.replay)\n    return\n\n  _exitGame: ->\n    nz.system.restart()\n    return\n\n  _startInputPhase: () ->\n    @data.turn += 1\n    console.log \"battle turn #{@data.turn}\"\n    characters = @characters.map (c) -> c.createAiInfo()\n    for c,i in characters when not (@controlTeam.contains c.team) and c.isAlive()\n      nz.system.ai[c.ai.name]?.setupAction new nz.ai.Param(\n        character: c\n        characters: characters\n        graph: @mapSprite.graph\n        turn: @turn\n      )\n      @characters[i].commands[@turn] = c.commands[@turn]\n    @eventHandler.refreshStatus()\n\n    if @controlTeam.length is 0\n      @_startBattlePhase()\n\n  _startBattlePhase: (param) ->\n    {\n      start\n      end\n    } = {\n      start: @turn\n      end: @turn\n    }.$extend param\n    @_pushScene(\n      nz.SceneBattlePhase(\n        start: start\n        end: end\n        mapSprite: @mapSprite\n        status: @status\n      )\n    )\n    @one 'resume', ->\n      @_createResult()\n      if @isEnd()\n        @_openResult()\n      else\n        @_startInputPhase()\n    return\n\n  _addMoveCommand: ->\n    @_commandScene(\n      nz.SceneBattleMoveCommand\n      ((route) ->\n        sc = @selectCharacter\n        sc.addMoveCommand @turn, route\n        if route.length > 0\n          @selectCharacterSprite.createGhost(route[route.length-1]).addChildTo @mapSprite\n        if sc.getRemnantAp(@turn) > 0\n          @_selectGhost = true\n          @one 'enterframe', @_addRotateCommand\n        return\n      ).bind @\n    )\n    return\n\n  _addAttackCommand: ->\n    sc = @selectCharacter\n    sc.setAttackCommand @turn\n    scs = @selectCharacterSprite\n    if not scs.hasGhost() and not scs.isGhost()\n      scs.createGhost(scs).addChildTo @mapSprite\n    @eventHandler.refreshStatus()\n    if sc.getRemnantAp(@turn) > 0\n      @_selectGhost = true\n      @one 'enterframe', @_addMoveCommand\n    else\n      @_checkCommandConf()\n    return\n\n  _addShotCommand: ->\n    @_commandScene(\n      nz.SceneBattleShotCommand\n      ((rotation) ->\n        sc  = @selectCharacter\n        scs = @selectCharacterSprite\n        sc.addShotCommand @turn, rotation\n        if not scs.hasGhost() and not scs.isGhost()\n          scs.createGhost(scs).addChildTo @mapSprite\n        if sc.getRemnantAp(@turn) > 0\n          @_selectGhost = true\n          @one 'enterframe', @_addMoveCommand\n        return\n      ).bind @\n    )\n    return\n\n  _addRotateCommand: ->\n    @_commandScene(\n      nz.SceneBattleDirectionCommand\n      ((direction1,direction2) ->\n        sc  = @selectCharacter\n        scs = @selectCharacterSprite\n        sc.addRotateCommand @turn, direction1, DIRECTIONS[direction1].rotateIndex[direction2]\n        unless scs.hasGhost()\n          scs.createGhost(scs).addChildTo @mapSprite\n        scs.ghost.setDirection(direction2)\n        return\n      ).bind @\n    )\n    return\n\n  _resetCommand: ->\n    @selectCharacter.clearCommand()\n    @selectCharacterSprite.clearGhost()\n    @eventHandler.refreshStatus()\n    return\n\nnz.SceneBattle.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\nnz.SceneBattle.prototype.getter 'selectCharacterSprite', -> @characterSprites[@_selectCharacterIndex]\nnz.SceneBattle.prototype.getter 'selectCharacter', -> @selectCharacterSprite.character\nnz.SceneBattle.prototype.getter 'turn', -> @data.turn\n","###*\n* @file SceneBattlePosition.coffee\n* 戦闘開始位置設定\n###\n\nMSGS   = nz.system.messages\nDIRNUM = nz.system.direction_num\n\ntm.define 'nz.SceneBattlePosition',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @controlTeam\n    } = param\n\n    @otherTeam = []\n\n    @teamArea  = {}\n    @members   = {}\n\n    areaIndex  = 0\n    for c in @mapSprite.characterSprites\n      team = c.character.team\n      unless @members[team]?\n        @members[team]  = []\n        @teamArea[team] = @mapSprite.map.start.area[areaIndex].clone()\n        @otherTeam.push team unless @controlTeam.contains team\n        areaIndex += 1\n      @members[team].push c\n\n    # CPU側の位置設定\n    for team in @otherTeam\n      area    = @teamArea[team]\n      friends = (m.character for m in @members[team])\n      for m,i in @members[team]\n        c = m.character\n        p = nz.system.ai[c.ai.name]?.setupBattlePosition(\n          character: c\n          friends:   friends\n          area:      area\n        )\n        p = area[i] unless p?\n        @_setBattlePosition(m,p[0],p[1])\n        m.applyPosition()\n\n    @on 'map.pointingover', @_mapPointingover\n    @on 'map.pointingend',  @_mapPointingend\n    @on 'enter',            @_start\n\n    @on 'enterframe'   , @createKeyboradHander()\n    @on 'input_enter'  , @inputEnter\n    @setupCursorHandler @cursorHandler\n\n  cursorHandler: (e) ->\n    @mapSprite.fire e\n    @_mapPointingover @mapSprite.cursor\n\n  inputEnter: (e) ->\n    @_mapPointingend @mapSprite.cursor\n\n  _start: ->\n    for c in @mapSprite.characterSprites when (not c.visible) and @controlTeam.contains c.character.team\n      @_selectCharacter c\n      @description MSGS.battle.position.setiing.format name:c.character.name\n      return\n    @_end()\n    return\n\n  _end: ->\n    mapycenter = @mapSprite.map.width / 2\n    for c in @mapSprite.characterSprites\n      c.visible = true\n      if c.mapy < mapycenter\n        c.character.direction = DIRNUM.DOWN\n        c.setDirection(DIRNUM.DOWN)\n      else\n        c.character.direction = DIRNUM.UP\n        c.setDirection(DIRNUM.UP)\n    @mapSprite.clearBlink()\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _selectCharacter: (@character) ->\n    @mapSprite.clearBlink()\n    for m in @teamArea[@character.character.team]\n      if @mapSprite.findCharacter(m[0],m[1]).length == 0\n        @mapSprite.blink(m[0],m[1])\n\n  _setBattlePosition: (c,mapx,mapy) ->\n    c.setMapPosition mapx,mapy\n    if c.mapy < @mapSprite.map.width / 2\n      c.setDirection DIRNUM.DOWN\n    else\n      c.setDirection DIRNUM.UP\n    return\n\n  _mapPointingover: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    @_setBattlePosition(@character,mapx,mapy)\n    @character.applyPosition()\n    @mapSprite.cursor.visible = true\n    @character.visible = true\n    return\n\n  _mapPointingend: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    if @mapSprite.isBlink(mapx,mapy)\n      @_mapPointingover(param)\n      for team in @controlTeam\n        for c in @members[team] when not c.visible\n          @_start()\n          return\n      @_end()\n    return\n","###*\n* @file SceneBattleMoveCommand.coffee\n* 移動コマンド\n###\n\ntm.define 'nz.SceneBattleMoveCommand',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @turn\n      @target\n      @callback\n      @mapSprite\n      @characters\n    } = param\n\n    @on 'map.pointingover', @_over\n    @on 'map.pointingend', @_end\n\n    @on 'enterframe'   , @createKeyboradHander()\n    @setupCursorHandler (e) ->\n      @mapSprite.fire e\n      @_over @mapSprite.cursor\n    @on 'input_enter'  , @inputEnter\n\n  inputEnter: (e) ->\n    @_end @mapSprite.cursor\n\n  searchRoute: (e)->\n    op = {\n      graph:\n        cost: @target.character.getRemnantAp(@turn)\n    }\n    r = nz.utils.searchRoute(\n      @mapSprite.graph\n      @target\n      e\n      @characters\n      op\n    )\n    return r\n\n  _end: (e) ->\n    if @mapSprite.isBlink(e.mapx, e.mapy)\n      @callback @searchRoute(e)\n    @mapSprite.clearBlink()\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _over: (e) ->\n    @mapSprite.clearBlink()\n    ap = @target.character.getRemnantAp(@turn)\n    route = @searchRoute(e)\n    for r in route when r.cost <= ap\n      @mapSprite.blink(r.mapx,r.mapy)\n","###*\n* @file SceneBattleShotCommand.coffee\n* 射撃コマンドシーン\n###\n\ntm.define 'nz.SceneBattleShotCommand',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @turn\n      @target\n      @callback\n      @mapSprite\n    } = param\n\n    @costa = @target.character.getActionCost(@turn)\n\n    @_keyInput = true\n    @_keyRotate = 0\n    @on 'enterframe'  , @createKeyboradHander()\n    @on 'input_left'  , @_inputLeft\n    @on 'repeat_left' , @_inputLeft\n    @on 'input_right' , @_inputRight\n    @on 'repeat_right', @_inputRight\n    #@on 'input_enter'  , @inputEnter\n\n    @on 'map.pointingover', -> @_keyInput = false\n    @on 'map.pointingend',   @_pointEnd\n    @_createPointer()\n\n  _inputLeft: ->\n    @_keyInput = true\n    @_keyRotate -= 5\n    @_rotatePointer @_keyRotate\n    return\n\n  _inputRight: ->\n    @_keyInput = true\n    @_keyRotate += 5\n    @_rotatePointer @_keyRotate\n    return\n\n  _rotatePointer: (r) ->\n    if @pointer?\n      tcsr = @target.character.shot.range\n\n      r = nz.utils.relativeRotation(@target.body.rotation,r)\n      @target.checkDirection(\n        r:             r\n        start:         tcsr.start\n        end:           tcsr.end\n        anticlockwise: tcsr.anticlockwise\n        callback: ((result,ra) ->\n          ra += @target.body.rotation\n          unless result\n            @_keyRotate = ra\n          @pointer.rotation = ra\n        ).bind @\n      )\n    return\n\n  update: (app) ->\n    @_movePointer(app.pointing) unless @_keyInput\n    return\n\n  _pointStart: (e) ->\n    #@_removePointer()\n    #@_createPointer()\n    @_movePointer(e.pointing)\n    return\n\n  _pointMove: (e) ->\n    @_movePointer(e.pointing)\n    return\n\n  _pointEnd: (e) ->\n    @_setupCommand()\n    @_removePointer()\n    @_endScene()\n    return\n\n  _setupCommand: ->\n    if @pointer?\n      @callback(@pointer.rotation)\n    return\n\n  _endScene: ->\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _createPointer: ->\n    @pointer = tm.display.Shape(\n      width: 10\n      height: 10\n    ).addChildTo @mapSprite\n      .setPosition @target.x,@target.y\n    tm.display.CircleShape(\n      x: 40\n      width: 10\n      height: 10\n      fillStyle: 'blue'\n    ).addChildTo @pointer\n    @pointer.rotation = @target.body.rotation\n    return\n\n  _removePointer: ->\n    if @pointer?\n      @pointer.remove()\n      @pointer = null\n    return\n\n  _movePointer: (pointing) ->\n    if @pointer?\n      t    = @mapSprite.globalToLocal pointing\n      tcsr = @target.character.shot.range\n\n      @target.checkDirection(\n        x:             t.x\n        y:             t.y\n        start:         tcsr.start\n        end:           tcsr.end\n        anticlockwise: tcsr.anticlockwise\n        callback: ((result,r) ->\n          if result\n            x = t.x - @target.x\n            y = t.y - @target.y\n            v = tm.geom.Vector2 x,y\n            r = Math.radToDeg v.toAngle()\n          else\n            r += @target.body.rotation\n          @pointer.rotation = r\n        ).bind @\n      )\n    return\n","###*\n* @file SceneBattleDirectionCommand.coffee\n* 向き設定コマンドシーン\n###\n\nDIRECTIONS  = nz.system.character.directions\n\ntm.define 'nz.SceneBattleDirectionCommand',\n  superClass: nz.SceneBattleShotCommand\n\n  init: (param) ->\n    @superInit(param)\n\n    @_direction = null\n\n  _setupCommand: ->\n    if @_direction?\n      @callback(@target.direction,@_direction)\n    return\n\n  _movePointer: (pointing) ->\n    return unless @pointer?\n    t = @target.body.localToGlobal tm.geom.Vector2(0,0)\n    x = pointing.x - t.x\n    y = pointing.y - t.y\n    v = tm.geom.Vector2 x,y\n    rotation = Math.radToDeg v.toAngle()\n    for d,i in DIRECTIONS when 0 <= i and i < 6\n      if d.rotation - 30 < rotation and rotation < d.rotation + 30\n        costd = nz.Graph.directionCost(@target.direction, d.index)\n        if (@costa + costd) <= @target.character.maxap\n          if @_direction != d.index\n            @_direction = d.index\n            @pointer.rotation = d.rotation\n            return\n    return\n","###*\n* @file SceneBattlePhase.coffee\n* 戦闘フェーズの処理\n###\n\ntm.define 'nz.SceneBattlePhase',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @status\n      start\n      end\n    } = param\n    @startTuen = start\n    @endTurn   = end\n    @turn      = start\n    @runing    = false\n\n    @_balletCount = 0\n\n    @eventHandler = nz.EventHandlerBattle()\n\n    @on 'enter', @_startPhase\n    @on 'addBallet', @_addBallet\n    @on 'removeBallet', @_removeBallet\n\n    @on 'map.pointingend', @_openPauseMenu\n\n    @on 'enterframe'   , @createKeyboradHander()\n    @on 'input_enter'  , @_openPauseMenu\n\n    @on 'selectStatus', (e) ->\n      {\n        scene\n        status\n      } = e\n      scene.activeStatus status\n\n    return\n\n  activeStatus: (status) ->\n    @status.addChild status\n    return\n\n  _openPauseMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Pause'\n      menu: [\n        {name: 'Continue',   func: -> return }\n        {name: 'Exit Game?', func: @_exitGame}\n      ]\n    return\n\n  _exitGame: (e) ->\n    app = @app ? e.app\n    app.popScene()\n    nz.system.restart()\n    return\n\n  _removeBallet: (param) ->\n    {\n      ballet\n    } = param\n    @_balletCount -= 1\n\n  _addBallet: (param) ->\n    {\n      ballet\n      owner\n    } = param\n    @_balletCount += 1\n\n    # TODO: マップオブジェクトも追加しないと\n    return\n\n  _startPhase: ->\n    @eventHandler.startBattlePhase()\n    @_startTurn(@startTuen)\n    return\n\n  _endPhase: ->\n    @eventHandler.endBattlePhase()\n    @app.popScene()\n    return\n\n  _startTurn: (@turn) ->\n    @eventHandler.startBattleTurn()\n    @update = @updateTurn\n    return\n\n  _endTurn: ->\n    @eventHandler.endBattleTurn()\n    @update = null\n    return\n\n  _isEnd: -> @turn >= @endTurn\n\n  _isEndAllCharacterAction: ->\n    flag = @characterSprites\n      .filter (c) -> c.isAlive()\n      .some (c) -> c.action\n    #flag = false\n    #flag |= c.action for c in @characterSprites when c.isAlive()\n    return (not flag) and (@_balletCount is 0)\n\n  updateTurn: ->\n    if @_isEndAllCharacterAction()\n      @_endTurn()\n      if @_isEnd()\n        @_endPhase()\n      else\n        @_startTurn(@turn + 1)\n        if @_isEndAllCharacterAction()\n          @_endTurn()\n          @_endPhase()\n    return\n\nnz.SceneBattlePhase.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\n","###*\n* @file SceneBattleResult.coffee\n* 戦闘結果の処理\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\n\ntm.define 'nz.SceneBattleResult',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @data\n    } = param\n\n    @setOrigin(0.0,0.0)\n\n    @width          = SCREEN_W - 32 * 2\n    @height         = SCREEN_H - 32 * 2\n    @bgColor        = 'gray'\n    @boundingType   = 'rect'\n    @interactive    = true\n    @checkHierarchy = true\n\n    @one 'enterframe', @setup\n\n  setup: ->\n    form =\n      children:\n        bg:\n          type:          'RoundRectangleShape'\n          x:             32\n          y:             32\n          width:         @width\n          height:        @height\n          strokeStyle:   'black'\n          fillStyle:     @bgColor\n          lineWidth:     1\n          shadowBlur:    1\n          shadowOffsetX: 2\n          shadowOffsetY: 2\n          shadowColor:   'gray'\n          originX:       @originX\n          originY:       @originY\n        message:\n          type:      'Label'\n          fillStyle: 'black'\n          align:     'left'\n          baseline:  'top'\n          x:         32 + 8\n          y:         32 + 10\n          originX:   @originX\n          originY:   @originY\n          fontSize:  8\n    form.children.message.text =\n      if @data.result.winner?\n        'Winner! ' + @data.result.winner.name\n      else\n        'Draw!!! ' + (o.name for o in @data.result.draw).join ','\n\n    @fromJSON form\n\n    @on 'enterframe' , @createKeyboradHander()\n    @on 'pointingend', @_openBattleEndMenu\n    @on 'input_enter', @_openBattleEndMenu\n\n  _startReplay: ->\n    @data.replay =\n      start: 1\n      end: @data.turn\n    @app.popScene()\n    return\n\n  _exitGame: ->\n    nz.system.restart()\n    return\n\n  _openBattleEndMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Battle End'\n      menu: [\n        {name: 'Replay?',    func: @_startReplay}\n        {name: 'Exit Game?', func: @_exitGame}\n      ]\n    return\n","###* AIパラメータ.\n* @file Param.coffee\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\n###* AI namespace.\n* @namespace nz.ai\n###\nnz.ai = nz.ai ? {}\n\nDIRECTIONS = nz.system.character.directions\n\nclass nz.ai.Param\n\n  ###* 戦闘ターン数\n  * @var {number} nz.ai.Param#turn\n  ###\n  ###* 設定対象キャラクター\n  * @var {nz.Character} nz.ai.Param#character\n  ###\n  ###* 設定対象を含む戦闘に参加しているキャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#characters\n  ###\n  ###* 設定対象を含まない味方キャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#friends\n  ###\n  ###* 敵キャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#targets\n  ###\n  ###* 対象キャラクター／場所。主にアクション設定時の対象として使用される。初期値は一番近い敵キャラクター。\n  * @var {Array<nz.Character|Object>} nz.ai.Param#target\n  ###\n  ###* 対象キャラクター／場所までの距離。初期値は一番近い敵キャラクターまでの距離。\n  * @var {Array<nz.Character|Object>} nz.ai.Param#distance\n  ###\n  ###* マップ情報\n  * @var {nz.Graph} nz.ai.Param#graph\n  ###\n\n  ###* コンストラクタ.\n  * @classdesc AIパラメータ.\n  * @constructor nz.ai.Param\n  * @param {Object}              param            初期化パラメータ\n  * @param {nz.Character}        param.character  AI対象キャラクター\n  * @param {Array<nz.Character>} param.characters AI対象外の戦闘参加キャラクター\n  * @param {nz.Graph}            param.graph      マップ情報\n  * @param {number}              param.turn       現在の戦闘ターン数\n  ###\n  constructor: (param) ->\n    {\n      @character\n      @characters\n      @graph\n      @turn\n    } = param\n    @setFriendsAndTargets()\n    @setNearTarget()\n    return\n\n  ###*\n  * @private\n  ###\n  _searchCharacters: (rotatedir, distance, characters, character = @character) ->\n    {\n      mapx\n      mapy\n      direction\n    } = character\n    nodes = nz.Graph.frontArea(\n      mapx:      mapx\n      mapy:      mapy\n      direction: direction + rotatedir\n      distance:  distance\n    )\n    r = []\n    for n in nodes\n      for c in characters\n        if n.mapx is c.mapx and n.mapy is c.mapy\n          r.push c\n    return r\n\n  ###* 敵の範囲検索\n  * @memberof nz.ai.Param#\n  * @method searchTargets\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\n  * @param {number} distance  検索距離\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\n  ###\n  searchTargets: (rotatedir,distance) ->\n    return @_searchCharacters rotatedir,distance,@targets\n\n  ###* 味方の範囲検索\n  * @memberof nz.ai.Param#\n  * @method searchFriends\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\n  * @param {number} distance  検索距離\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\n  ###\n  searchFriends: (rotatedir,distance) ->\n    return @_searchCharacters rotatedir,distance,@friends\n\n  ###* 近くの敵をターゲットとして検索する\n  * @memberof nz.ai.Param#\n  * @method findNearTarget\n  ###\n  findNearTarget: ->\n    result = {\n      target: null\n      distance: 99\n    }\n    for t in @targets\n      d = nz.Graph.distance(@character,t)\n      if d < result.distance\n        result.distance = d\n        result.target = t\n    return result\n\n  ###* 周囲6方向の位置を座標を取得\n  * @param {number} n 距離\n  * @return {Array} {mapx,mapy} の座標を表したオブジェクトは配列\n  ###\n  getHexPosition: (n=6) ->\n    c = @character\n    nx = n\n    ny1 = n / 2\n    ny2 = n / 2\n    if n % 2 != 0\n      if c.mapx % 2 == 0\n        ny1 -= 0.5\n        ny2 += 0.5\n      else\n        ny1 += 0.5\n        ny2 -= 0.5\n    return (\n      for res in [\n        {mapx: c.mapx     , mapy: c.mapy - n  }\n        {mapx: c.mapx     , mapy: c.mapy + n  }\n        {mapx: c.mapx - nx, mapy: c.mapy - ny1}\n        {mapx: c.mapx - nx, mapy: c.mapy + ny2}\n        {mapx: c.mapx + nx, mapy: c.mapy - ny1}\n        {mapx: c.mapx + nx, mapy: c.mapy + ny2}\n      ] when @graph.grid[res.mapx]?[res.mapy]?\n        res\n    )\n\n  ###* 戦闘参加キャラクターの敵と味方を分ける。\n  * @memberof nz.ai.Param#\n  * @method setFriendsAndTargets\n  ###\n  setFriendsAndTargets: ->\n    @friends = []\n    @targets = []\n    for c in @characters when c.name != @character.name\n      if @character.team == c.team\n        @friends.push c\n      else\n        @targets.push c\n    return\n\n  ###* 近くにいる敵キャラクターをターゲットに設定。距離も設定する。\n  * @memberof nz.ai.Param#\n  * @method setNearTarget\n  ###\n  setNearTarget: ->\n    r = @findNearTarget()\n    @target   = r.target\n    @distance = r.distance\n    return\n\n  ###* 射撃範囲にターゲットがいるか確認する\n  * @memberof nz.ai.Param#\n  * @method checkShotRange\n  ###\n  checkShotRange: ->\n    self = @\n    source = nz.utils.mapxy2screenxy @character\n    source.direction = @character.direction\n    target = nz.utils.mapxy2screenxy @target\n    data = {\n      source: source\n      target: target\n      range: @character.shot.range\n      callback: (res,r) ->\n        self.rotation = r if res\n    }\n    return nz.utils.checkDirectionRange(data)\n\n  ###* 指定した座標が移動できるか確認する(コスト計算含まない)\n  * @memberof nz.ai.Param#\n  * @method checkMovePosition\n  * @param {Object} p {mapx,mapy}\n  ###\n  checkMovePosition: (p) ->\n    return false unless p?\n    node = @graph.grid[p.mapx]?[p.mapy]\n    return false unless node?\n    return false if node.isWall()\n    for c in @characters\n      if c.mapx is p.mapx and c.mapy is p.mapy\n        return false\n    return true\n\n  getFrontPosition: ->\n    c = @character.getLastPosition(@turn)\n    c.direction = @character.getLastDirection(@turn)\n    return nz.Graph.frontPosition c\n\n  getBackPosition: ->\n    c = @character.getLastPosition(@turn)\n    c.direction = @character.getLastDirection(@turn)\n    return nz.Graph.backPosition c\n\n  ###* 前に移動できるか確認する(コスト計算含む)\n  * @memberof nz.ai.Param#\n  * @method checkFrontPosition\n  ###\n  checkFrontPosition: ->\n    p = @getFrontPosition()\n    unless @checkMovePosition(p)\n      return false\n    node = @graph.grid[p.mapx][p.mapy]\n    if @character.getRemnantAp() < node.weight + 1\n      return false\n    return true\n\n  ###* 後ろに移動できるか確認する(コスト計算含む)\n  * @memberof nz.ai.Param#\n  * @method checkBackPosition\n  ###\n  checkBackPosition: ->\n    p = @getBackPosition()\n    unless @checkMovePosition(p)\n      return false\n    node = @graph.grid[p.mapx][p.mapy]\n    if @character.getRemnantAp() < node.weight + 1\n      return false\n    return true\n\n  ###* 移動コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveCommand\n  ###\n  setMoveCommand: (args={}) ->\n    target = args.target ? @target\n    length = args.length ? 99\n    route  = nz.utils.searchRoute @graph,@character,target,@characters\n    if length < route.length\n      route = route[0 ... length]\n    @character.addMoveCommand @turn,route\n    return\n\n  ###* 攻撃コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setAttackCommand\n  ###\n  setAttackCommand: ->\n    @character.setAttackCommand @turn\n    return\n\n  ###* 射撃コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setShotCommand\n  ###\n  setShotCommand: ->\n    direction = @character.getLastDirection @turn\n    rotation = nz.system.character.directions[direction].rotation\n    @character.addShotCommand @turn,@rotation + rotation\n    return\n\n  ###* 後ろに移動するコマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveBackCommand\n  * @param {number} num 後退する歩数\n  ###\n  setMoveBackCommand: (num=1) ->\n    for i in [0 .. num]\n      if @checkBackPosition()\n        pos  = @getBackPosition()\n        node = @graph.grid[pos.mapx][pos.mapy]\n        cost = node.weight + 1\n        route = {\n          mapx: pos.mapx\n          mapy: pos.mapy\n          cost: cost\n          back: true\n          direction: pos.direction\n        }\n        @character.addMoveCommand @turn, [route]\n    return\n\n  ###* 前に移動するコマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveFrontCommand\n  * @param {number} num 前進する歩数\n  ###\n  setMoveFrontCommand: (num=1) ->\n    for i in [0 .. num]\n      if @checkFrontPosition()\n        pos  = @getFrontPosition()\n        node = @graph.grid[pos.mapx][pos.mapy]\n        cost = node.weight + 1\n        route = {\n          mapx: pos.mapx\n          mapy: pos.mapy\n          cost: cost\n          back: false\n          direction: pos.direction\n        }\n        @character.addMoveCommand @turn, [route]\n    return\n\n  ###* 方向転換コマンドを設定する（相対値）\n  * @memberof nz.ai.Param#\n  * @method setRotateCommand\n  * @param {number} rotate 方向転換する値(-3から+3の相対値)\n  ###\n  setRotateCommand: (rotate) ->\n    d = @character.getLastDirection @turn\n    @character.addRotateCommand @turn, d, rotate\n    return\n\n  ###* 方向転換コマンドを設定する（絶対値）\n  * @memberof nz.ai.Param#\n  * @method setDirectionCommand\n  * @param {number} direction 方向転換する方向(0から5の絶対値)\n  ###\n  setDirectionCommand: (direction) ->\n    if 0 <= direction and direction <= 5\n      d = @character.getLastDirection @turn\n      @character.addRotateCommand @turn, d, DIRECTIONS[d].rotateIndex[direction]\n    return\n","###*\n* @file Default.coffee\n* デフォルトAI\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nnz.ai = nz.ai ? {}\n\nclass nz.ai.Default\n\n  ###* 初期化\n  * @classdesc デフォルトAIクラス\n  * @constructor nz.ai.Default\n  ###\n  constructor: ->\n\n  ###* 戦闘開始位置設定\n  * @memberof nz.ai.Default#\n  * @method setupBattlePosition\n  * @param  {Object}         param           設定用パラメータ\n  * @param  {nz.Character}   param.character 設定対象のキャラクター\n  * @param  {nz.Character[]} param.friends   設定対象を含む味方のキャラクター配列\n  * @param  {Object[]}       param.area      開始位置情報の配列(mapdata.start.area)\n  * @return {Object[]}       対象キャラクターの位置を、param.area の配列から１つ選択し返す\n  ###\n  setupBattlePosition: (param) ->\n    {\n      character\n      friends\n      area\n    } = param\n    i = friends.indexOf character\n    return area[i]\n\n  ###* 戦闘行動設定\n  * @memberof nz.ai.Default#\n  * @method setupBattlePosition\n  * @param　{nz.ai.Param} param 設定用パラメータ\n  ###\n  setupAction: (param) ->\n    return\n\nnz.system.addAI 'Default', new nz.ai.Default()\n","###*\n* @file Rule.coffee\n* ルールベースのAIクラス\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nnz.ai = nz.ai ? {}\n\nclass nz.ai.Rule\n\n  ###* 初期化\n  * @classdesc ルールベースのAIクラス\n  * @constructor nz.ai.Rule\n  ###\n  constructor: (caller) ->\n    @_caller = caller\n    @rules   = []\n\n  add: (rule) ->\n    @rules.push rule\n\n  ###* 戦闘行動設定\n  * @param　{nz.ai.Param} param 設定用パラメータ\n  ###\n  setupAction: (param) ->\n    for r in @rules\n      if r.cond.call(@_caller,param)\n        if r.setup?.call(@_caller,param)\n          break\n    return\n","\ntm.main ->\n  screen = nz.system.screen\n  assets = nz.system.assets\n\n  nz.system.app = app = tm.display.CanvasApp '#world'\n  # app.enableStats()\n\n  # リサイズ\n  app.resize screen.width, screen.height\n\n  # フィット\n  app.fitWindow()\n\n  # APバックグラウンド\n  app.background = 'gray'\n  \n  # 最初のシーンに切り替える\n  app.pushScene tm.game.LoadingScene(\n    assets: assets\n    width: screen.width\n    height: screen.height\n  ).on 'load', (e) ->\n    @app.fitWindow()\n    nz.system.start()\n    return\n\n  #app.pushScene SplashScene(\n  #  width: screen.width\n  #  height: screen.height\n  #)\n\n  # 実行\n  app.run()\n\n  #tm.inform()\n"],"sourceRoot":"/source/"}