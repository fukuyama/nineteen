{"version":3,"sources":["System.coffee","main.min.js","Utils.coffee","Graph.coffee","GridNode.coffee","Character.coffee","BattleCounter.coffee","SpriteBattleMap.coffee","SpriteCharacter.coffee","SpriteStatus.coffee","SpriteHelpText.coffee","EventHandlerBattle.coffee","SceneBase.coffee","SceneMenu.coffee","SceneTitleMenu.coffee","SceneBattle.coffee","SceneBattlePosition.coffee","SceneBattleRotatePointer.coffee","SceneBattleMoveCommand.coffee","SceneBattleShotCommand.coffee","SceneBattleDirectionCommand.coffee","SceneBattlePhase.coffee","SceneBattleResult.coffee","ScenePopMessage.coffee","Param.coffee","Default.coffee","Rule.coffee","main.coffee"],"names":["_g","nz","ref","window","global","System","this","ai","prototype","title","direction_num","UP","UP_RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","UP_LEFT","character","directions","name","rotation","index","rotateIndex","action_cost","move","rotate","attack","shot","stamina_cost","map","chip","width","height","screen","dialog","strokeStyle","fillStyle","assets","chipdata","map_object","map_chip","character_001","type","src","character_test","team","colors","messages","battle","phase","command","exit_game","close_menu","reset","next_turn","option","position","setiing","result","replay","rematch","end_battle","addAI","start","app","replaceScene","SceneTitleMenu","restart","system","call","DIRECTIONS","MAP_CHIP_H","MAP_CHIP_W","Utils","marge","r","o","k","v","Array","concat","searchRoute","graph","source","target","characters","options","c","direction","i","len","mapx","mapy","grid","cost","ap","closest","length","isAlive","push","isWall","mapxy2screenxy","p","arguments","x","y","screenxy2mapxy","Math","floor","normalizRotation","relativeRotation","p1","p2","radToDeg","atan2","lineRoute","ax","ay","dx","dy","hx","hy","j","ref1","ref2","ret","sx","sy","abs","round","Graph","distance","checkDirectionRange","param","anticlockwise","callback","end","r1","r2","ra","res","range","utils","_FRONT_POS","_NEIGHBORS","chipid","l","mapdata","node","ref3","nodes","data","GridNode","clear","cleanWrap","clean","cleanDirty","markDirty","wrapNodes","getWrap","d","key","GridNodeWrap","astar","cleanNode","neighbors","w","results","toString","graphString","len1","rowDebug","weight","join","sd","ex","ey","op","g","len2","pd","route","wrap","heuristic","search","back","wrap1","wrap2","hd","hr","ceil","calcDirectionTo","directionCost","c1","c2","dir","dis","direction1","direction2","frontPosition","t","backPosition","hexLine","n","frontArea","a","apply","getCost","Object","defineProperty","get","enumerable","frame","object","calcDirection","calcDirectionBy","ACTION_COST","Character","spriteSheet","colorChanges","maxhp","maxsp","maxap","hp","sp","speed","armor","defense","weapon","damage","teamColor","from","to","commands","_command","clearCommand","createAiInfo","info","actions","clearMoveCommand","action","clearAttackCommand","clearShotCommand","getActionCost","getRemnantAp","getLastDirection","getLastPosition","pos","addMoveCommand","prev","addRotateCommand","setAttackCommand","isShotCommand","addShotCommand","isAttackCommand","some","isMoveCommand","isDead","BattleCounter","ballet","atk","hit","miss","max","total","def","missBallet","hitBallet","receiveBallet","missWeapon","hitWeapon","receiveWeapon","tm","define","superClass","display","CanvasElement","init","mapName","h","superInit","_chips","_blinks","_activeBlinks","characterSprites","asset","Manager","_initMapChip","cursor","_createCursor","addChildTo","setCursorPosition","getMapChip","on","e","visible","cursorUp","cursorDown","cursorLeft","cursorRight","findCharacter","findCharacterGhost","ghost","Shape","lineWidth","_render","canvas","strokeRect","render","_dispatchMapChipEvent","_e","event","Event","pointing","currentScene","dispatchEvent","blink","frameIndex","Sprite","setPosition","setFrameIndex","setInteractive","setBoundingType","bind","setOrigin","RectangleShape","setAlpha","setVisible","tweener","fade","setLoop","clearBlink","isBlink","ST_COST","AnimationSprite","index1","bmp","f","ss","SpriteSheet","image","getBitmap","_createColorFilter","filter","graphics","Canvas","resize","drawBitmap","checkHierarchy","counter","body","createWeapon","_enterframeWeapon","setMapPosition","setDirection","clearGhost","startAction","turn","_weaponHitFlag","update","owner","collision","add","_hitWeapon","_hitBallet","isGhost","alpha","hasGhost","b","calc","pixel","bitmap","setPixelIndex","setPixel32Index","createGhost","SpriteCharacter","remove","mapx1","mapy1","gotoAndPlay","updateBattle","enemy","scene","getRoot","_updateAttack","checkDirection","_checkAttackDirection","cw","clone","$extend","_attackAnimation","_isHitWeapon","flare","rt","geom","Vector2","setDegree","localToGlobal","isHitPoint","_setShotAction","_setMoveAction","_setRotateAction","_endAction","applyPosition","isMove","isStop","_shotAnimation","_fatigue","wait","finish","play","pause","angle","bv","vx","vy","ｈ","mapSprite","globalToLocal","CircleShape","degToRad","cos","sin","eventHandler","removeBallet","other","addBallet","_deadAnimation","shooter","_damage","attacker","deadCharacter","_dead","refreshStatus","hide","form","characterSprite","detail","boundingType","interactive","bgColor","children","bg","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","originX","originY","_label","text","fontSize","stroke","hpGauge","_gauge","color","_maxValue","spGauge","hpLabel","spLabel","fromJSON","sprite","setScale","EventHandlerBattle","selectStatus","status","borderWidth","borderColor","animationTime","align","baseline","_refreshActionText","value","CENTER_X","CENTER_Y","SCREEN_H","SCREEN_W","TextShape","autoRender","setText","_text","fit","set","SpriteHelpText","accessor","_fireAll","_dispatchEvent","element","child","hasEventListener","fire","startBattleScene","endBattleScene","replayBattle","startBattlePhase","endBattlePhase","startBattleTurn","endBattleTurn","Scene","_description","show","popMessage","message","ScenePopMessage","center","duration","popwait","descriptionOff","pushScene","openMenuDialog","dlg","SceneMenu","description","setupKeyboradHander","createKeyboradHander","eventKeys","repeatCount","repeatDelay","repeatIntarval","kb","keyboard","getKeyDown","getKey","setupCursorHandler","handler","ui","MenuDialog","m","self","screenWidth","screenHeight","menuFunc","menu","func","menuDescriptions","box","setStrokeStyle","setFillStyle","selectIndex","_enter","up","down","closeDialog","_selected","setIndex","selectValue","SceneBase","game","TitleScene","onpointingstart","_sample_game","_main_menu","_debug_game","_load_game","_option","_new_game","SceneBattle","mapId","controlTeam","console","log","_sample_game_2","flag","_generate_game","player","num","teamColors","teamName","shuffle","pop","random","MCD","MSGS","endCondition","paddingLeft","_selectCharacterIndex","winner","startInfo","load","loaded","contains","setup","LoadingScene","autopop","s","SpriteBattleMap","SpriteStatus","addChildAt","activeStatus","blinkCharacter","one","_pushScene","SceneBattlePosition","_mapPointingend","inputEnter","cursorHandler","_startInputPhase","targets","_openGameMenu","_openCommandMenu","_openSelectCharacterMenu","addChild","_createResultTimeup","score","draw","_createResultTeam","_createResult","isEnd","_commandScene","klass","selectCharacterSprite","_selectGhost","_checkCommandConf","_openTurnConfMenu","_exitGame","acost","rap","sc","selectCharacter","_addMoveCommand","_addRotateCommand","_addAttackCommand","_addShotCommand","_resetCommand","_startBattlePhase","_openResult","SceneBattleResult","_startReplay","popScene","si","setupAction","Param","SceneBattlePhase","SceneBattleMoveCommand","scs","SceneBattleShotCommand","SceneBattleDirectionCommand","getter","DIRNUM","area","areaIndex","friends","otherTeam","teamArea","members","setupBattlePosition","_setBattlePosition","_mapPointingover","_start","_selectCharacter","format","_end","mapycenter","_keyInput","_keyRotate","_keyRotateMult","_inputLeft","_inputRight","_pointEnd","_createPointer","_rotatePointer","_movePointer","_setupCommand","_removePointer","_endScene","pointer","_over","SceneBattleRotatePointer","tcsr","toAngle","_remnant","_direction","costd","startTuen","endTurn","_balletCount","_startPhase","_addBallet","_removeBallet","_openPauseMenu","_startTurn","_endPhase","updateTurn","_endTurn","_isEnd","_isEndAllCharacterAction","_openBattleEndMenu","_startRematch","_endBattle","msg","easing","ref4","ref5","_param","_board","RoundRectangleShape","Label","outAnimation","inAnimation","_out","setFriendsAndTargets","setNearTarget","_searchCharacters","rotatedir","searchTargets","searchFriends","findNearTarget","getHexPosition","nx","ny1","ny2","checkShotRange","checkMovePosition","getFrontPosition","getBackPosition","checkFrontPosition","checkBackPosition","setMoveCommand","args","slice","setShotCommand","setMoveBackCommand","setMoveFrontCommand","setRotateCommand","setDirectionCommand","Default","indexOf","Rule","caller","_caller","rules","rule","cond","main","CanvasApp","fitWindow","background","run"],"mappings":"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","file":"main.min.js","sourcesContent":["###*\n* @file System.coffee\n* システム情報\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nclass nz.System\n\n  title: 'Nineteen'\n  direction_num:\n    UP:         0\n    UP_RIGHT:   1\n    DOWN_RIGHT: 2\n    DOWN:       3\n    DOWN_LEFT:  4\n    UP_LEFT:    5\n  character:\n    directions: [\n      {name:'up'        , rotation:  -90, index:0, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\n      {name:'up_right'  , rotation:  -30, index:1, rotateIndex:[-1, 0, 1, 2, 3,-2]}\n      {name:'down_right', rotation:   30, index:2, rotateIndex:[-2,-1, 0, 1, 2, 3]}\n      {name:'down'      , rotation:   90, index:3, rotateIndex:[ 3,-2,-1, 0, 1, 2]}\n      {name:'down_left' , rotation:  150, index:4, rotateIndex:[ 2, 3,-2,-1, 0, 1]}\n      {name:'up_left'   , rotation: -150, index:5, rotateIndex:[ 1, 2, 3,-2,-1, 0]}\n      {name:'default'   , rotation:   90, index:6, rotateIndex:[ 0, 1, 2, 3,-2,-1]}\n    ]\n    action_cost:\n      move:   1\n      rotate: 1\n      attack: 2\n      shot:   2\n    stamina_cost:\n      move:   1\n      rotate: 1\n      attack: 4\n      shot:   2\n  map:\n    chip:\n      width:  32\n      height: 32\n  screen:\n    width:  640\n    height: 480\n  dialog:\n    strokeStyle: 'rgba(255,255,255,1.0)'\n    fillStyle:   'rgba(128,128,128,1.0)'\n  assets:\n    chipdata:    'data/chipdata.json'\n    map_object:  'img/map_object.png'\n    map_chip:    'img/map_chip.png'\n    character_001:\n      type:      'tmss'\n      src:       'data/character_001.json'\n    character_test:\n      type:      'tmss'\n      src:       'data/character_test.json'\n  team:\n    colors: [\n      [255,255,255]\n      [  0,255,255]\n      [255,  0,255]\n      [255,255,  0]\n      [255,  0,  0]\n      [  0,255,  0]\n      [  0,  0,255]\n      [  0,  0,  0]\n    ]\n  messages:\n    battle:\n      phase:\n        command:    'キャラクターを選択し行動を設定してください。'\n        exit_game:  'ゲームを終了します。'\n        close_menu: 'メニューを閉じます。'\n      command:\n        move:       '移動先の設定をします。'\n        attack:     '攻撃範囲に入った敵に対して武器による攻撃をします'\n        shot:       '指定した方向へ、射撃を行います。'\n        rotate:     '向いている方向を、変更します。'\n        reset:      '行動をリセッットします。'\n        next_turn:  '次のターンは開始します。'\n        option:     'オプション'\n        exit_game:  'ゲームを終了します。'\n        close_menu: 'メニューを閉じます。'\n      position:\n        setiing:    '{name} の開始位置を選択してください。'\n      result:\n        replay:     'リプレイします。'\n        rematch:    '再戦します。'\n        end_battle: '戦闘を終わります。'\n        exit_game:  'ゲームを終了します。'\n        close_menu: 'メニューを閉じます。'\n\n  ###* 初期化\n  * @classdesc システムクラス\n  * @constructor nz.System\n  ###\n  constructor: () ->\n    @ai = {}\n    return\n\n  addAI: (name,ai) -> @ai[name] = ai\n\n  start: ->\n    @app.replaceScene nz.SceneTitleMenu()\n    return\n\n  restart: ->\n    @start()\n    return\n\n\nnz.system = new nz.System()\n",null,"# Utils.coffee\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\nDIRECTIONS = nz.system.character.directions\n\nclass nz.Utils\n\n  ###* オブジェクトマージ\n  * @param {Object} r 受け側オブジェクト\n  * @param {Object} o マージオブジェクト\n  ###\n  marge: (r,o) ->\n    for k,v of o\n      if typeof v is 'object'\n        if v instanceof Array\n          r[k] = [].concat v\n        else\n          r[k] = {} unless r[k]?\n          @marge r[k], v\n      else\n        r[k] = v\n    return r\n\n\n  ###* 経路探索\n  * @param {nz.Graph} graph  グラフ（マップ情報）\n  * @param {Object}   source 開始位置のキャラクター({mapx,mapy,direction})\n  * @param {Object}   target 終了位置のキャラクターか位置情報({mapx,mapy})\n  * @param {Array}    characters 配列({mapx,mapy})\n  * @param {Object}   [options] オプション\n  * @param {boolean}  [options.closest] 到達できない場合に近くまで探索する場合 true\n  * @param {Object}   [options.grid] グリッドオプション\n  * @return {Array}   ルート情報\n  ###\n  searchRoute: (graph, source, target, characters, options = {})->\n    unless options.grid?\n      options.grid = []\n    unless options.graph?\n      options.graph = {\n        cost: source.ap\n      }\n    unless options.closest?\n      options.closest = true\n\n    for c in characters when c.isAlive() and (source.mapx != c.mapx or source.mapy != c.mapy)\n      options.grid.push {\n        mapx: c.mapx\n        mapy: c.mapy\n        options: {\n          isWall: true\n        }\n      }\n\n    {direction,mapx,mapy} = source\n    return graph.searchRoute(direction, mapx, mapy, target.mapx, target.mapy, options)\n\n  ###* マップ座標をスクリーン座標へ変換\n  * @param {Object} p {mapx,mapy}\n  * @return {Object}  {x,y}\n  ###\n  mapxy2screenxy: (p) ->\n    if arguments.length == 2\n      p = {\n        mapx: arguments[0]\n        mapy: arguments[1]\n      }\n    # origin があるから、0.5 ずらす\n    r = {\n      x: p.mapx * MAP_CHIP_W + MAP_CHIP_W * 0.5\n      y: p.mapy * MAP_CHIP_H + MAP_CHIP_H * 0.5\n    }\n    r.y += MAP_CHIP_H * 0.5 if p.mapx % 2 == 0\n    return r\n\n  ###* スクリーン座標をマップ座標へ変換\n  * @param {Object} p {x,y}\n  * @return {Object}  {mapx,mapy}\n  ###\n  screenxy2mapxy: (p) ->\n    if arguments.length == 2\n      p = {\n        x: arguments[0]\n        y: arguments[1]\n      }\n    mapx = Math.floor p.x / MAP_CHIP_W\n    if mapx % 2 == 0\n      mapy = Math.floor (p.y - MAP_CHIP_H * 0.5) / MAP_CHIP_H\n    else\n      mapy = Math.floor p.y / MAP_CHIP_H\n    mapx = 0 if mapx < 0\n    mapy = 0 if mapy < 0\n    return {\n      mapx: mapx\n      mapy: mapy\n    }\n\n  normalizRotation: (r) ->\n    r -= 360 while r > 180\n    r += 360 while r < -180\n    return r\n\n  relativeRotation: (rotation,p1,p2) ->\n    r = 0\n    if p2?\n      r = Math.radToDeg(Math.atan2 p2.y - p1.y, p2.x - p1.x)\n    else\n      r = p1 % 360\n    return @normalizRotation r - rotation\n\n  lineRoute: (p1,p2) ->\n    ret = [{\n      mapx: p1.mapx\n      mapy: p1.mapy\n    }]\n    dx = p2.mapx - p1.mapx\n    dy = p2.mapy - p1.mapy\n    hx = if dx < 0 then -1 else 1\n    hy = if dy < 0 then -1 else 1\n    ax = Math.abs dx\n    ay = Math.abs dy\n    if ax < ay\n      sx = if ay is 0 then hx else dx / ay\n      sy = if dy < 0 then -1 else 1\n      for y in [1 .. ay]\n        p = {\n          mapx: p1.mapx + sx * y\n          mapy: p1.mapy + sy * y\n        }\n        p.mapx = Math.round(p.mapx)\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\n          ret.push {\n            mapx: p.mapx - hx\n            mapy: p.mapy\n          }\n        ret.push p\n    else\n      sx = if dx < 0 then -1 else 1\n      sy = if ax is 0 then hy else dy / ax\n      for x in [1 .. ax]\n        p = {\n          mapx: p1.mapx + sx * x\n          mapy: p1.mapy + sy * x\n        }\n        p.mapy -= 0.5 if p.mapx % 2 == 0\n        p.mapy = Math.round(p.mapy)\n        while nz.Graph.distance(ret[ret.length - 1],p) > 1\n          ret.push {\n            mapx: p.mapx\n            mapy: p.mapy - hy\n          }\n        ret.push p\n    return ret\n    \n\n  ###* 座標方向確認。\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\n  * @param {Object}   param\n  * @param {number}   param.rotation キャラクターの向いている方向\n  * @param {number}   param.source   キャラクターの座標(x,y)\n  * @param {number}   param.target   ターゲット座標(x,y)\n  * @param {number}   param.start    確認する開始角度 -180 ～ 180\n  * @param {number}   param.end      確認する終了角度 -180 ～ 180\n  * @param {boolean}  param.anticlockwise range 方向(true 反時計回り)\n  * @param {Function} param.callback チェック結果をもらう関数\n  ###\n  checkDirectionRange: (param) ->\n    {\n      rotation\n      source\n      target\n      callback\n    } = param\n    {\n      start\n      end\n      anticlockwise\n    } = param.range\n    rotation = DIRECTIONS[source.direction].rotation unless rotation?\n    r = nz.utils.relativeRotation(rotation,source,target)\n    r1 = if anticlockwise then end   else start\n    r2 = if anticlockwise then start else end\n    res = false\n    if r1 < r2\n      res = r1 <= r and r <= r2\n    else\n      res = r1 <= r or  r <= r2\n    if callback?\n      unless res\n        ra = r1 if r1 > r\n        ra = r2 if r  > r2\n      else\n        ra = r\n      callback(res,ra)\n    return res\n\nnz.utils = new nz.Utils()\n","###*\n* @file Graph.coffee\n* A*用グラフクラス\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\n_NEIGHBORS = [\n  [\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\n    [[ 1, 0, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 1, 1]]\n    [[ 1, 1, 2],[ 0, 0, 1],[ 0, 0, 3],[-1, 0, 2]]\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\n    [[-1, 1, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1, 0, 4]]\n    [[-1, 0, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 1, 5]]\n  ]\n  [\n    [[ 0,-1, 0],[ 0, 0, 5],[ 0, 0, 1],[ 0, 1, 0]]\n    [[ 1,-1, 1],[ 0, 0, 0],[ 0, 0, 2],[-1, 0, 1]]\n    [[ 1, 0, 2],[ 0, 0, 1],[ 0, 0, 3],[-1,-1, 2]]\n    [[ 0, 1, 3],[ 0, 0, 2],[ 0, 0, 4],[ 0,-1, 3]]\n    [[-1, 0, 4],[ 0, 0, 3],[ 0, 0, 5],[ 1,-1, 4]]\n    [[-1,-1, 5],[ 0, 0, 4],[ 0, 0, 0],[ 1, 0, 5]]\n  ]\n]\n\nclass nz.Graph\n\n  ###* コンストラクタ.\n  * @classdesc A*用グラフクラス\n  * @constructor nz.Graph\n  ###\n  constructor: (param = {}) ->\n    {\n      mapdata\n      chipdata\n    } = param\n    @nodes = []\n    @grid = []\n    @grid[x] = [] for x in [0...mapdata.width]\n    for y in [0...mapdata.height]\n      for x in [0...mapdata.width]\n        unless y == mapdata.height - 1 and x % 2 == 0\n          chipid = mapdata.data[y][x]\n          node = new nz.GridNode(x,y,chipdata[chipid])\n          @grid[x][y] = node\n          @nodes.push(node)\n    @clear()\n\n  ###* クリア\n  * @memberof nz.Graph#\n  * @method clear\n  ###\n  clear: ->\n    @cleanWrap()\n    for node in @nodes\n      node.clean()\n    return\n\n  ###* ダーティノードの削除\n  * @memberof nz.Graph#\n  * @method cleanDirty\n  ###\n  cleanDirty: ->\n    return\n\n  ###* ダーティノードのマーク\n  * @memberof nz.Graph#\n  * @method markDirty\n  * @param {Object} node\n  ###\n  markDirty: (node) ->\n    return\n\n  ###* ラップクラスの削除\n  * @memberof nz.Graph#\n  * @method cleanWrap\n  ###\n  cleanWrap: ->\n    @wrapNodes = {}\n    return\n\n  ###* ラップクラスの取得\n  * @memberof nz.Graph#\n  * @method getWrap\n  ###\n  getWrap: (x,y,d) ->\n    key = \"#{x}-#{y}\"\n    if @wrapNodes[key]?\n      return @wrapNodes[key]\n    unless d?\n      unless @wrapNodes[key]?\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y])\n        astar.cleanNode(@wrapNodes[key])\n    else\n      key = \"#{x}-#{y}-#{d}\"\n      unless @wrapNodes[key]?\n        @wrapNodes[key] = new nz.GridNodeWrap(@grid[x][y],d)\n        astar.cleanNode(@wrapNodes[key])\n    @wrapNodes[key]\n\n\n  neighbors: (w) ->\n    #self = @\n    #return _NEIGHBORS[w.mapx % 2][w.direction]\n    #  .filter (o) ->\n    #    [x,y,d] = o\n    #    self.grid[x + w.mapx]?[y + w.mapy]?\n    #  .map (o) ->\n    #    [x,y,d] = o\n    #    self.getWrap(x + w.mapx,y + w.mapy,d)\n    #ret = []\n    #for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction]\n    #  x += w.mapx\n    #  y += w.mapy\n    #  if @grid[x]?[y]?\n    #    ret.push @getWrap(x,y,d)\n    #return ret\n    for [x,y,d] in _NEIGHBORS[w.mapx % 2][w.direction] when @grid[x + w.mapx]?[y + w.mapy]?\n      @getWrap(x + w.mapx, y + w.mapy, d)\n\n  toString: ->\n    graphString = []\n    for nodes in @grid\n      rowDebug = []\n      for node in nodes\n        rowDebug.push(node.weight)\n      graphString.push(rowDebug.join(\" \"))\n    return graphString.join(\"\\n\")\n\n  searchRoute: (sd,sx,sy,ex,ey,op={}) ->\n    route = []\n    start = @getWrap sx,sy,sd\n    end   = @getWrap ex,ey\n    # 壁じゃなかったら探索\n    if (not end.isWall()) or op.closest\n\n      unless op.closest?\n        op.closest = false\n      unless op.heuristic?\n        op.heuristic = nz.Graph.heuristic\n      unless op.grid?\n        op.grid = []\n\n      for g in op.grid\n        @grid[g.mapx][g.mapy].options = g.options\n      if op.graph?\n        @options = op.graph\n\n      result = astar.search(@, start, end, op)\n      pd = sd\n      for wrap in result\n        route.push {\n          mapx: wrap.mapx\n          mapy: wrap.mapy\n          cost: wrap.g\n          back: wrap.back\n          direction: if wrap.direction < 0 then pd else wrap.direction\n        }\n        pd = wrap.direction\n      for g in op.grid\n        @grid[g.mapx][g.mapy].options = undefined\n      @options = undefined\n    @cleanWrap()\n    return route\n\nnz.Graph.heuristic = (wrap1,wrap2) ->\n  hx = Math.abs(wrap1.mapx - wrap2.mapx)\n  hy = Math.abs(wrap1.mapy - wrap2.mapy)\n  #hr = Math.floor(hx / 2)\n  hr = Math.ceil(hx / 2)\n  direction = wrap1.node.calcDirectionTo(wrap2)\n  hd = nz.Graph.directionCost(wrap1.direction,direction)\n  if hy == hr\n    hy = 0\n  else if hy < hr\n    if hy != 0\n      hy = 1\n      if hd == 1\n        hd = 0\n  else\n    hy -= hr\n  #console.log \"#{wrap1.mapx} #{wrap1.mapy} #{wrap2.mapx} #{wrap2.mapy} #{hx} #{hy} #{hd} #{direction}\"\n  hx + hy + hd\n\n###* 対象の方向\n* @param {Object} c1 元\n* @param {Object} c2 対象\n###\nnz.Graph.direction = (c1,c2) ->\n  dis = nz.Graph.distance c1,c2\n  r   = Math.floor(dis / 2)\n  dir = 0\n  if (c2.mapx - r) <= c1.mapx and c1.mapx <= (c2.mapx + r)\n    dir = 0 if c1.mapy > c2.mapy\n    dir = 3 if c1.mapy < c2.mapy\n  else if c1.mapx > c2.mapx # 左側\n    if c1.mapy == c2.mapy\n      dir = if c1.mapx % 2 == 0 then 5 else 4\n    else if c1.mapy > c2.mapy\n      dir = 5\n    else if c1.mapy < c2.mapy\n      dir = 4\n  else if c1.mapx < c2.mapx # 右側\n    if c1.mapy == c2.mapy\n      dir = if c1.mapx % 2 == 0 then 1 else 2\n    else if c1.mapy > c2.mapy\n      dir = 1\n    else if c1.mapy < c2.mapy\n      dir = 2\n  return dir\n\n###* 距離\n* @param {Object} c1 元\n* @param {Object} c2 対象\n###\nnz.Graph.distance = (c1,c2) ->\n  hx = Math.abs(c1.mapx - c2.mapx)\n  hy = Math.abs(c1.mapy - c2.mapy)\n  hr = Math.ceil(hx / 2)\n  return hx if hy < hr\n  if hx % 2 == 1\n    if c1.mapx % 2 == 1\n      if c1.mapy <= c2.mapy\n        hy += 1\n    else\n      if c1.mapy >= c2.mapy\n        hy += 1\n  return hx + hy - hr\n\n###* 方向転換にかかるコストを計算\n* @param {number} direction1 方向1\n* @param {number} direction2 方向2\n###\nnz.Graph.directionCost = (direction1,direction2) ->\n  Math.abs(3 - Math.abs((direction2 - direction1 - 3) % 6))\n\n# mapx = _FRONT_POS[mapx % 2][direction][0]\n# mapy = _FRONT_POS[mapx % 2][direction][1]\n_FRONT_POS = [\n  [[ 0,-1],[ 1, 0],[ 1, 1],[ 0, 1],[-1, 1],[-1, 0]]\n  [[ 0,-1],[ 1,-1],[ 1, 0],[ 0, 1],[-1, 0],[-1,-1]]\n]\n\n###* 向いている目の前の座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @return {Object} 目の前の座標\n###\nnz.Graph.frontPosition = (p) ->\n  d = (p.direction + 6) % 6\n  t = p.mapx % 2\n  return {\n    mapx:      p.mapx + _FRONT_POS[t][d][0]\n    mapy:      p.mapy + _FRONT_POS[t][d][1]\n    direction: d\n  }\n\n###* 向いている方向に対する後ろの座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @return {Object} 後ろの座標\n###\nnz.Graph.backPosition = (p) ->\n  r = nz.Graph.frontPosition {\n    mapx: p.mapx\n    mapy: p.mapy\n    direction: p.direction + 3\n  }\n  r.direction = p.direction\n  return r\n\n###* ヘックス状のライン座標を取得する\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @param {number} p.distance  距離\n* @return {Array<Object>} 座標配列\n###\nnz.Graph.hexLine = (p) ->\n  for n in [0 ... p.distance]\n    p = @frontPosition(p)\n\n###* 方向に対する座標エリアを取得する。\n* 時計まわりに３０度のエリアを探す。\n* @param {Object} p           パラメータ\n* @param {number} p.mapx      X座標\n* @param {number} p.mapy      Y座標\n* @param {number} p.direction 方向\n* @param {number} p.distance  距離\n* @return {Array<Object>} 座標配列\n###\nnz.Graph.frontArea = (p) ->\n  r = []\n  for a,i in @hexLine(p)\n    r.push a\n    a.direction += 2\n    a.distance = i + 1\n    Array.prototype.push.apply r, @hexLine(a)\n  return r\n","###*\n* @file GridNode.coffee\n* A*用ノードクラス\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nclass nz.GridNodeWrap\n  constructor: (node, direction=-1) ->\n    @node      = node\n    @direction = direction\n    @back      = false\n\n  clean: -> @node.clean()\n\n  ###*\n  * 自分のノードに、指定されたノードから移動する（入る）場合のコスト\n  * @param wrap {nz.GridNodeWrap} 移動元ノード\n  ###\n  getCost: (wrap) ->\n    cost = @node.weight\n    if @mapx is wrap.mapx and @mapy is wrap.mapy\n      # 方向転換のコスト（１づつ方向転換するからコストは1）\n      cost = 1\n    else if nz.Graph.direction(@,wrap) is wrap.direction\n      cost += 1\n      @back = true\n    return cost\n\n  isWall: -> @node.isWall()\n\nObject.defineProperty nz.GridNodeWrap.prototype,'mapx',\n  get: -> @node.mapx\n  enumerable: true\nObject.defineProperty nz.GridNodeWrap.prototype,'mapy',\n  get: -> @node.mapy\n  enumerable: true\n\nclass nz.GridNode\n\n  ###*\n  * @param {Object} chipdata\n  * @param {number} chipdata.weight\n  * @param {number} chipdata.frame\n  * @param {string} chipdata.name\n  ###\n  constructor: (mapx, mapy, chipdata={weight:0}) ->\n    @mapx = mapx\n    @mapy = mapy\n    {\n      @weight\n      @frame\n      @name\n      @object\n    } = chipdata\n    @clean()\n\n  clean: ->\n    return\n\n  toString: -> \"[#{@mapx},#{@mapy}]\"\n\n  ###*\n  * 指定されたノードが、自分から見てどの方向にあるか\n  * @param node {GridNode|GridNodeWrap} 調査対象ノード\n  ###\n  calcDirection:   (node) -> nz.Graph.direction(@,node)\n  calcDirectionTo: (node) -> nz.Graph.direction(@,node)\n  calcDirectionBy: (node) -> nz.Graph.direction(node,@)\n\n  ###*\n  * 壁判定\n  ###\n  isWall: -> @weight is 0 or @options?.isWall\n","###*\n* @file Character.coffee\n* キャラクター情報\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nDIRECTIONS = nz.system.character.directions\nACTION_COST = nz.system.character.action_cost\n\nclass nz.Character\n\n  ###* 初期化\n  * @classdesc キャラクタークラス\n  * @constructor nz.Character\n  ###\n  constructor: (param = {}) ->\n    # 色変えする場合\n    nz.utils.marge @, {\n      name: 'テストキャラクター'\n      spriteSheet: 'character_test'\n      team: 'teamA'\n      colorChanges: [\n        # {from:[255,255,255],to:[255,0,0]}\n      ]\n      ai:\n        name: 'Default'\n        # src: 'nz/ai/Default.js'\n      maxhp: 100\n      maxsp: 100\n      maxap: 6\n      hp: 100\n      sp: 100\n      mapx: -1\n      mapy: -1\n      direction: 0\n      move:\n        speed: 300\n      armor:\n        defense: 10\n      weapon:\n        damage: 40\n        height: 48\n        width: 12\n        range:\n          start: 0\n          end: 120\n          anticlockwise: false\n        speed: 600\n      shot:\n        damage: 20\n        range:\n          start: 0\n          end: -120\n          anticlockwise: true\n        distance: 32 * 8\n        speed: 100\n    }\n    nz.utils.marge @, param\n    if @teamColor\n      @colorChanges.push {\n        from: [255,255,255]\n        to: @teamColor\n      }\n    @commands = [] # 戦闘コマンドリスト\n    return\n\n  _command: (i) ->\n    i = @commands.length - 1 unless i?\n    unless @commands[i]?\n      @commands[i] = {}\n      @clearCommand i\n    @commands[i]\n\n  ###* AI用キャラクター情報\n  * @param {number} i 戦闘ターン数\n  * @return {nz.Character} AI用のキャラクターインスタンス\n  * @memberof nz.Character#\n  * @method createAiInfo\n  ###\n  createAiInfo: (i) ->\n    info = {\n      name:      @name\n      maxhp:     @maxhp\n      maxsp:     @maxsp\n      maxap:     @maxap\n      hp:        @hp\n      sp:        @sp\n      mapx:      @mapx\n      mapy:      @mapy\n      direction: @direction\n      team:      @team\n    }\n    info.move   = nz.utils.marge {}, @move\n    info.weapon = nz.utils.marge {}, @weapon\n    info.shot   = nz.utils.marge {}, @shot\n    info.ai     = nz.utils.marge {}, @ai\n    return new nz.Character(info)\n\n  ###* コマンド削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearCommand\n  ###\n  clearCommand: (i) ->\n    command = @_command i\n    command.attack = false\n    command.actions = []\n    command.cost = 0\n    return\n\n  ###* 移動コマンド削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearMoveCommand\n  ###\n  clearMoveCommand: (i) ->\n    command = @_command i\n    actions = []\n    for action in command.actions\n      if action.move? or action.rotate?\n        command.cost -= action.cost\n      else\n        actions.push action\n    command.actions = actions\n    return\n\n  ###* 攻撃コマンドを削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearAttackCommand\n  ###\n  clearAttackCommand: (i) ->\n    command = @_command i\n    unless command.attack\n      return @\n    command.cost -= ACTION_COST.attack\n    command.attack = false\n    return @\n\n  ###* 射撃コマンドを削除\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method clearShotCommand\n  ###\n  clearShotCommand: (i) ->\n    command = @_command i\n    actions = []\n    for action in command.actions\n      if action.shot?\n        command.cost -= action.cost\n      else\n        actions.push action\n    command.actions = actions\n    return\n\n  ###* アクションコストを取得\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method getActionCost\n  ###\n  getActionCost: (i) -> @_command(i).cost\n\n  ###* 残りのアクションポイントを取得\n  * @param {number} i 戦闘ターン数\n  * @memberof nz.Character#\n  * @method getRemnantAp\n  ###\n  getRemnantAp: (i) -> @maxap - @getActionCost(i)\n\n  getLastDirection: (i) ->\n    command = @_command i\n    direction = @direction\n    for a in command.actions when a.rotate?\n      direction = a.rotate.direction\n    return direction\n\n  getLastPosition: (i) ->\n    command = @_command i\n    pos =\n      mapx: @mapx\n      mapy: @mapy\n    for a in command.actions when a.move?\n      pos = a.move\n    return pos\n\n  ###* 移動コマンドを追加\n  * @param {number} i 戦闘ターン数\n  * @param {Array} route 移動ルート\n  * @memberof nz.Character#\n  * @method addMoveCommand\n  ###\n  addMoveCommand: (i,route) ->\n    command   = @_command i\n    direction = @getLastDirection(i)\n    prev = command.cost\n    cost = 0\n    for r in route when prev + cost <= @maxap\n      if direction != r.direction\n        @addRotateCommand i, direction, DIRECTIONS[direction].rotateIndex[r.direction]\n        direction = r.direction\n      else\n        r.speed = @move.speed\n        if r.back\n          r.speed *= 2\n        command.actions.push\n          move: r\n          cost: r.cost - cost\n      cost = r.cost\n    command.cost = prev + cost\n    return @\n\n  ###* 方向転換コマンドを追加\n  * @param {number} i 戦闘ターン数\n  * @param {number} direction1 元の向き\n  * @param {number} rotateIndex 方向転換する量(マイナスは反時計回り)\n  * @memberof nz.Character#\n  * @method addRotateCommand\n  ###\n  addRotateCommand:  (i,direction1,rotateIndex) ->\n    command = @_command i\n    for i in [0 .. rotateIndex] when i != 0\n      command.actions.push\n        rotate:\n          direction: (direction1 + i + 6) % 6\n          speed: @move.speed\n        cost: ACTION_COST.rotate\n      command.cost += ACTION_COST.rotate\n    return @\n\n  ###* 攻撃コマンドを設定\n  * @param {number}  i    戦闘ターン数\n  * @memberof nz.Character#\n  * @method setAttackCommand\n  ###\n  setAttackCommand: (i) ->\n    if @isShotCommand i\n      return @\n    command = @_command i\n    if command.attack\n      return @\n    if @maxap >= ACTION_COST.attack\n      command.cost += ACTION_COST.attack\n      command.attack = true\n    return @\n\n  ###* 射撃コマンドを追加\n  * @param {number} i        戦闘ターン数\n  * @param {number} rotation 射撃角度\n  * @memberof nz.Character#\n  * @method addShotCommand\n  ###\n  addShotCommand: (i,rotation) ->\n    if @isAttackCommand i\n      return @\n    command = @_command i\n    command.actions.push\n      shot:\n        rotation: rotation\n        distance: @shot.distance\n        speed: @shot.speed\n      cost: ACTION_COST.shot\n    command.cost += ACTION_COST.shot\n    return @\n\n  ###* 射撃コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 射撃コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isShotCommand\n  ###\n  isShotCommand: (i) -> @_command(i).actions.some (action) -> action.shot?\n\n  ###* 攻撃コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 攻撃コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isAttackCommand\n  ###\n  isAttackCommand: (i) -> @_command(i).attack\n\n  ###* 移動コマンドが設定されているかどうか\n  * @param {number} i 戦闘ターン数\n  * @return {boolean} 移動コマンドを設定していたら true\n  * @memberof nz.Character#\n  * @method isMoveCommand\n  ###\n  isMoveCommand: (i) -> @_command(i).actions.some (action) -> action.move?\n\n  ###* 死亡判定\n  * @return {boolean} 死んでいる場合 true\n  * @memberof nz.Character#\n  * @method isDead\n  ###\n  isDead: -> @hp <= 0\n\n  ###* 生存判定\n  * @return {boolean} 生きている場合 true\n  * @memberof nz.Character#\n  * @method isAlive\n  ###\n  isAlive: -> @hp > 0\n","###*\n* @file BattleCounter.coffee\n* 戦闘用のカウンター\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nclass nz.BattleCounter\n\n  ###* 初期化\n  * @classdesc 戦闘用のカウンター\n  * @constructor nz.BattleCounter\n  ###\n  constructor: (param = {}) ->\n    @clear()\n    return\n\n  clear: ->\n    @ballet =\n      atk:\n        hit: 0\n        miss: 0\n        damage:\n          max: 0\n          total: 0\n      def:\n        hit: 0\n        damage:\n          max: 0\n          total: 0\n    @weapon =\n      atk:\n        hit: 0\n        miss: 0\n        damage:\n          max: 0\n          total: 0\n      def:\n        hit: 0\n        damage:\n          max: 0\n          total: 0\n    return\n\n  missBallet: ->\n    @ballet.atk.miss += 1\n    return\n  hitBallet: (d) ->\n    @ballet.atk.hit += 1\n    @ballet.atk.damage.max = Math.max @ballet.atk.damage.max, d\n    @ballet.atk.damage.total += d\n    return\n  receiveBallet: (d) ->\n    @ballet.def.hit += 1\n    @ballet.def.damage.max = Math.max @ballet.def.damage.max, d\n    @ballet.def.damage.total += d\n    return\n\n  missWeapon: ->\n    @weapon.atk.miss += 1\n    return\n  hitWeapon: (d) ->\n    @weapon.atk.hit += 1\n    @weapon.atk.damage.max = Math.max @weapon.atk.damage.max, d\n    @weapon.atk.damage.total += d\n    return\n  receiveWeapon: (d) ->\n    @weapon.def.hit += 1\n    @weapon.def.damage.max = Math.max @weapon.def.damage.max, d\n    @weapon.def.damage.total += d\n    return\n","###*\n* @file SpriteBattleMap.coffee\n* 戦闘マップスプライト\n###\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\n\ntm.define 'nz.SpriteBattleMap',\n  superClass: tm.display.CanvasElement\n\n  ###* 初期化\n  * @classdesc 戦闘マップスプライト\n  * @constructor nz.SpriteBattleMap\n  ###\n  init: (mapName) ->\n    @superInit()\n    @_chips  = []\n    @_blinks = []\n    @_activeBlinks = []\n    @characterSprites = []\n\n    @map = tm.asset.Manager.get(mapName).data\n\n    @graph = new nz.Graph\n      mapdata: @map\n      chipdata: tm.asset.Manager.get('chipdata').data\n\n    @width  = @map.width  * MAP_CHIP_W\n    @height = @map.height * MAP_CHIP_H\n    for mapx in [0...@map.width]\n      h = if mapx % 2 != 0 then @map.height else @map.height - 1\n      for mapy in [0...h]\n        @_initMapChip(mapx,mapy)\n\n    @cursor = @_createCursor().addChildTo(@)\n    @setCursorPosition @getMapChip(0,0)\n\n    @on 'startBattlePhase', (e) ->\n      @cursor.visible = false\n      return\n    @on 'endBattlePhase', (e) ->\n      @cursor.visible = true\n      return\n\n    @on 'input_up'     , @cursorUp\n    @on 'input_down'   , @cursorDown\n    @on 'input_left'   , @cursorLeft\n    @on 'input_right'  , @cursorRight\n    @on 'repeat_up'    , @cursorUp\n    @on 'repeat_down'  , @cursorDown\n    @on 'repeat_left'  , @cursorLeft\n    @on 'repeat_right' , @cursorRight\n\n    return\n\n  setCursorPosition: (param) ->\n    return unless param?\n    @cursor.mapx = param.mapx if param.mapx?\n    @cursor.mapy = param.mapy if param.mapy?\n    @cursor.x = param.x\n    @cursor.y = param.y\n    return\n\n  cursorUp: ->\n    {mapx,mapy} = @cursor\n    @setCursorPosition @getMapChip(mapx,mapy - 1)\n    return\n  cursorDown: ->\n    {mapx,mapy} = @cursor\n    @setCursorPosition @getMapChip(mapx,mapy + 1)\n    return\n  cursorLeft: ->\n    {mapx,mapy} = @cursor\n    chip = @getMapChip(mapx - 1,mapy)\n    unless chip?\n      chip = @getMapChip(mapx - 1,mapy - 1)\n    @setCursorPosition chip\n    return\n  cursorRight: ->\n    {mapx,mapy} = @cursor\n    chip = @getMapChip(mapx + 1,mapy)\n    unless chip?\n      chip = @getMapChip(mapx + 1,mapy - 1)\n    @setCursorPosition chip\n    return\n\n  # 指定された座標のキャラクターを探す\n  findCharacter: (mapx,mapy) ->\n    res = []\n    for character in @characterSprites\n      if character.mapx == mapx and character.mapy == mapy\n        res.push character\n    return res\n  findCharacterGhost: (mapx,mapy) ->\n    res = []\n    for character in @characterSprites\n      if character.ghost?.mapx == mapx and character.ghost?.mapy == mapy\n        res.push character.ghost\n    return res\n\n  _createCursor: ->\n    cursor = tm.display.Shape(\n      x:           0\n      y:           0\n      width:       MAP_CHIP_W\n      height:      MAP_CHIP_H\n      strokeStyle: 'red'\n      lineWidth:   3\n      visible:     true\n    )\n    cursor._render = -> @canvas.strokeRect(0, 0, @width, @height)\n    cursor.render()\n    return cursor\n\n  # MapChip用イベントハンドラ\n  _dispatchMapChipEvent: (_e) ->\n    e = tm.event.Event('map.' + _e.type)\n    e.app = _e.app\n    e.pointing = _e.pointing\n    e.mapx = @mapx\n    e.mapy = @mapy\n    e.app.currentScene.dispatchEvent e\n    return\n\n  # 座標位置のマップチップを作成\n  _initMapChip: (mapx,mapy) ->\n    w = MAP_CHIP_W\n    h = MAP_CHIP_H\n    {\n      x\n      y\n    } = nz.utils.mapxy2screenxy(mapx,mapy)\n\n    # マップデータから座標位置のマップチップを取得する\n    node = @graph.grid[mapx][mapy]\n    frameIndex = node.frame\n\n    # TODO: マップごとに画像を変更したい\n    chip = tm.display.Sprite('map_chip',w,h)\n      .addChildTo(@)\n      .setPosition(x,y)\n      .setFrameIndex(frameIndex)\n      .setInteractive(true)\n      .setBoundingType('rect')\n      .on 'pointingstart', @_dispatchMapChipEvent\n      .on 'pointingover', @_dispatchMapChipEvent\n      .on 'pointingout', @_dispatchMapChipEvent\n      .on 'pointingend', @_dispatchMapChipEvent\n    chip.mapx = mapx\n    chip.mapy = mapy\n\n    chip.on 'pointingover', @setCursorPosition.bind @, chip\n\n    # DEBUG:\n    #tm.display.Label(\"#{mapx},#{mapy}\",{fontSize:8}).setPosition(0,h/2-8).addChildTo(chip)\n\n    if node.object?\n      tm.display.Sprite('map_object',w,h*2)\n        .setOrigin(0.5,0.75)\n        .addChildTo(chip)\n        .setFrameIndex(node.object.frame)\n\n    blink = tm.display.RectangleShape(\n      width: w\n      height: h\n      strokeStyle: 'white'\n      fillStyle: 'white'\n    ).addChildTo(@)\n      .setPosition(x,y)\n      .setInteractive(true)\n      .setAlpha(0.0)\n      .setVisible(false)\n\n    @_chips[mapx] = [] unless @_chips[mapx]?\n    @_chips[mapx][mapy] = chip\n    @_blinks[mapx] = [] unless @_blinks[mapx]?\n    @_blinks[mapx][mapy] = blink\n    return\n\n  blink: (mapx,mapy) ->\n    blink = @_blinks[mapx]?[mapy]\n    if blink?\n      blink.visible = true\n      blink.tweener.clear().fade(0.5,300).fade(0.1,300).setLoop(true)\n      @_activeBlinks.push blink\n    return\n\n  clearBlink: ->\n    for blink in @_activeBlinks\n      blink.visible = false\n      blink.setAlpha(0.0)\n      blink.tweener.clear()\n    @_activeBlinks.clear()\n    return\n\n  isBlink: (mapx,mapy) -> @_blinks[mapx]?[mapy]?.visible\n\n  getMapChip: (mapx,mapy) -> @_chips[mapx]?[mapy]\n","###*\n* @file SpriteCharacter.coffee\n* キャラクタースプライト\n###\n\nMAP_CHIP_W = nz.system.map.chip.width\nMAP_CHIP_H = nz.system.map.chip.height\nDIRECTIONS = nz.system.character.directions\nST_COST    = nz.system.character.stamina_cost\n\ntm.define 'nz.SpriteCharacter',\n  superClass: tm.display.AnimationSprite\n\n  ###* 初期化\n  * @classdesc キャラクタースプライトクラス\n  * @constructor nz.SpriteCharacter\n  * @param {nz.Character} character\n  ###\n  init: (@index,@character) ->\n    @superInit(@character.spriteSheet)\n\n    if @character.colorChanges?\n      @ss = tm.asset.SpriteSheet(@ss) # 複製…ちょっと無理やり感\n      w   = @ss.image.width\n      h   = @ss.image.height\n      bmp = @ss.image.getBitmap(0,0,w,h)\n      for c in @character.colorChanges\n        f = @_createColorFilter c.from, c.to\n        bmp.filter f if f?\n      @ss.image = tm.graphics.Canvas().resize(w,h).drawBitmap(bmp,0,0)\n\n    @checkHierarchy = true\n    @ghost = null\n    @counter = new nz.BattleCounter()\n\n    @body = tm.display.Shape(\n      width:  @width\n      height: @height\n    ).addChildTo @\n\n    @weapon = @createWeapon()\n    @weapon.on 'enterframe', @_enterframeWeapon.bind @\n\n    @setMapPosition @character.mapx, @character.mapy\n    @setDirection @character.direction\n\n    @on 'startBattleScene', ->\n      @counter.clear()\n      return\n    @on 'endBattleScene', ->\n      return\n    @on 'startBattlePhase', ->\n      @clearGhost()\n      return\n    @on 'endBattlePhase', ->\n      return\n    @on 'startBattleTurn', (e) ->\n      @startAction(e.turn)\n      @_weaponHitFlag = []\n      return\n    @on 'endBattleTurn', (e) ->\n      @update = null\n      @attack = false\n      return\n    @on 'addBallet', (e) ->\n      e.ballet.collision.add(@) if @ != e.owner and @isAlive()\n      return\n    @on 'hitWeapon', (e) ->\n      @_hitWeapon(e.owner)\n      return\n    @on 'hitBallet', (e) ->\n      @_hitBallet(e.owner,e.ballet)\n      return\n    @on 'deadCharacter', (e) ->\n      return\n    return\n\n  isGhost: () -> (@alpha == 0.5) # 半透明かどうかで判断\n  hasGhost: () -> @ghost != null\n\n  _createColorFilter: (a,b) ->\n    if b.length is 3\n      return {\n        calc: (pixel, index, x, y, bitmap) ->\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2]\n            bitmap.setPixelIndex(index, b[0], b[1], b[2])\n      }\n    if a.length is 4 and b.length is 4\n      return {\n        calc: (pixel, index, x, y, bitmap) ->\n          if pixel[0] is a[0] and pixel[1] is a[1] and pixel[2] is a[2] and pixel[3] is a[3]\n            bitmap.setPixel32Index(index, b[0], b[1], b[2], b[3])\n      }\n    return undefined\n\n  createWeapon: ->\n    w = tm.display.RectangleShape(\n      width: @character.weapon.height\n      height: @character.weapon.width\n      strokeStyle: 'black'\n      fillStyle: 'red'\n    ).addChildTo @body\n      .setOrigin(0.0,0.5)\n      .setVisible(false)\n    w.checkHierarchy = true\n    return w\n\n  createGhost: (param) ->\n    {\n      direction\n      mapx\n      mapy\n    } = param\n    @clearGhost()\n    @ghost = nz.SpriteCharacter(@index,@character)\n      .setAlpha 0.5\n      .setMapPosition(mapx, mapy)\n      .setDirection(direction)\n    return @ghost\n\n  clearGhost: ->\n    if @ghost?\n      @ghost.remove()\n      @ghost = null\n    return\n\n  setMapPosition: (@mapx,@mapy) ->\n    {@x,@y} = nz.utils.mapxy2screenxy(@)\n    return @\n\n  setDirection: (@direction) ->\n    d = DIRECTIONS[@direction]\n    @body.rotation = d.rotation\n    @gotoAndPlay(d.name)\n    return @\n\n  updateBattle: ->\n    scene = @getRoot()\n    for enemy,i in scene.characterSprites when @index != i and enemy.isAlive()\n      @_updateAttack(enemy)\n    return\n\n  ###* 座標方向確認。\n  * キャラクターの向いている方向を考慮し、指定された座標が、キャラクターからみてどの方向にあるか確認する。\n  * @param {number} param.x          mapSprite の local X座標\n  * @param {number} param.y          mapSprite の local Y座標\n  * @param {number} param.start      確認する開始角度 -180 ～ 180\n  * @param {number} param.end        確認する終了角度 -180 ～ 180\n  * @param {Function} param.callback チェック結果をもらう関数\n  ###\n  checkDirection: (param) ->\n    {\n      r\n      start\n      end\n      anticlockwise\n      callback\n    } = param\n    r = nz.utils.relativeRotation(@body.rotation,@,param) unless r?\n    r1 = if anticlockwise then end   else start\n    r2 = if anticlockwise then start else end\n    res = false\n    if r1 < r2\n      res = r1 <= r and r <= r2\n    else\n      res = r1 <= r or  r <= r2\n    if callback?\n      ra = r\n      unless res\n        ra = r1 if r1 > r\n        ra = r2 if r  > r2\n      callback(res,ra)\n    return res\n\n  _checkAttackDirection: (p) ->\n    p.x -= @width  / 2\n    p.y -= @height / 2\n    return true if @checkDirection(p)\n    p.x += @width\n    return true if @checkDirection(p)\n    p.y += @height\n    return true if @checkDirection(p)\n    p.x -= @width\n    return true if @checkDirection(p)\n    return false\n\n  _updateAttack: (enemy) ->\n    return unless @attack\n    return if @character.team == enemy.character.team\n    cw = @character.weapon\n    distance = enemy.position.distance @position\n    if distance < (cw.height + @body.width / 2)\n      p = enemy.position.clone().$extend cw.range\n      if @_checkAttackDirection(p)\n        @_attackAnimation()\n        @attack = false\n    return\n\n  _enterframeWeapon: (e) ->\n    return unless @weapon.visible\n    scene = @getRoot()\n    for enemy,i in scene.characterSprites when @index != i and not @_weaponHitFlag[i]\n      if @_isHitWeapon(enemy)\n        enemy.flare 'hitWeapon', {owner: @}\n        @_weaponHitFlag[i] = true\n    return\n\n  _isHitWeapon: (enemy) ->\n    for w in [16 ... @weapon.width] by 8\n      rt = tm.geom.Vector2 0,0\n      rt.setDegree(@weapon.rotation + @body.rotation, w)\n      rt = @localToGlobal rt\n      if enemy.isHitPoint(rt.x,rt.y)\n        return true\n    return false\n\n  startAction: (turn) ->\n    @tweener.clear()\n    @move      = false\n    @attack    = false\n    @action    = true\n    @mapx      = @character.mapx\n    @mapy      = @character.mapy\n    @direction = @character.direction\n\n    command = @character.commands[turn]\n    if command?\n      @attack = command.attack\n      for action in command.actions\n        @_setShotAction(action.shot) if action.shot?\n        @_setMoveAction(action.move) if action.move?\n        @_setRotateAction(action.rotate) if action.rotate?\n        if @attack\n          @tweener.call @updateBattle,@,[]\n      @tweener.call @_endAction,@,[]\n    else\n      @_endAction()\n    return\n\n  applyPosition: ->\n    @character.mapx      = @mapx\n    @character.mapy      = @mapy\n    @character.direction = @direction\n    return\n\n  _endAction: ->\n    @applyPosition()\n    @move                = false\n    @action              = false\n    # まだ攻撃してない場合、攻撃をつづける\n    if @attack\n      @updateBattle()\n      @update = @updateBattle\n    @tweener.clear()\n    return\n\n  isMove: -> @move\n  isStop: -> not @move\n  isDead: -> @character.isDead()\n  isAlive: -> @character.isAlive()\n\n  _setShotAction: (param) ->\n    @tweener.call @_shotAnimation,@,[param]\n    @tweener.call @_fatigue,@,[ST_COST.shot]\n    return\n\n  _setMoveAction: (param) ->\n    @move = true\n    {\n      @mapx\n      @mapy\n      speed\n    } = param\n    {\n      x\n      y\n    } = nz.utils.mapxy2screenxy(@)\n    @tweener.move(x,y,speed)\n    @tweener.call @_fatigue,@,[ST_COST.move]\n    return\n\n  _setRotateAction: (param) ->\n    {\n      direction\n      speed\n    } = param\n    @tweener.wait speed\n    @tweener.call @setDirection,@,[direction]\n    @tweener.call @_fatigue,@,[ST_COST.rotate]\n\n  _attackAnimation: ->\n    # 攻撃アニメーション中は、アクションを続ける\n    action = @action\n    @action = true\n    finish = ->\n      @weapon.visible  = false\n      @weapon.rotation = 0\n      @tweener.play()\n      @action = action # 元の状態に\n      @_fatigue(ST_COST.attack)\n    @tweener.pause()\n    cw = @character.weapon\n    @weapon.visible = true\n    @weapon.rotation = cw.range.start\n    @weapon.tweener\n        .clear()\n        .wait 50\n        .rotate(cw.range.end,cw.speed)\n        .call finish,@,[]\n\n  _shotAnimation: (param) ->\n    {\n      rotation\n      distance\n      speed\n    } = param\n    scene = @getRoot()\n    bv = scene.mapSprite.globalToLocal @localToGlobal(@body.position)\n    ballet = tm.display.CircleShape(\n      x:      bv.x\n      y:      bv.y\n      width:  10\n      height: 10\n    ).addChildTo scene.mapSprite\n    angle = Math.degToRad(rotation)\n    vx = distance * Math.cos(angle) + bv.x\n    vy = distance * Math.sin(angle) + bv.y\n    speed = speed * distance / 32\n    info = {\n      ballet: ballet\n      owner: @\n    }\n    ｈ = scene.eventHandler\n    finish = ->\n      ballet.remove()\n      ｈ.removeBallet(info)\n    ballet.tweener\n      .move(vx,vy,speed)\n      .call finish, @, []\n    ballet.on 'collisionenter', (e) ->\n      e.other.flare 'hitBallet', info\n      ballet.tweener\n        .clear()\n        .call finish, @, []\n\n    ｈ.addBallet(info)\n    return\n\n  _deadAnimation: (param) ->\n    # TODO:死亡時アニメーション\n    return\n\n  _hitBallet: (shooter,ballet) ->\n    d = shooter.character.shot.damage - @character.armor.defense\n    @_damage(d)\n    shooter.counter.hitBallet(d)\n    @counter.receiveBallet(d)\n    # TODO: SE\n    return\n\n  _hitWeapon: (attacker) ->\n    d = attacker.character.weapon.damage - @character.armor.defense\n    @_damage(d)\n    attacker.counter.hitWeapon(d)\n    @counter.receiveWeapon(d)\n    # TODO: SE\n    return\n\n  _damage: (n)->\n    return if n <= 0\n    if @character.isAlive()\n      @character.hp -= n\n    h = @getRoot().eventHandler\n    if @character.isDead()\n      h.deadCharacter(@character)\n      @_dead()\n    h.refreshStatus()\n    return\n\n  _dead: ->\n    @attack = false\n    @_endAction()\n    @hide()\n    return\n\n  _fatigue: (n) ->\n    return if n <= 0\n    @character.sp -= n\n    @getRoot().eventHandler?.refreshStatus()\n    return\n","###*\n* @file SpriteStatus.coffee\n* ステータス表示用スプライト\n###\n\nDIRECTIONS = nz.system.character.directions\n\ntm.define 'nz.SpriteStatus',\n  superClass: tm.display.CanvasElement\n\n  init: (param) ->\n    {\n      @index\n      @character\n      @characterSprite\n      @detail\n    } = param\n    @superInit()\n    @setOrigin(0.0,0.0)\n\n    @width          = 32 * 5\n    @height         = 32 * 2.5\n    @alpha          = 1.0\n    @boundingType   = 'rect'\n    @interactive    = true\n    @checkHierarchy = true\n    @bgColor        = 'blanchedalmond'\n\n    form =\n      children:\n        bg:\n          type:          'RoundRectangleShape'\n          width:         @width\n          height:        @height\n          strokeStyle:   'black'\n          fillStyle:     @bgColor\n          lineWidth:     1\n          shadowBlur:    1\n          shadowOffsetX: 2\n          shadowOffsetY: 2\n          shadowColor:   'gray'\n          originX:       @originX\n          originY:       @originY\n        name: @_label\n          text:          @character.name\n          fontSize:      8\n          fillStyle:     'black'\n          stroke:        false\n          x:             8\n          y:             10\n        action: @_label\n          text:          ''\n          fontSize:      8\n          fillStyle:     'black'\n          stroke:        false\n          x:             8\n          y:             20\n        hpGauge: @_gauge\n          y:             38\n          color:         'Green'\n          _maxValue:     @character.maxhp\n        spGauge: @_gauge\n          y:             50\n          color:         'DarkSlateBlue'\n          _maxValue:     @character.maxsp\n        hpLabel: @_label\n          text:          'HP'\n          fontSize:      12\n          x:             10\n          y:             38 - 6\n        spLabel: @_label\n          text:          'SP'\n          fontSize:      12\n          x:             10\n          y:             50 - 6\n    #if @detail\n    #  form.children.apGauge =\n    #    type:          'tm.ui.GlossyGauge'\n    #    x:             8\n    #    y:             48\n    #    width:         @width - 16\n    #    height:        4\n    #    originX:       @originX\n    #    originY:       @originY\n    #    borderWidth:   1\n    #    color:         'red'\n    #    bgColor:       @bgColor\n    #    borderColor:   gaugebBrderColor\n    #    animationFlag: false\n    #    _maxValue:     @character.maxap\n    @fromJSON form\n\n    @sprite = tm.display.AnimationSprite(@characterSprite.ss).addChildTo @\n    @sprite.x = @width - 40\n    @sprite.y = 10\n    @sprite.setScale(0.5,0.5)\n    @sprite.setOrigin(0.0,0.0)\n\n    @on 'refreshStatus', @refreshStatus\n\n    @eventHandler = nz.EventHandlerBattle()\n    @on 'pointingend', -> @eventHandler.selectStatus(status:@)\n\n  _gauge: (param) ->\n    {\n      type:          'tm.ui.GlossyGauge'\n      x:             8\n      y:             0\n      width:         @width - 16\n      height:        6\n      originX:       @originX\n      originY:       @originY\n      borderWidth:   1\n      color:         'green'\n      bgColor:       @bgColor\n      borderColor:   'gray'\n      animationTime: 1000\n    }.$extend param\n\n  _label: (param) ->\n    {\n      type:          'Label'\n      fillStyle:     'white'\n      strokeStyle:   'black'\n      lineWidth:     2\n      stroke:        true\n      align:         'left'\n      baseline:      'top'\n      originX:       @originX\n      originY:       @originY\n      fontSize:      12\n      text:          'null'\n    }.$extend param\n\n  refreshStatus: (param) ->\n    {\n      turn\n    } = param\n\n    @sprite.gotoAndPlay DIRECTIONS[@characterSprite.direction].name\n\n    @_refreshActionText turn\n\n    @hpGauge.value = @character.hp\n    @spGauge.value = @character.sp\n    # @apGauge.value = ap if @detail\n\n  _refreshActionText: (turn) ->\n    text = 'Action: '\n    if @detail\n      ap = @character.getRemnantAp(turn)\n      actions = []\n      actions.push 'Attack' if @character.isAttackCommand(turn)\n      actions.push 'Shot'   if @character.isShotCommand(turn)\n      actions.push 'Move'   if @character.isMoveCommand(turn)\n      text += actions.join(' & ')\n      text += \" (AP=#{ap})\"\n    else\n      text += '???'\n    @action.text = text\n","###*\n* @file SpriteHelpText.coffee\n* ステータス表示用スプライト\n###\n\nSCREEN_W = nz.system.screen.width\nSCREEN_H = nz.system.screen.height\nCENTER_X = SCREEN_W / 2\nCENTER_Y = SCREEN_H / 2\n\ntm.define 'nz.SpriteHelpText',\n  superClass: tm.display.TextShape\n\n  init: (param = {}) ->\n    {\n      width\n      height\n      text\n      fontSize\n    } = param = {\n      width: SCREEN_W\n      height: 32\n      fontSize: 14\n    }.$extend param\n    @superInit(param)\n    @autoRender = false\n\n    x = SCREEN_W\n    y = SCREEN_H - @height / 2\n    @setOrigin   0.0, 0.5\n    @setPosition x,   y\n    if text?\n      @setText text\n\n  setText: (text='') ->\n    return if @_text is text\n    @_text = text\n    @fit()\n    @render()\n    if @_text isnt ''\n      if @width > SCREEN_W\n        # 長い場合にスクロールさせて表示\n        x = SCREEN_W\n        y = SCREEN_H - @height / 2\n        @setOrigin 0.0,0.5\n        @tweener\n          .clear()\n          .set(x:x,y:y)\n          .move(-@width,y,@width * 50)\n          .setLoop(true)\n      else\n        @setOrigin 0.5,0.5\n        @setPosition CENTER_X, SCREEN_H - 16\n    else\n      @tweener.clear()\n    return @\n\nnz.SpriteHelpText.prototype.accessor 'text', {\n  get: -> @_text\n  set: (text) -> @setText(text)\n}\n","###*\n* @file EventHandlerBattle.coffee\n* 戦闘用イベントハンドラ\n###\n\ntm.define 'nz.EventHandlerBattle',\n\n  ###* 初期化\n  * @classdesc 戦闘用イベントハンドラ\n  * @constructor nz.EventHandlerBattle\n  ###\n  init: ->\n\n  _fireAll: (e,param={}) ->\n    app   = nz.system.app\n    scene = app.currentScene\n    if typeof e is 'string'\n      e       = tm.event.Event(e)\n      e.app   = app\n      e.scene = scene\n      e.turn  = scene.turn\n      e.$extend param\n    @_dispatchEvent(e,scene)\n    return\n\n  _dispatchEvent: (e,element) ->\n    if element.hasEventListener(e.type)\n      element.fire(e)\n    for child in element.children\n      @_dispatchEvent(e,child) if child?\n    return\n\n  refreshStatus: ->\n    @_fireAll('refreshStatus')\n    return\n\n  deadCharacter: (character) ->\n    @_fireAll('deadCharacter',character:character)\n    return\n\n  startBattleScene: ->\n    @_fireAll('startBattleScene')\n    return\n\n  endBattleScene: ->\n    @_fireAll('endBattleScene')\n    return\n\n  replayBattle: ->\n    @_fireAll('replayBattle')\n    return\n\n  startBattlePhase: ->\n    @_fireAll('startBattlePhase')\n    return\n\n  endBattlePhase: ->\n    @_fireAll('endBattlePhase')\n    return\n\n  startBattleTurn: ->\n    @_fireAll('startBattleTurn')\n    return\n\n  endBattleTurn: ->\n    @_fireAll('endBattleTurn')\n    return\n\n  addBallet: (param) ->\n    @_fireAll('addBallet',param)\n    return\n\n  removeBallet: (param) ->\n    @_fireAll('removeBallet',param)\n    return\n\n  selectStatus: (param) ->\n    @_fireAll('selectStatus',param)\n    return\n","###*\n* @file SceneBase.coffee\n* シーンベース\n###\n\nSCREEN_W = nz.system.screen.width\nSCREEN_H = nz.system.screen.height\nCENTER_X = SCREEN_W / 2\nCENTER_Y = SCREEN_H / 2\n\ntm.define 'nz.SceneBase',\n  superClass: tm.app.Scene\n\n  init: ->\n    @superInit()\n    @on 'resume', ->\n      @_description?.show()\n      return\n    return\n\n  popMessage: (param) ->\n    {message} = param\n    scene = nz.ScenePopMessage\n      message:  message\n      width:    SCREEN_W / 2\n      height:   50\n      start:    [CENTER_X,-25]\n      center:   [CENTER_X,CENTER_Y,500]\n      end:      [CENTER_X,SCREEN_H + 25,500]\n      duration: 1000\n      fillStyle:   nz.system.dialog.fillStyle\n      strokeStyle: nz.system.dialog.strokeStyle\n      popwait:  500\n    @descriptionOff()\n    @app.pushScene scene\n\n  openMenuDialog: (param) ->\n    dlg = nz.SceneMenu(param)\n    @descriptionOff()\n    @app.pushScene dlg\n    return dlg\n\n  descriptionOff: ->\n    @_description?.hide()\n    return\n\n  description: (text) ->\n    unless @_description?\n      @_description = nz.SpriteHelpText().addChildTo @\n    @_description.text = text\n\n  setupKeyboradHander: ->\n    @on 'enterframe', @createKeyboradHander()\n    return\n\n  createKeyboradHander: ->\n    eventKeys      = ['up','down','left','right','enter']\n    repeatCount    = 0\n    repeatDelay    = 10\n    repeatIntarval = 0\n\n    return (e) ->\n      app = @app ? e.app\n      kb = app.keyboard\n      for key in eventKeys when kb.getKeyDown(key)\n        repeatCount = 0\n        @fire tm.event.Event('input_' + key)\n\n      for key in eventKeys when kb.getKey(key)\n        if repeatDelay < repeatCount++\n          @fire tm.event.Event('repeat_' + key)\n          repeatCount -= repeatIntarval\n\n  setupCursorHandler: (handler) ->\n    for k in ['up','down','left','right']\n      @on 'input_'  + k, handler\n      @on 'repeat_' + k, handler\n    return\n","###*\n* @file SceneMenu.coffee\n* メニューシーン\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\n\ntm.define 'nz.SceneMenu',\n  superClass: tm.ui.MenuDialog\n\n  init: (param) ->\n    param = {\n      self: @\n      screenWidth:  SCREEN_W\n      screenHeight: SCREEN_H\n    }.$extend param\n    @menuFunc  = (m.func for m in param.menu when m.func?)\n    param.menuDescriptions = (m.description for m in param.menu when m.description?)\n    param.menu = (m.name for m in param.menu when m.name?)\n    @superInit(param)\n\n    @box.setStrokeStyle nz.system.dialog.strokeStyle\n    @box.setFillStyle   nz.system.dialog.fillStyle\n\n    index = null\n    @on 'menuselected', (e) ->\n      index = e.selectIndex\n      return\n    @on 'menuclosed', (e) ->\n      @menuFunc[index]?.call(param.self,index) if index?\n      return\n\n    @on 'menuopened', ->\n      @_enter = false\n      @on 'enterframe', (e) ->\n        {app} = e\n        kb = app.keyboard\n        if kb.getKeyDown('up')\n          @up()\n        else if kb.getKeyDown('down')\n          @down()\n        else if kb.getKeyDown('enter')\n          unless @_enter\n            @_enter = true\n            @closeDialog(@_selected)\n        return\n      return\n\n    @description.remove()\n    @description = nz.SpriteHelpText().addChildTo @\n\n    return\n\n  up: ->\n    @setIndex @_selected - 1\n    return\n  down: ->\n    @setIndex @_selected + 1\n    return\n\n  setIndex: (i) ->\n    @_selected = (i + @menu.length) % @menu.length\n    @selectValue = @menu[@_selected]\n    @selectIndex = @_selected\n    @dispatchEvent tm.event.Event('menuselect')\n    return\n","###*\n* @file SceneTitleMenu.coffee\n* タイトルシーン\n###\n\ntm.define 'nz.SceneTitleMenu',\n  superClass: nz.SceneBase\n\n  ###* 初期化\n  * @classdesc タイトルシーンクラス\n  * @constructor nz.SceneTitleMenu\n  ###\n  init: () ->\n    @superInit()\n\n    @on 'enter', ->\n      scene = tm.game.TitleScene(title:nz.system.title)\n      scene.on 'enterframe', ->\n        if @app.keyboard.getKeyDown('enter')\n          @onpointingstart()\n      @app.pushScene scene\n\n    @on 'resume', ->\n      @_sample_game()\n      return\n\n    return\n\n  _main_menu: ->\n    menu = [{\n    #  name: 'New Game'\n    #  description: '新しいゲームをはじめる'\n    #  func: @_new_game\n    #},{\n    #  name: 'Sample Game'\n    #  description: 'サンプルゲームをはじめる'\n    #  func: @_sample_game\n    #},{\n      name: 'Debug Game'\n      description: 'デバッグゲームをはじめる'\n      func: @_debug_game\n    },{\n      name: 'Load Game'\n      description: '保存したゲームをはじめる'\n      func: @_load_game\n    },{\n      name: 'Option'\n      description: 'ゲームオプション'\n      func: @_option\n    }]\n    @openMenuDialog\n      self: @\n      title: nz.system.title\n      menu: menu\n\n  ###* 新しいゲームを開始\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _new_game: ->\n    @app.replaceScene nz.SceneBattle(\n      mapId: 1\n      controlTeam: ['teamA']\n      characters: [\n        {name:'キャラクター1',team:'teamA'}\n        {name:'キャラクター2',team:'teamA'}\n        {name:'キャラクター3',team:'teamA'}\n        {name:'キャラクター4',team:'teamB'}\n        {name:'キャラクター5',team:'teamB'}\n        {name:'キャラクター6',team:'teamB'}\n      ]\n    )\n    return\n\n  ###* ゲームをロード\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _load_game: ->\n    console.log 'load game'\n    return\n\n  ###* システムオプション\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _option: ->\n    console.log 'option'\n    return\n\n  ###* 新しいゲームを開始\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _sample_game: ->\n    menu = [{\n      name: 'Player vs Computer'\n      description: 'プレイヤー 対 コンピューター'\n      func: -> @_sample_game_2 true\n    },{\n      name: 'Computer vs Computer'\n      description: 'コンピューター 対 コンピューター'\n      func: -> @_sample_game_2 false\n    }]\n    @openMenuDialog\n      self: @\n      title: 'サンプルゲーム'\n      menu: menu\n    return\n\n  _sample_game_2: (flag) ->\n    menu = [{\n      name: '1 vs 1'\n      description: '1 対 1'\n      func: -> @_generate_game\n        player: flag\n        team: [1,1]\n        mapId: 1\n    },{\n      name: '3 vs 3'\n      description: '3 対 3'\n      func: -> @_generate_game\n        player: flag\n        team: [3,3]\n        mapId: 1\n    }]\n    @openMenuDialog\n      self: @\n      title: 'サンプルゲーム'\n      menu: menu\n    return\n\n  ###* 新しいゲームを開始\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _debug_game: ->\n    @app.replaceScene nz.SceneBattle(\n      mapId: 1\n      controlTeam: []\n      characters: [\n        {\n          name:'キャラクター1'\n          team:'teamA'\n          ai:\n            name: 'Chaser'\n          weapon:\n            damage: 40\n            height: 48\n            width: 12\n            range:\n              start: 0\n              end: 120\n            speed: 600\n        }\n        #{\n        #  name:'キャラクター2'\n        #  team:'teamA'\n        #  ai:\n        #    name: 'Shooter'\n        #}\n        #{\n        #  name:'キャラクター3'\n        #  team:'teamA'\n        #  ai:\n        #    name: 'Runner'\n        #}\n        {\n          name:'キャラクター4'\n          team:'teamB'\n          teamColor: [0,0,0]\n          ai:\n            name: 'Shooter'\n        }\n        #{\n        #  name:'キャラクター5'\n        #  team:'teamB'\n        #  teamColor: [0,0,0]\n        #  ai:\n        #    name: 'Runner'\n        #}\n        #{\n        #  name:'キャラクター6'\n        #  team:'teamB'\n        #  teamColor: [0,0,0]\n        #  ai:\n        #    name: 'Shooter'\n        #}\n      ]\n    )\n    return\n\n  ###* 新しいゲームを開始\n  * @memberof nz.SceneTitleMenu#\n  ###\n  _generate_game: (param)->\n    {\n      player\n      team\n      mapId\n    } = {\n      player: true\n      mapId: 0\n    }.$extend param\n\n    ai = ['Shooter','Chaser','Runner']\n    teamColors = nz.system.team.colors.clone().shuffle()\n\n    i = 0\n    characters = []\n    for num,n in team\n      teamName  = 'team ' + (n + 1)\n      teamColor = teamColors.pop()\n      for c in [0 ... num]\n        i += 1\n        name = 'キャラクター ' + i\n        characters.push\n          name:      name\n          team:      teamName\n          teamColor: teamColor\n          ai:\n            name:    ai.random()\n\n    controlTeam = []\n    controlTeam.push 'team 1' if player\n\n    @app.replaceScene nz.SceneBattle\n      mapId:       mapId\n      controlTeam: controlTeam\n      characters:  characters\n    return\n","###*\n* @file SceneBattle.coffee\n* 戦闘シーン\n###\n\nSCREEN_W    = nz.system.screen.width\nSCREEN_H    = nz.system.screen.height\nDIRECTIONS  = nz.system.character.directions\nACTION_COST = nz.system.character.action_cost\nMSGS        = nz.system.messages\nMCD         = MSGS.battle.command\n\ntm.define 'nz.SceneBattle',\n  superClass: nz.SceneBase\n\n  ###* 初期化\n  * @classdesc 戦闘シーンクラス\n  * @constructor nz.SceneBattle\n  ###\n  init: (param) ->\n    {\n      @mapId\n      @characters\n      @controlTeam\n      @endCondition\n    } = param\n    @superInit()\n    @mapName = 'map_' + \"#{@mapId}\".paddingLeft(3,'0')\n    @_selectCharacterIndex = 0\n\n    unless @endCondition?\n      @endCondition =\n        type: 'team'\n        turn: 20\n\n    for c,i in @characters\n      unless c instanceof nz.Character\n        @characters[i] = new nz.Character(c)\n\n    @data =\n      turn:   0    # 戦闘ターン数\n      winner: null\n      replay: null\n      startInfo: {}\n\n    @eventHandler = nz.EventHandlerBattle()\n\n    @on 'enter', @load.bind @\n    return\n\n  load: ->\n    loaded = true\n    assets = {}\n    unless tm.asset.Manager.contains(@mapName)\n      assets[@mapName] = \"data/#{@mapName}.json\"\n      loaded = false\n    for c in @characters when not tm.asset.Manager.contains(c.ai.name)\n      src = c.ai.src ? \"nz/ai/#{c.ai.name}.js\"\n      unless nz.system.ai[c.ai.name]?\n        assets[c.ai.name] = src\n        loaded = false\n\n    unless loaded\n      scene = tm.game.LoadingScene(\n        assets:  assets\n        width:   SCREEN_W\n        height:  SCREEN_H\n        autopop: true\n      )\n\n      scene.on 'load', @setup.bind @\n\n      @app.pushScene scene\n    else\n      @setup()\n    return\n\n  setup: ->\n    scene = @\n\n    # マップ\n    @mapSprite = nz.SpriteBattleMap(@mapName).addChildTo(@)\n    @mapSprite.x = (SCREEN_W - @mapSprite.width ) - 32\n    @mapSprite.y = (SCREEN_H - @mapSprite.height) / 2\n\n    # ステータスフォルダ\n    @status = tm.display.CanvasElement().addChildTo @\n\n    x = y = 0\n    for character,i in @characters\n      # キャラクター\n      sprite = nz.SpriteCharacter(i,character)\n        .setVisible(false)\n        .addChildTo(@mapSprite)\n      @characterSprites.push sprite\n\n      # ステータス\n      s = nz.SpriteStatus(\n        index: i\n        character: character\n        characterSprite: sprite\n        detail: @controlTeam.contains character.team\n      )\n      s.setPosition x, y\n      @status.addChildAt s, 0\n      y += 32 * 2.5 - 8\n\n    @on 'selectStatus', (e) ->\n      {\n        scene\n        status\n      } = e\n      scene.activeStatus status\n      scene.blinkCharacter status.index\n\n    # 開始時位置決め\n    @one 'enterframe', ->\n      @_pushScene(\n        nz.SceneBattlePosition(\n          mapSprite: @mapSprite\n          controlTeam: @controlTeam\n        )\n      )\n      @one 'resume', ->\n        @eventHandler.startBattleScene()\n\n    @one 'startBattleScene', ->\n      # 基本操作\n      @on 'map.pointingend', @_mapPointingend\n      # イベント\n      @setupKeyboradHander()\n      @on 'input_enter'  , @inputEnter\n      @setupCursorHandler @cursorHandler\n\n      @data.startInfo.characters = []\n      for c in @characters\n        @data.startInfo.characters.push\n          mapx:      c.mapx\n          mapy:      c.mapy\n          direction: c.direction\n          hp:        c.hp\n          sp:        c.sp\n      @_startInputPhase()\n      return\n\n    @eventHandler.refreshStatus()\n    return\n\n  cursorHandler: (e) ->\n    @mapSprite.fire e\n\n  inputEnter: (e) ->\n    @_mapPointingend @mapSprite.cursor\n\n  _mapPointingend: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    @mapSprite.clearBlink()\n    targets = @mapSprite.findCharacterGhost(mapx,mapy)\n    for t in @mapSprite.findCharacter(mapx,mapy) when t.isAlive()\n      if not t.hasGhost() or t.ghost.mapx != mapx or t.ghost.mapy != mapy\n        targets.push t\n    targets = (t for t in targets when @controlTeam.contains t.character.team)\n    if targets.length == 0\n      @_openGameMenu()\n    else if targets.length == 1\n      @_openCommandMenu(targets[0])\n    else\n      @_openSelectCharacterMenu(targets)\n    return\n\n  activeStatus: (status) ->\n    @status.addChild status\n    return\n\n  blinkCharacter: (index) ->\n    s = @characterSprites[index]\n    @mapSprite.clearBlink()\n    if s.isAlive()\n      @mapSprite.blink(s.mapx,s.mapy)\n      @mapSprite.blink(s.ghost.mapx,s.ghost.mapy) if s.hasGhost()\n    return\n\n  _createResultTimeup: ->\n    name = ''\n    score = 0\n    t = {}\n    for c in @characters when c.isAlive()\n      unless t[c.team]?\n        t[c.team] = c.hp\n      else\n        t[c.team] += c.hp\n      if score < t[c.team]\n        name  = c.team\n        score = t[c.team]\n    winner = [\n      {\n        name: name\n        score: score\n      }\n    ]\n    for k,v of t when name isnt k and score is v\n      winner.push\n        name: k\n        score: v\n    if winner.length is 1\n      @data.result =\n        winner: winner[0]\n    else\n      @data.result =\n        draw: winner\n    return\n\n  _createResultTeam: ->\n    # １チームが残っている場合に終了\n    t = null\n    for c in @characters when c.isAlive()\n      unless t?\n        t = c.team\n      else if t isnt c.team\n        return\n    @data.result = {\n      winner:\n        name: t\n    }\n    return\n\n  _createResult: ->\n    # 時間切れの場合\n    if @turn >= @endCondition.turn\n      @_createResultTimeup()\n      return\n    # 終了タイプがチームの場合\n    if @endCondition.type is 'team'\n      @_createResultTeam()\n      return\n    return\n\n  isEnd: -> @data.result?\n\n  _pushScene: (scene) ->\n    @eventHandler.refreshStatus()\n    @one 'pause',  ->\n      @mapSprite.addChildTo scene\n      @status.addChildTo scene\n      return\n    @one 'resume', ->\n      @mapSprite.addChildTo @\n      @status.addChildTo @\n      @eventHandler.refreshStatus()\n      return\n    @descriptionOff()\n    @mapSprite.remove()\n    @status.remove()\n    @app.pushScene scene\n    return\n\n  _commandScene: (klass,callback) ->\n    target = @selectCharacterSprite\n    if @_selectGhost\n      target = @selectCharacterSprite.ghost\n    @_pushScene klass(\n      turn:       @turn\n      target:     target\n      callback:   callback\n      mapSprite:  @mapSprite\n      status:     @status\n      characters: @characters\n    )\n    @one 'resume', @_checkCommandConf.bind @\n    return\n\n  _openGameMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Command?'\n      menu: [\n        {name:'Next Turn'  , func: @_openTurnConfMenu, description: MCD.next_turn }\n        {name:'Option'     , func: @_option          , description: MCD.option    }\n        {name:'Exit Game'  , func: @_exitGame        , description: MCD.exit_game }\n        {name:'Close Menu'                           , description: MCD.close_menu}\n      ]\n    return\n\n  _openSelectCharacterMenu: (targets) ->\n    menu = []\n    for t in targets\n      menu.push\n        name: t.character.name\n        func: (i) -> @_openCommandMenu targets[i]\n        description: t.character.name + 'を選択。'\n    menu.push {name: 'Close Menu',description: MCD.close_menu}\n    @openMenuDialog\n      self: @\n      title: 'Select Character'\n      menu: menu\n    return\n\n  _openCommandMenu: (target) ->\n    @_selectCharacterIndex = target.index\n    @_selectGhost          = target.isGhost()\n    @activeStatus(s) for s in @status.children when s.index == target.index\n    menu  = []\n    sc    = @selectCharacter\n    acost = sc.getActionCost(@turn)\n    rap   = sc.getRemnantAp(@turn)\n    # アクションの入力が可能かどうか。（ゴーストを選択しているか、ゴーストを選択してない場合は、ゴーストを持っていなければ、入力可能）\n    if @_selectGhost or (not @_selectGhost and not target.hasGhost())\n      if rap >= ACTION_COST.move\n        menu.push\n          name: 'Move'\n          description: MSGS.battle.command.move\n          func: @_addMoveCommand\n      if rap >= ACTION_COST.rotate\n        menu.push\n          name: 'Rotate'\n          description: MSGS.battle.command.rotate\n          func: @_addRotateCommand\n      if rap >= ACTION_COST.attack\n        attack = sc.isAttackCommand(@turn)\n        shot   = sc.isShotCommand(@turn)\n        if not attack and not shot\n          menu.push\n            name: 'Attack'\n            description: MSGS.battle.command.attack\n            func: @_addAttackCommand\n          menu.push\n            name: 'Shot'\n            description: MSGS.battle.command.shot\n            func: @_addShotCommand\n    if acost > 0\n      menu.push\n        name: 'Reset Action'\n        description: MSGS.battle.command.reset\n        func: @_resetCommand\n    menu.push {name:'Close Menu'}\n    @openMenuDialog\n      self: @\n      title: sc.name\n      menu: menu\n    return\n\n  _openTurnConfMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Start Battle?'\n      menu: [\n        {name:'Yes',func: -> @_startBattlePhase() }\n        {name:'No'}\n      ]\n    return\n\n  _checkCommandConf: ->\n    for c in @characters when @controlTeam.contains(c.team) and c.isAlive()\n      if c.getRemnantAp(@turn) > 0\n        return\n    @_openTurnConfMenu()\n    return\n\n  _openResult: ->\n    @_pushScene nz.SceneBattleResult\n      mapSprite: @mapSprite\n      status: @status\n      data: @data\n    @one 'resume', ->\n      if @data.replay?\n        @_startReplay()\n      else\n        @eventHandler.endBattleScene()\n        @app.popScene()\n      return\n    return\n\n  _startReplay: ->\n    return unless @data.replay?\n    si = @data.startInfo\n    for sc,i in @characterSprites\n      c    = sc.character\n      o    = si.characters[i]\n      c.hp = o.hp\n      c.sp = o.sp\n      sc.setMapPosition(o.mapx,o.mapy)\n      sc.setDirection(o.direction)\n      sc.applyPosition()\n      sc.show()\n    @_startBattlePhase(@data.replay)\n    return\n\n  _exitGame: ->\n    nz.system.restart()\n    return\n\n  _startInputPhase: () ->\n    @data.turn += 1\n    #console.log \"battle turn #{@data.turn}\"\n    characters = @characters.map (c) -> c.createAiInfo()\n    for c,i in characters when not (@controlTeam.contains c.team) and c.isAlive()\n      nz.system.ai[c.ai.name]?.setupAction new nz.ai.Param(\n        character: c\n        characters: characters\n        graph: @mapSprite.graph\n        turn: @turn\n      )\n      @characters[i].commands[@turn] = c.commands[@turn]\n    @eventHandler.refreshStatus()\n\n    if @controlTeam.length is 0\n      @_startBattlePhase()\n    else\n      @popMessage(message:\"Turn #{@data.turn}\")\n      @description MSGS.battle.phase.command\n\n  _startBattlePhase: (param) ->\n    {\n      start\n      end\n    } = {\n      start: @turn\n      end: @turn\n    }.$extend param\n    @_pushScene(\n      nz.SceneBattlePhase(\n        start: start\n        end: end\n        mapSprite: @mapSprite\n        status: @status\n      )\n    )\n    @one 'resume', ->\n      @_createResult()\n      if @isEnd()\n        @_openResult()\n      else\n        @_startInputPhase()\n    return\n\n  _addMoveCommand: ->\n    @_commandScene(\n      nz.SceneBattleMoveCommand\n      ((route) ->\n        sc = @selectCharacter\n        sc.addMoveCommand @turn, route\n        if route.length > 0\n          @selectCharacterSprite.createGhost(route[route.length-1]).addChildTo @mapSprite\n        if sc.getRemnantAp(@turn) > 0\n          @_selectGhost = true\n          @one 'resume', @_addRotateCommand\n        return\n      ).bind @\n    )\n    return\n\n  _addAttackCommand: ->\n    sc = @selectCharacter\n    sc.setAttackCommand @turn\n    scs = @selectCharacterSprite\n    if not scs.hasGhost() and not scs.isGhost()\n      scs.createGhost(scs).addChildTo @mapSprite\n    @eventHandler.refreshStatus()\n    if sc.getRemnantAp(@turn) > 0\n      @_selectGhost = true\n      @_addMoveCommand()\n    else\n      @_checkCommandConf()\n    return\n\n  _addShotCommand: ->\n    @_commandScene(\n      nz.SceneBattleShotCommand\n      ((rotation) ->\n        sc  = @selectCharacter\n        scs = @selectCharacterSprite\n        sc.addShotCommand @turn, rotation\n        if not scs.hasGhost() and not scs.isGhost()\n          scs.createGhost(scs).addChildTo @mapSprite\n        if sc.getRemnantAp(@turn) > 0\n          @_selectGhost = true\n          @one 'resume', @_addMoveCommand\n        return\n      ).bind @\n    )\n    return\n\n  _addRotateCommand: ->\n    @_commandScene(\n      nz.SceneBattleDirectionCommand\n      ((direction1,direction2) ->\n        sc  = @selectCharacter\n        scs = @selectCharacterSprite\n        sc.addRotateCommand @turn, direction1, DIRECTIONS[direction1].rotateIndex[direction2]\n        unless scs.hasGhost()\n          scs.createGhost(scs).addChildTo @mapSprite\n        scs.ghost.setDirection(direction2)\n        return\n      ).bind @\n    )\n    return\n\n  _resetCommand: ->\n    @selectCharacter.clearCommand()\n    @selectCharacterSprite.clearGhost()\n    @eventHandler.refreshStatus()\n    return\n\nnz.SceneBattle.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\nnz.SceneBattle.prototype.getter 'selectCharacterSprite', -> @characterSprites[@_selectCharacterIndex]\nnz.SceneBattle.prototype.getter 'selectCharacter', -> @selectCharacterSprite.character\nnz.SceneBattle.prototype.getter 'turn', -> @data.turn\n","###*\n* @file SceneBattlePosition.coffee\n* 戦闘開始位置設定\n###\n\nMSGS   = nz.system.messages\nDIRNUM = nz.system.direction_num\n\ntm.define 'nz.SceneBattlePosition',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @controlTeam\n    } = param\n\n    @otherTeam = []\n\n    @teamArea  = {}\n    @members   = {}\n\n    areaIndex  = 0\n    for c in @mapSprite.characterSprites\n      team = c.character.team\n      unless @members[team]?\n        @members[team]  = []\n        @teamArea[team] = @mapSprite.map.start.area[areaIndex].clone()\n        @otherTeam.push team unless @controlTeam.contains team\n        areaIndex += 1\n      @members[team].push c\n\n    # CPU側の位置設定\n    for team in @otherTeam\n      area    = @teamArea[team]\n      friends = (m.character for m in @members[team])\n      for m,i in @members[team]\n        c = m.character\n        p = nz.system.ai[c.ai.name]?.setupBattlePosition(\n          character: c\n          friends:   friends\n          area:      area\n        )\n        p = area[i] unless p?\n        @_setBattlePosition(m,p[0],p[1])\n        m.applyPosition()\n\n    @on 'map.pointingover', @_mapPointingover\n    @on 'map.pointingend',  @_mapPointingend\n    @on 'enter',            @_start\n\n    @setupKeyboradHander()\n    @on 'input_enter'  , @inputEnter\n    @setupCursorHandler @cursorHandler\n\n  cursorHandler: (e) ->\n    @mapSprite.fire e\n    @_mapPointingover @mapSprite.cursor\n\n  inputEnter: (e) ->\n    @_mapPointingend @mapSprite.cursor\n\n  _start: ->\n    for c in @mapSprite.characterSprites when (not c.visible) and @controlTeam.contains c.character.team\n      @_selectCharacter c\n      @description MSGS.battle.position.setiing.format name:c.character.name\n      return\n    @_end()\n    return\n\n  _end: ->\n    mapycenter = @mapSprite.map.width / 2\n    for c in @mapSprite.characterSprites\n      c.visible = true\n      if c.mapy < mapycenter\n        c.character.direction = DIRNUM.DOWN\n        c.setDirection(DIRNUM.DOWN)\n      else\n        c.character.direction = DIRNUM.UP\n        c.setDirection(DIRNUM.UP)\n    @mapSprite.clearBlink()\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _selectCharacter: (@character) ->\n    @mapSprite.clearBlink()\n    for m in @teamArea[@character.character.team]\n      if @mapSprite.findCharacter(m[0],m[1]).length == 0\n        @mapSprite.blink(m[0],m[1])\n\n  _setBattlePosition: (c,mapx,mapy) ->\n    c.setMapPosition mapx,mapy\n    if c.mapy < @mapSprite.map.width / 2\n      c.setDirection DIRNUM.DOWN\n    else\n      c.setDirection DIRNUM.UP\n    return\n\n  _mapPointingover: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    @_setBattlePosition(@character,mapx,mapy)\n    @character.applyPosition()\n    @mapSprite.cursor.visible = true\n    @character.visible = true\n    return\n\n  _mapPointingend: (param) ->\n    {\n      mapx\n      mapy\n    } = param\n    if @mapSprite.isBlink(mapx,mapy)\n      @_mapPointingover(param)\n      for team in @controlTeam\n        for c in @members[team] when not c.visible\n          @_start()\n          return\n      @_end()\n    return\n","###*\n* @file SceneBattleRotatePointer.coffee\n* 方向指示用のポインターを操作するシーンクラス\n###\n\ntm.define 'nz.SceneBattleRotatePointer',\n\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @turn\n      @target\n      @callback\n      @mapSprite\n    } = param\n\n    @_keyInput = true\n    @_keyRotate = @target.body.rotation\n    @_keyRotateMult = 5\n\n    @setupKeyboradHander()\n\n    @on 'input_left'  , @_inputLeft\n    @on 'repeat_left' , @_inputLeft\n    @on 'input_right' , @_inputRight\n    @on 'repeat_right', @_inputRight\n    @on 'input_enter' , @_pointEnd\n\n    @on 'map.pointingover', -> @_keyInput = false\n    @on 'map.pointingend', @_pointEnd\n    @_createPointer()\n    return\n\n  _inputLeft: ->\n    @_keyInput = true\n    @_keyRotate -= @_keyRotateMult\n    @_rotatePointer @_keyRotate\n    return\n\n  _inputRight: ->\n    @_keyInput = true\n    @_keyRotate += @_keyRotateMult\n    @_rotatePointer @_keyRotate\n    return\n\n  update: (app) ->\n    @_movePointer(app.pointing) unless @_keyInput\n    return\n\n  _pointEnd: (e) ->\n    @_setupCommand()\n    @_removePointer()\n    @_endScene()\n    return\n\n  _setupCommand: ->\n    return\n\n  _rotatePointer: (r) ->\n    return\n\n  _movePointer: (pointing) ->\n    return\n\n  _endScene: ->\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _createPointer: ->\n    @pointer = tm.display.Shape(\n      width:  10\n      height: 10\n    ).addChildTo @mapSprite\n      .setPosition @target.x,@target.y\n    tm.display.CircleShape(\n      x:      40\n      width:  10\n      height: 10\n      fillStyle: 'blue'\n    ).addChildTo @pointer\n    @pointer.rotation = @target.body.rotation\n    return\n\n  _removePointer: ->\n    if @pointer?\n      @pointer.remove()\n      @pointer = null\n    return\n","###*\n* @file SceneBattleMoveCommand.coffee\n* 移動コマンド\n###\n\ntm.define 'nz.SceneBattleMoveCommand',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @turn\n      @target\n      @callback\n      @mapSprite\n      @characters\n    } = param\n\n    @on 'map.pointingover', @_over\n    @on 'map.pointingend', @_end\n\n    @setupKeyboradHander()\n    @setupCursorHandler (e) ->\n      @mapSprite.fire e\n      @_over @mapSprite.cursor\n    @on 'input_enter'  , @inputEnter\n\n  inputEnter: (e) ->\n    @_end @mapSprite.cursor\n\n  searchRoute: (e)->\n    op = {\n      graph:\n        cost: @target.character.getRemnantAp(@turn)\n    }\n    r = nz.utils.searchRoute(\n      @mapSprite.graph\n      @target\n      e\n      @characters\n      op\n    )\n    return r\n\n  _end: (e) ->\n    if @mapSprite.isBlink(e.mapx, e.mapy)\n      @callback @searchRoute(e)\n    @mapSprite.clearBlink()\n    @one 'enterframe', -> @app.popScene()\n    return\n\n  _over: (e) ->\n    @mapSprite.clearBlink()\n    ap = @target.character.getRemnantAp(@turn)\n    route = @searchRoute(e)\n    for r in route when r.cost <= ap\n      @mapSprite.blink(r.mapx,r.mapy)\n","###*\n* @file SceneBattleShotCommand.coffee\n* 射撃コマンドシーン\n###\n\ntm.define 'nz.SceneBattleShotCommand',\n\n  superClass: nz.SceneBattleRotatePointer\n\n  init: (param) ->\n    @superInit(param)\n    return\n\n  _setupCommand: ->\n    return unless @pointer?\n    @callback(@pointer.rotation)\n    return\n\n  _rotatePointer: (r) ->\n    return unless @pointer?\n    tcsr = @target.character.shot.range\n\n    r = nz.utils.relativeRotation(@target.body.rotation,r)\n    @target.checkDirection(\n      r:             r\n      start:         tcsr.start\n      end:           tcsr.end\n      anticlockwise: tcsr.anticlockwise\n      callback: ((result,ra) ->\n        ra += @target.body.rotation\n        unless result\n          @_keyRotate = ra\n        @pointer.rotation = ra\n      ).bind @\n    )\n    return\n\n  _movePointer: (pointing) ->\n    return unless @pointer?\n    t    = @mapSprite.globalToLocal pointing\n    tcsr = @target.character.shot.range\n\n    @target.checkDirection(\n      x:             t.x\n      y:             t.y\n      start:         tcsr.start\n      end:           tcsr.end\n      anticlockwise: tcsr.anticlockwise\n      callback: ((result,r) ->\n        if result\n          x = t.x - @target.x\n          y = t.y - @target.y\n          v = tm.geom.Vector2 x,y\n          r = Math.radToDeg v.toAngle()\n        else\n          r += @target.body.rotation\n        @pointer.rotation = r\n      ).bind @\n    )\n    return\n","###*\n* @file SceneBattleDirectionCommand.coffee\n* 向き設定コマンドシーン\n###\n\nDIRECTIONS  = nz.system.character.directions\n\ntm.define 'nz.SceneBattleDirectionCommand',\n\n  superClass: nz.SceneBattleRotatePointer\n\n  init: (param) ->\n    @superInit(param)\n\n    @_remnant = @target.character.getRemnantAp(@turn)\n\n    @_direction = @target.direction\n    @_keyRotateMult = 60\n    return\n\n  _setupCommand: ->\n    @callback(@target.direction,@_direction)\n    return\n\n  _rotatePointer: (rotation) ->\n    return unless @pointer?\n    rotation = nz.utils.normalizRotation rotation\n    for d,i in DIRECTIONS when 0 <= i and i < 6\n      if d.rotation - 30 <= rotation and rotation <= d.rotation + 30\n        costd = nz.Graph.directionCost(@target.direction, d.index)\n        if costd <= @_remnant\n          if @_direction != d.index\n            @_direction = d.index\n            @pointer.rotation = d.rotation\n            @_keyRotate = d.rotation\n            return\n    @_keyRotate = DIRECTIONS[@_direction].rotation\n    return\n\n  _movePointer: (pointing) ->\n    return unless @pointer?\n    t = @target.body.localToGlobal tm.geom.Vector2(0,0)\n    x = pointing.x - t.x\n    y = pointing.y - t.y\n    v = tm.geom.Vector2 x,y\n    @_rotatePointer Math.radToDeg v.toAngle()\n    return\n","###*\n* @file SceneBattlePhase.coffee\n* 戦闘フェーズの処理\n###\n\nMSGS = nz.system.messages\n\ntm.define 'nz.SceneBattlePhase',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @status\n      start\n      end\n    } = param\n    @startTuen = start\n    @endTurn   = end\n    @turn      = start\n\n    @_balletCount = 0\n\n    @eventHandler = nz.EventHandlerBattle()\n\n    @on 'enter', @_startPhase\n    @on 'addBallet', @_addBallet\n    @on 'removeBallet', @_removeBallet\n\n    @on 'map.pointingend', @_openPauseMenu\n\n    @setupKeyboradHander()\n    @on 'input_enter'  , @_openPauseMenu\n\n    @on 'selectStatus', (e) ->\n      {\n        scene\n        status\n      } = e\n      scene.activeStatus status\n\n    return\n\n  activeStatus: (status) ->\n    @status.addChild status\n    return\n\n  _openPauseMenu: ->\n    @openMenuDialog\n      self: @\n      title: 'Pause'\n      menu: [\n        {name: 'Exit Game?', func: @_exitGame , description: MSGS.battle.phase.exit_game }\n        {name: 'Close Menu'                   , description: MSGS.battle.phase.close_menu}\n      ]\n    return\n\n  _exitGame: (e) ->\n    app = @app ? e.app\n    app.popScene()\n    app.popScene()\n    nz.system.restart()\n    return\n\n  _removeBallet: (param) ->\n    {\n      ballet\n    } = param\n    @_balletCount -= 1\n\n  _addBallet: (param) ->\n    {\n      ballet\n      owner\n    } = param\n    @_balletCount += 1\n\n    # TODO: マップオブジェクトも追加しないと\n    return\n\n  _startPhase: ->\n    @eventHandler.startBattlePhase()\n    @_startTurn(@startTuen)\n    return\n\n  _endPhase: ->\n    @eventHandler.endBattlePhase()\n    @app.popScene()\n    return\n\n  _startTurn: (@turn) ->\n    @eventHandler.startBattleTurn()\n    @update = @updateTurn\n    return\n\n  _endTurn: ->\n    @eventHandler.endBattleTurn()\n    @update = null\n    return\n\n  _isEnd: -> @turn >= @endTurn\n\n  _isEndAllCharacterAction: ->\n    flag = @characterSprites\n      .filter (c) -> c.isAlive()\n      .some (c) -> c.action\n    #flag = false\n    #flag |= c.action for c in @characterSprites when c.isAlive()\n    return (not flag) and (@_balletCount is 0)\n\n  updateTurn: ->\n    if @_isEndAllCharacterAction()\n      @_endTurn()\n      if @_isEnd()\n        @_endPhase()\n      else\n        @_startTurn(@turn + 1)\n        if @_isEndAllCharacterAction()\n          @_endTurn()\n          @_endPhase()\n    return\n\nnz.SceneBattlePhase.prototype.getter 'characterSprites', -> @mapSprite.characterSprites\n","###*\n* @file SceneBattleResult.coffee\n* 戦闘結果の処理\n###\n\ntm.define 'nz.SceneBattleResult',\n  superClass: nz.SceneBase\n\n  init: (param) ->\n    @superInit()\n    {\n      @mapSprite\n      @data\n    } = param\n    @data.replay = undefined\n\n    @setOrigin(0.0,0.0)\n\n    @width          = nz.system.screen.width  - 32 * 2\n    @height         = nz.system.screen.height - 32 * 2\n    @fillStyle      = nz.system.dialog.fillStyle\n    @strokeStyle    = nz.system.dialog.strokeStyle\n    @boundingType   = 'rect'\n    @interactive    = true\n    @checkHierarchy = true\n\n    @one 'enterframe', @setup\n\n  setup: ->\n    form =\n      children:\n        bg:\n          type:          'RoundRectangleShape'\n          x:             32\n          y:             32\n          width:         @width\n          height:        @height\n          strokeStyle:   @strokeStyle\n          fillStyle:     @fillStyle\n          originX:       @originX\n          originY:       @originY\n        message:\n          type:      'Label'\n          fillStyle: 'black'\n          align:     'left'\n          baseline:  'top'\n          x:         32 + 8\n          y:         32 + 10\n          originX:   @originX\n          originY:   @originY\n          fontSize:  8\n    form.children.message.text =\n      if @data.result.winner?\n        'Winner! ' + @data.result.winner.name\n      else\n        'Draw!!! ' + (o.name for o in @data.result.draw).join ','\n\n    @fromJSON form\n\n    @setupKeyboradHander()\n    @on 'pointingend', @_openBattleEndMenu\n    @on 'input_enter', @_openBattleEndMenu\n\n  _startReplay: ->\n    @data.replay =\n      start: 1\n      end: @data.turn\n    @app.popScene()\n    return\n\n  _startRematch: ->\n    return\n\n  _endBattle: ->\n    @app.popScene()\n    return\n\n  _exitGame: ->\n    nz.system.restart()\n    return\n\n  _openBattleEndMenu: ->\n    msg = nz.system.messages.battle.result\n    @openMenuDialog\n      self: @\n      title: 'Battle End'\n      menu: [\n        {name: 'Replay',     func: @_startReplay  , description: msg.replay    }\n        #{name: 'Rematch',    func: @_startRematch , description: msg.rematch   }\n        #{name: 'End Battle', func: @_endBattle    , description: msg.end_battle}\n        {name: 'Exit Game',  func: @_exitGame     , description: msg.exit_game }\n        {name: 'Close Menu',                        description: msg.close_menu}\n      ]\n    return\n","###*\n* @file ScenePopMessage.coffee\n* POP Message シーン\n###\n\ntm.define 'nz.ScenePopMessage',\n\n  superClass: 'tm.app.Scene'\n\n  init: (param) ->\n    {\n      width\n      height\n      start\n      center\n      end\n      duration\n      easing\n      fillStyle\n      strokeStyle\n      message\n      popwait\n    } = {\n      width:  200\n      height: 50\n      start:  [100,-25]\n      center: [100,100]\n      end:    [100,-25]\n      duration: 1000\n      easing: 'swing'\n      fillStyle: 'gray'\n      strokeStyle: 'gray'\n      message:     '(test message)'\n      popwait:     undefined\n    }.$extend param\n\n    @_param = {\n      start:\n        x:        start[0]\n        y:        start[1]\n      center:\n        x:        center[0]\n        y:        center[1]\n        duration: center[2] ? duration\n        easing:   center[3] ? easing\n      end:\n        x:        end[0]\n        y:        end[1]\n        duration: end[2]    ? duration\n        easing:   end[3]    ? easing\n      popwait: popwait\n    }\n\n    @superInit()\n    @setInteractive(true)\n\n    {x,y} = @_param.start\n    @_board = tm.display.RoundRectangleShape\n      x:           x\n      y:           y\n      height:      height\n      width:       width\n      fillStyle:   fillStyle\n      strokeStyle: strokeStyle\n    @_board.addChildTo @\n\n    @_label = tm.display.Label message\n    @_label.addChildTo @_board\n\n    @on 'enterframe', (e) ->\n      if e.app.keyboard.getKeyDown('enter')\n        @outAnimation()\n    @on 'pointingend', -> @outAnimation()\n    @on 'enter', -> @inAnimation()\n\n    @_out = false\n\n  inAnimation: ->\n    return if @_out\n    {x,y,duration,easing} = @_param.center\n    @_board.tweener\n      .clear()\n      .move(x,y,duration,easing)\n    if @_param.popwait?\n      @_board.tweener\n        .wait @_param.popwait\n        .call @outAnimation, @, []\n\n  outAnimation: ->\n    return if @_out\n    @_out = true\n    {x,y,duration,easing} = @_param.end\n    @_board.tweener\n      .clear()\n      .move(x,y,duration,easing)\n      .call (-> @_out = false), @, []\n      .call (-> @app.popScene()), @, []\n","###* AIパラメータ.\n* @file Param.coffee\n###\n\n###* nineteen namespace.\n* @namespace nz\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\n###* AI namespace.\n* @namespace nz.ai\n###\nnz.ai = nz.ai ? {}\n\nDIRECTIONS = nz.system.character.directions\n\nclass nz.ai.Param\n\n  ###* 戦闘ターン数\n  * @var {number} nz.ai.Param#turn\n  ###\n  ###* 設定対象キャラクター\n  * @var {nz.Character} nz.ai.Param#character\n  ###\n  ###* 設定対象を含む戦闘に参加しているキャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#characters\n  ###\n  ###* 設定対象を含まない味方キャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#friends\n  ###\n  ###* 敵キャラクターの配列\n  * @var {Array<nz.Character>} nz.ai.Param#targets\n  ###\n  ###* 対象キャラクター／場所。主にアクション設定時の対象として使用される。初期値は一番近い敵キャラクター。\n  * @var {Array<nz.Character|Object>} nz.ai.Param#target\n  ###\n  ###* 対象キャラクター／場所までの距離。初期値は一番近い敵キャラクターまでの距離。\n  * @var {Array<nz.Character|Object>} nz.ai.Param#distance\n  ###\n  ###* マップ情報\n  * @var {nz.Graph} nz.ai.Param#graph\n  ###\n\n  ###* コンストラクタ.\n  * @classdesc AIパラメータ.\n  * @constructor nz.ai.Param\n  * @param {Object}              param            初期化パラメータ\n  * @param {nz.Character}        param.character  AI対象キャラクター\n  * @param {Array<nz.Character>} param.characters AI対象外の戦闘参加キャラクター\n  * @param {nz.Graph}            param.graph      マップ情報\n  * @param {number}              param.turn       現在の戦闘ターン数\n  ###\n  constructor: (param) ->\n    {\n      @character\n      @characters\n      @graph\n      @turn\n    } = param\n    @setFriendsAndTargets()\n    @setNearTarget()\n    return\n\n  ###*\n  * @private\n  ###\n  _searchCharacters: (rotatedir, distance, characters, character = @character) ->\n    {\n      mapx\n      mapy\n      direction\n    } = character\n    nodes = nz.Graph.frontArea(\n      mapx:      mapx\n      mapy:      mapy\n      direction: direction + rotatedir\n      distance:  distance\n    )\n    r = []\n    for n in nodes\n      for c in characters\n        if n.mapx is c.mapx and n.mapy is c.mapy\n          r.push c\n    return r\n\n  ###* 敵の範囲検索\n  * @memberof nz.ai.Param#\n  * @method searchTargets\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\n  * @param {number} distance  検索距離\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\n  ###\n  searchTargets: (rotatedir,distance) ->\n    return @_searchCharacters rotatedir,distance,@targets\n\n  ###* 味方の範囲検索\n  * @memberof nz.ai.Param#\n  * @method searchFriends\n  * @param {number} rotatedir 向いている方向に対する検索する回転方向\n  * @param {number} distance  検索距離\n  * @return {Array<nz.Character>} 見つかったキャラクター配列\n  ###\n  searchFriends: (rotatedir,distance) ->\n    return @_searchCharacters rotatedir,distance,@friends\n\n  ###* 近くの敵をターゲットとして検索する\n  * @memberof nz.ai.Param#\n  * @method findNearTarget\n  ###\n  findNearTarget: ->\n    result = {\n      target: null\n      distance: 99\n      rotation: null\n    }\n    for t in @targets\n      d = nz.Graph.distance(@character,t)\n      if d < result.distance\n        result.distance = d\n        result.target = t\n    if result.target?\n      d = @character.getLastDirection @turn\n      r = DIRECTIONS[d].rotation\n      c = nz.utils.mapxy2screenxy @character\n      t = nz.utils.mapxy2screenxy result.target\n      #console.log \"#{d} #{r} #{c} #{t}\"\n      result.rotation = nz.utils.relativeRotation(r,c,t)\n    return result\n\n  ###* 周囲6方向の位置を座標を取得\n  * @param {number} n 距離\n  * @return {Array} {mapx,mapy} の座標を表したオブジェクトは配列\n  ###\n  getHexPosition: (n=6) ->\n    c = @character\n    nx = n\n    ny1 = n / 2\n    ny2 = n / 2\n    if n % 2 != 0\n      if c.mapx % 2 == 0\n        ny1 -= 0.5\n        ny2 += 0.5\n      else\n        ny1 += 0.5\n        ny2 -= 0.5\n    return (\n      for res in [\n        {mapx: c.mapx     , mapy: c.mapy - n  }\n        {mapx: c.mapx     , mapy: c.mapy + n  }\n        {mapx: c.mapx - nx, mapy: c.mapy - ny1}\n        {mapx: c.mapx - nx, mapy: c.mapy + ny2}\n        {mapx: c.mapx + nx, mapy: c.mapy - ny1}\n        {mapx: c.mapx + nx, mapy: c.mapy + ny2}\n      ] when @graph.grid[res.mapx]?[res.mapy]?\n        res\n    )\n\n  ###* 戦闘参加キャラクターの敵と味方を分ける。\n  * @memberof nz.ai.Param#\n  * @method setFriendsAndTargets\n  ###\n  setFriendsAndTargets: ->\n    @friends = []\n    @targets = []\n    for c in @characters when c.name != @character.name\n      if @character.team == c.team\n        @friends.push c\n      else\n        @targets.push c\n    return\n\n  ###* 近くにいる敵キャラクターをターゲットに設定。距離と方向も設定する。\n  * @memberof nz.ai.Param#\n  * @method setNearTarget\n  ###\n  setNearTarget: ->\n    r = @findNearTarget()\n    @target   = r.target\n    @distance = r.distance\n    @rotation = r.rotation\n    return\n\n  ###* 射撃範囲にターゲットがいるか確認する\n  * @memberof nz.ai.Param#\n  * @method checkShotRange\n  ###\n  checkShotRange: ->\n    self = @\n    source = nz.utils.mapxy2screenxy @character\n    source.direction = @character.direction\n    target = nz.utils.mapxy2screenxy @target\n    data = {\n      source: source\n      target: target\n      range: @character.shot.range\n      callback: (res,r) ->\n        self.rotation = r if res\n    }\n    return nz.utils.checkDirectionRange(data)\n\n  ###* 指定した座標が移動できるか確認する(コスト計算含まない)\n  * @memberof nz.ai.Param#\n  * @method checkMovePosition\n  * @param {Object} p {mapx,mapy}\n  ###\n  checkMovePosition: (p) ->\n    return false unless p?\n    node = @graph.grid[p.mapx]?[p.mapy]\n    return false unless node?\n    return false if node.isWall()\n    for c in @characters\n      if c.mapx is p.mapx and c.mapy is p.mapy\n        return false\n    return true\n\n  getFrontPosition: ->\n    c = @character.getLastPosition(@turn)\n    c.direction = @character.getLastDirection(@turn)\n    return nz.Graph.frontPosition c\n\n  getBackPosition: ->\n    c = @character.getLastPosition(@turn)\n    c.direction = @character.getLastDirection(@turn)\n    return nz.Graph.backPosition c\n\n  ###* 前に移動できるか確認する(コスト計算含む)\n  * @memberof nz.ai.Param#\n  * @method checkFrontPosition\n  ###\n  checkFrontPosition: ->\n    p = @getFrontPosition()\n    unless @checkMovePosition(p)\n      return false\n    node = @graph.grid[p.mapx][p.mapy]\n    if @character.getRemnantAp() < node.weight + 1\n      return false\n    return true\n\n  ###* 後ろに移動できるか確認する(コスト計算含む)\n  * @memberof nz.ai.Param#\n  * @method checkBackPosition\n  ###\n  checkBackPosition: ->\n    p = @getBackPosition()\n    unless @checkMovePosition(p)\n      return false\n    node = @graph.grid[p.mapx][p.mapy]\n    if @character.getRemnantAp() < node.weight + 1\n      return false\n    return true\n\n  ###* 移動コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveCommand\n  ###\n  setMoveCommand: (args={}) ->\n    target = args.target ? @target\n    length = args.length ? 99\n    route  = nz.utils.searchRoute @graph,@character,target,@characters\n    if length < route.length\n      route = route[0 ... length]\n    @character.addMoveCommand @turn,route\n    return\n\n  ###* 攻撃コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setAttackCommand\n  ###\n  setAttackCommand: ->\n    @character.setAttackCommand @turn\n    return\n\n  ###* 射撃コマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setShotCommand\n  ###\n  setShotCommand: ->\n    direction = @character.getLastDirection @turn\n    rotation = DIRECTIONS[direction].rotation\n    @character.addShotCommand @turn,@rotation + rotation\n    return\n\n  ###* 後ろに移動するコマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveBackCommand\n  * @param {number} num 後退する歩数\n  ###\n  setMoveBackCommand: (num=1) ->\n    for i in [0 .. num]\n      if @checkBackPosition()\n        pos  = @getBackPosition()\n        node = @graph.grid[pos.mapx][pos.mapy]\n        cost = node.weight + 1\n        route = {\n          mapx: pos.mapx\n          mapy: pos.mapy\n          cost: cost\n          back: true\n          direction: pos.direction\n        }\n        @character.addMoveCommand @turn, [route]\n    return\n\n  ###* 前に移動するコマンドを設定する\n  * @memberof nz.ai.Param#\n  * @method setMoveFrontCommand\n  * @param {number} num 前進する歩数\n  ###\n  setMoveFrontCommand: (num=1) ->\n    for i in [0 .. num]\n      if @checkFrontPosition()\n        pos  = @getFrontPosition()\n        node = @graph.grid[pos.mapx][pos.mapy]\n        cost = node.weight + 1\n        route = {\n          mapx: pos.mapx\n          mapy: pos.mapy\n          cost: cost\n          back: false\n          direction: pos.direction\n        }\n        @character.addMoveCommand @turn, [route]\n    return\n\n  ###* 方向転換コマンドを設定する（相対値）\n  * @memberof nz.ai.Param#\n  * @method setRotateCommand\n  * @param {number} rotate 方向転換する値(-3から+3の相対値)\n  ###\n  setRotateCommand: (rotate) ->\n    d = @character.getLastDirection @turn\n    @character.addRotateCommand @turn, d, rotate\n    return\n\n  ###* 方向転換コマンドを設定する（絶対値）\n  * @memberof nz.ai.Param#\n  * @method setDirectionCommand\n  * @param {number} direction 方向転換する方向(0から5の絶対値)\n  ###\n  setDirectionCommand: (direction) ->\n    if 0 <= direction and direction <= 5\n      d = @character.getLastDirection @turn\n      @character.addRotateCommand @turn, d, DIRECTIONS[d].rotateIndex[direction]\n    return\n","###*\n* @file Default.coffee\n* デフォルトAI\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nnz.ai = nz.ai ? {}\n\nclass nz.ai.Default\n\n  ###* 初期化\n  * @classdesc デフォルトAIクラス\n  * @constructor nz.ai.Default\n  ###\n  constructor: ->\n\n  ###* 戦闘開始位置設定\n  * @memberof nz.ai.Default#\n  * @method setupBattlePosition\n  * @param  {Object}         param           設定用パラメータ\n  * @param  {nz.Character}   param.character 設定対象のキャラクター\n  * @param  {nz.Character[]} param.friends   設定対象を含む味方のキャラクター配列\n  * @param  {Object[]}       param.area      開始位置情報の配列(mapdata.start.area)\n  * @return {Object[]}       対象キャラクターの位置を、param.area の配列から１つ選択し返す\n  ###\n  setupBattlePosition: (param) ->\n    {\n      character\n      friends\n      area\n    } = param\n    i = friends.indexOf character\n    return area[i]\n\n  ###* 戦闘行動設定\n  * @memberof nz.ai.Default#\n  * @method setupBattlePosition\n  * @param　{nz.ai.Param} param 設定用パラメータ\n  ###\n  setupAction: (param) ->\n    return\n\nnz.system.addAI 'Default', new nz.ai.Default()\n","###*\n* @file Rule.coffee\n* ルールベースのAIクラス\n###\n\n# node.js と ブラウザでの this.nz を同じインスタンスにする\n_g = window ? global\nnz = _g.nz = _g.nz ? {}\n_g = undefined\n\nnz.ai = nz.ai ? {}\n\nclass nz.ai.Rule\n\n  ###* 初期化\n  * @classdesc ルールベースのAIクラス\n  * @constructor nz.ai.Rule\n  ###\n  constructor: (caller) ->\n    @_caller = caller\n    @rules   = []\n\n  add: (rule) ->\n    @rules.push rule\n\n  ###* 戦闘行動設定\n  * @param　{nz.ai.Param} param 設定用パラメータ\n  ###\n  setupAction: (param) ->\n    for r in @rules\n      if r.cond.call(@_caller,param)\n        if r.setup?.call(@_caller,param)\n          break\n    return\n","\ntm.main ->\n  screen = nz.system.screen\n  assets = nz.system.assets\n\n  nz.system.app = app = tm.display.CanvasApp '#world'\n  # app.enableStats()\n\n  # リサイズ\n  app.resize screen.width, screen.height\n\n  # フィット\n  app.fitWindow()\n\n  # APバックグラウンド\n  app.background = 'gray'\n  \n  # 最初のシーンに切り替える\n  app.pushScene tm.game.LoadingScene(\n    assets: assets\n    width:  screen.width\n    height: screen.height\n  ).on 'load', (e) ->\n    @app.fitWindow()\n    nz.system.start()\n    return\n\n  #app.pushScene SplashScene(\n  #  width:  screen.width\n  #  height: screen.height\n  #)\n\n  # 実行\n  app.run()\n\n  #tm.inform()\n"],"sourceRoot":"/source/"}